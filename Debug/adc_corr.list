
adc_corr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000846c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  08008610  08008610  00018610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c9c  08008c9c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca4  08008ca4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014610  200001d4  08008e80  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200147e4  08008e80  000247e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c7c  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002624  00000000  00000000  00031ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  000344e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7f  00000000  00000000  00035608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c94  00000000  00000000  00036387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d3e  00000000  00000000  0005001b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a03b7  00000000  00000000  00065d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a48  00000000  00000000  00106110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0010bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085f4 	.word	0x080085f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080085f4 	.word	0x080085f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <distance_between_maxima_average>:
static void MX_I2C1_Init(void);

// Helper Functions : TODO MOVE
#include <math.h> // Ensure this is included for fabs() and other math functions

float distance_between_maxima_average(float array[], int size) {
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
    int i, maxima_index = -1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	61bb      	str	r3, [r7, #24]
    float last_maxima;
    float total_distance = 0;
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
    int maxima_count = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]

    // Loop through the array to find local maxima
    for (i = 1; i < size - 1; i++) {
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e044      	b.n	8000ffe <distance_between_maxima_average+0xaa>
        if (array[i] > array[i - 1] && array[i] > array[i + 1]) {
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	ed93 7a00 	vldr	s14, [r3]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f86:	3b01      	subs	r3, #1
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9a:	dd2d      	ble.n	8000ff8 <distance_between_maxima_average+0xa4>
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	ed93 7a00 	vldr	s14, [r3]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	3301      	adds	r3, #1
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	edd3 7a00 	vldr	s15, [r3]
 8000fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	dd1b      	ble.n	8000ff8 <distance_between_maxima_average+0xa4>
            if (maxima_index != -1) {
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc6:	d00f      	beq.n	8000fe8 <distance_between_maxima_average+0x94>
                // Calculate distance from the last maxima
                total_distance += (i - maxima_index);
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fde:	edc7 7a05 	vstr	s15, [r7, #20]
                maxima_count++; // Increment count of maxima distances
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
            }

            // Update last maxima details
            last_maxima = array[i];
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	60bb      	str	r3, [r7, #8]
            maxima_index = i;
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	61bb      	str	r3, [r7, #24]
    for (i = 1; i < size - 1; i++) {
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	3b01      	subs	r3, #1
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbb5      	blt.n	8000f74 <distance_between_maxima_average+0x20>
        }
    }

    // If no maxima found or only one maxima found, return -1
    if (maxima_count == 0) {
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <distance_between_maxima_average+0xbe>
        return -1;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <distance_between_maxima_average+0xe8>)
 8001010:	e00b      	b.n	800102a <distance_between_maxima_average+0xd6>
    }

    // Calculate average distance
    float average_distance = total_distance / maxima_count;
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001024:	edc7 7a03 	vstr	s15, [r7, #12]

    // Optional: Output the result via UART or any other mechanism
    // sprintf(msg, "Average Distance: %f\r\n", average_distance);
    // HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 5);

    return average_distance;
 8001028:	68fb      	ldr	r3, [r7, #12]
}
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3724      	adds	r7, #36	; 0x24
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	bf800000 	.word	0xbf800000

08001040 <extractDigits>:
    i2c_buffer[1] = 0x70; // underline cursor off
    HAL_I2C_Master_Transmit( & hi2c1, DISPLAY_ADDR, i2c_buffer, 2, 1000);
    HAL_Delay(2000);
}

void extractDigits(float32_t period, uint8_t digits[], uint8_t * count) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a03 	vstr	s0, [r7, #12]
 800104a:	60b8      	str	r0, [r7, #8]
 800104c:	6079      	str	r1, [r7, #4]
    char numStr[50]; // Assuming a maximum of 50 characters in the string representation
    sprintf(numStr, "%.4f", period);
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff fa82 	bl	8000558 <__aeabi_f2d>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	f107 0010 	add.w	r0, r7, #16
 800105c:	491d      	ldr	r1, [pc, #116]	; (80010d4 <extractDigits+0x94>)
 800105e:	f005 f96d 	bl	800633c <siprintf>

    int len = strlen(numStr);
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f90a 	bl	8000280 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
    int totalDigits = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	64fb      	str	r3, [r7, #76]	; 0x4c

    // Extract digits from the string
    for (int i = 0; i < len; ++i) {
 8001074:	2300      	movs	r3, #0
 8001076:	64bb      	str	r3, [r7, #72]	; 0x48
 8001078:	e020      	b.n	80010bc <extractDigits+0x7c>
        if (numStr[i] == '.') {
 800107a:	f107 0210 	add.w	r2, r7, #16
 800107e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b2e      	cmp	r3, #46	; 0x2e
 8001086:	d108      	bne.n	800109a <extractDigits+0x5a>
            digits[totalDigits++] = -1; // Placeholder for the decimal point
 8001088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800108e:	461a      	mov	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4413      	add	r3, r2
 8001094:	22ff      	movs	r2, #255	; 0xff
 8001096:	701a      	strb	r2, [r3, #0]
 8001098:	e00d      	b.n	80010b6 <extractDigits+0x76>
        } else {
            digits[totalDigits++] = numStr[i] - '0';
 800109a:	f107 0210 	add.w	r2, r7, #16
 800109e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010a0:	4413      	add	r3, r2
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010a6:	1c59      	adds	r1, r3, #1
 80010a8:	64f9      	str	r1, [r7, #76]	; 0x4c
 80010aa:	4619      	mov	r1, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	440b      	add	r3, r1
 80010b0:	3a30      	subs	r2, #48	; 0x30
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < len; ++i) {
 80010b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010b8:	3301      	adds	r3, #1
 80010ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80010bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbda      	blt.n	800107a <extractDigits+0x3a>
        }
    }

    // Update the number of digits in the array
    * count = totalDigits;
 80010c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	3750      	adds	r7, #80	; 0x50
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	08008610 	.word	0x08008610

080010d8 <display_result>:

void display_result() {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af02      	add	r7, sp, #8
    extractDigits(period, digits, & count);
 80010de:	4b33      	ldr	r3, [pc, #204]	; (80011ac <display_result+0xd4>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	4932      	ldr	r1, [pc, #200]	; (80011b0 <display_result+0xd8>)
 80010e6:	4833      	ldr	r0, [pc, #204]	; (80011b4 <display_result+0xdc>)
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	f7ff ffa8 	bl	8001040 <extractDigits>

    i2c_buffer[0] = 0xFE; //clear display
 80010f0:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <display_result+0xe0>)
 80010f2:	22fe      	movs	r2, #254	; 0xfe
 80010f4:	701a      	strb	r2, [r3, #0]
    i2c_buffer[1] = 0x51;
 80010f6:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <display_result+0xe0>)
 80010f8:	2251      	movs	r2, #81	; 0x51
 80010fa:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit( & hi2c1, DISPLAY_ADDR, i2c_buffer, 2, 1000);
 80010fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2302      	movs	r3, #2
 8001104:	4a2c      	ldr	r2, [pc, #176]	; (80011b8 <display_result+0xe0>)
 8001106:	2150      	movs	r1, #80	; 0x50
 8001108:	482c      	ldr	r0, [pc, #176]	; (80011bc <display_result+0xe4>)
 800110a:	f001 ff81 	bl	8003010 <HAL_I2C_Master_Transmit>
    HAL_Delay(100);
 800110e:	2064      	movs	r0, #100	; 0x64
 8001110:	f000 fee0 	bl	8001ed4 <HAL_Delay>

    for (int i = 0; i < count; i++) {
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	e020      	b.n	800115c <display_result+0x84>
        if (digits[i] == 255) {
 800111a:	4a26      	ldr	r2, [pc, #152]	; (80011b4 <display_result+0xdc>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2bff      	cmp	r3, #255	; 0xff
 8001124:	d103      	bne.n	800112e <display_result+0x56>
            i2c_buffer[0] = '.';
 8001126:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <display_result+0xe0>)
 8001128:	222e      	movs	r2, #46	; 0x2e
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e007      	b.n	800113e <display_result+0x66>
        } else {
            i2c_buffer[0] = '0' + digits[i];
 800112e:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <display_result+0xdc>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	3330      	adds	r3, #48	; 0x30
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <display_result+0xe0>)
 800113c:	701a      	strb	r2, [r3, #0]
        }
        HAL_I2C_Master_Transmit( & hi2c1, DISPLAY_ADDR, i2c_buffer, 1, 1000);
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <display_result+0xe0>)
 8001148:	2150      	movs	r1, #80	; 0x50
 800114a:	481c      	ldr	r0, [pc, #112]	; (80011bc <display_result+0xe4>)
 800114c:	f001 ff60 	bl	8003010 <HAL_I2C_Master_Transmit>
        HAL_Delay(2);
 8001150:	2002      	movs	r0, #2
 8001152:	f000 febf 	bl	8001ed4 <HAL_Delay>
    for (int i = 0; i < count; i++) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3301      	adds	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <display_result+0xd8>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4293      	cmp	r3, r2
 8001166:	dbd8      	blt.n	800111a <display_result+0x42>
    }
    i2c_buffer[0] = 'm';
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <display_result+0xe0>)
 800116a:	226d      	movs	r2, #109	; 0x6d
 800116c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit( & hi2c1, DISPLAY_ADDR, i2c_buffer, 1, 1000);
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <display_result+0xe0>)
 8001178:	2150      	movs	r1, #80	; 0x50
 800117a:	4810      	ldr	r0, [pc, #64]	; (80011bc <display_result+0xe4>)
 800117c:	f001 ff48 	bl	8003010 <HAL_I2C_Master_Transmit>
    HAL_Delay(2);
 8001180:	2002      	movs	r0, #2
 8001182:	f000 fea7 	bl	8001ed4 <HAL_Delay>
    i2c_buffer[0] = 's';
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <display_result+0xe0>)
 8001188:	2273      	movs	r2, #115	; 0x73
 800118a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit( & hi2c1, DISPLAY_ADDR, i2c_buffer, 1, 1000);
 800118c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <display_result+0xe0>)
 8001196:	2150      	movs	r1, #80	; 0x50
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <display_result+0xe4>)
 800119a:	f001 ff39 	bl	8003010 <HAL_I2C_Master_Transmit>
    HAL_Delay(2);
 800119e:	2002      	movs	r0, #2
 80011a0:	f000 fe98 	bl	8001ed4 <HAL_Delay>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200145f8 	.word	0x200145f8
 80011b0:	2001464c 	.word	0x2001464c
 80011b4:	2001463c 	.word	0x2001463c
 80011b8:	200145fc 	.word	0x200145fc
 80011bc:	200044cc 	.word	0x200044cc

080011c0 <main>:

int main(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
    // Initializers
    HAL_Init();
 80011c6:	f000 fe13 	bl	8001df0 <HAL_Init>
    SystemClock_Config();
 80011ca:	f000 f955 	bl	8001478 <SystemClock_Config>

    MX_GPIO_Init();
 80011ce:	f000 fae9 	bl	80017a4 <MX_GPIO_Init>
    MX_DMA_Init();
 80011d2:	f000 fadf 	bl	8001794 <MX_DMA_Init>
    MX_USART2_UART_Init();
 80011d6:	f000 fab3 	bl	8001740 <MX_USART2_UART_Init>
    MX_ADC1_Init();
 80011da:	f000 f9b5 	bl	8001548 <MX_ADC1_Init>
    MX_TIM3_Init();
 80011de:	f000 fa3b 	bl	8001658 <MX_TIM3_Init>
    MX_I2C1_Init();
 80011e2:	f000 fa0b 	bl	80015fc <MX_I2C1_Init>

    // Initialize FIR
    arm_fir_init_f32( & firInstance, FILTER_TAP_NUM, firCoeffs, firState, ADC_BUF_LEN);
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4b90      	ldr	r3, [pc, #576]	; (8001430 <main+0x270>)
 80011ee:	4a91      	ldr	r2, [pc, #580]	; (8001434 <main+0x274>)
 80011f0:	21b5      	movs	r1, #181	; 0xb5
 80011f2:	4891      	ldr	r0, [pc, #580]	; (8001438 <main+0x278>)
 80011f4:	f004 fb5a 	bl	80058ac <arm_fir_init_f32>

    // ADC DMA start
    // HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buf, ADC_BUF_LEN);

    // Start interrupt RQ
    if (HAL_ADC_Start_IT( & hadc1) != HAL_OK)
 80011f8:	4890      	ldr	r0, [pc, #576]	; (800143c <main+0x27c>)
 80011fa:	f000 fed3 	bl	8001fa4 <HAL_ADC_Start_IT>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <main+0x48>
        Error_Handler();
 8001204:	f000 fb92 	bl	800192c <Error_Handler>

    // Infinite Loop
    HAL_Delay(5000);
 8001208:	f241 3088 	movw	r0, #5000	; 0x1388
 800120c:	f000 fe62 	bl	8001ed4 <HAL_Delay>

    while (1) {
        // Start timer
        HAL_TIM_PWM_Start( & htim3, TIM_CHANNEL_1);
 8001210:	2100      	movs	r1, #0
 8001212:	488b      	ldr	r0, [pc, #556]	; (8001440 <main+0x280>)
 8001214:	f002 ff96 	bl	8004144 <HAL_TIM_PWM_Start>

        // Wait 1.1s
        HAL_Delay(1100);
 8001218:	f240 404c 	movw	r0, #1100	; 0x44c
 800121c:	f000 fe5a 	bl	8001ed4 <HAL_Delay>

        sprintf(msg, "adc\r\n");
 8001220:	4988      	ldr	r1, [pc, #544]	; (8001444 <main+0x284>)
 8001222:	4889      	ldr	r0, [pc, #548]	; (8001448 <main+0x288>)
 8001224:	f005 f88a 	bl	800633c <siprintf>
        HAL_UART_Transmit( & huart2, (uint8_t * ) msg, strlen(msg), HAL_MAX_DELAY);
 8001228:	4887      	ldr	r0, [pc, #540]	; (8001448 <main+0x288>)
 800122a:	f7ff f829 	bl	8000280 <strlen>
 800122e:	4603      	mov	r3, r0
 8001230:	b29a      	uxth	r2, r3
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	4984      	ldr	r1, [pc, #528]	; (8001448 <main+0x288>)
 8001238:	4884      	ldr	r0, [pc, #528]	; (800144c <main+0x28c>)
 800123a:	f003 fdb7 	bl	8004dac <HAL_UART_Transmit>
        for (int i = 0; i < ADC_BUF_LEN; i++) {
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e01b      	b.n	800127c <main+0xbc>
            sprintf(msg, "%f\r\n", data[i]);
 8001244:	4a82      	ldr	r2, [pc, #520]	; (8001450 <main+0x290>)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f982 	bl	8000558 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	497e      	ldr	r1, [pc, #504]	; (8001454 <main+0x294>)
 800125a:	487b      	ldr	r0, [pc, #492]	; (8001448 <main+0x288>)
 800125c:	f005 f86e 	bl	800633c <siprintf>
            HAL_UART_Transmit( & huart2, (uint8_t * ) msg, strlen(msg), HAL_MAX_DELAY);
 8001260:	4879      	ldr	r0, [pc, #484]	; (8001448 <main+0x288>)
 8001262:	f7ff f80d 	bl	8000280 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	4976      	ldr	r1, [pc, #472]	; (8001448 <main+0x288>)
 8001270:	4876      	ldr	r0, [pc, #472]	; (800144c <main+0x28c>)
 8001272:	f003 fd9b 	bl	8004dac <HAL_UART_Transmit>
        for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3301      	adds	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001282:	dbdf      	blt.n	8001244 <main+0x84>
        }
        sprintf(msg, "end\r\n");
 8001284:	4974      	ldr	r1, [pc, #464]	; (8001458 <main+0x298>)
 8001286:	4870      	ldr	r0, [pc, #448]	; (8001448 <main+0x288>)
 8001288:	f005 f858 	bl	800633c <siprintf>
        HAL_UART_Transmit( & huart2, (uint8_t * ) msg, strlen(msg), HAL_MAX_DELAY);
 800128c:	486e      	ldr	r0, [pc, #440]	; (8001448 <main+0x288>)
 800128e:	f7fe fff7 	bl	8000280 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	b29a      	uxth	r2, r3
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	496b      	ldr	r1, [pc, #428]	; (8001448 <main+0x288>)
 800129c:	486b      	ldr	r0, [pc, #428]	; (800144c <main+0x28c>)
 800129e:	f003 fd85 	bl	8004dac <HAL_UART_Transmit>

        // FIR Filter data
        arm_fir_f32( & firInstance, (float32_t * ) data, output, ADC_BUF_LEN);
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	4a6d      	ldr	r2, [pc, #436]	; (800145c <main+0x29c>)
 80012a8:	4969      	ldr	r1, [pc, #420]	; (8001450 <main+0x290>)
 80012aa:	4863      	ldr	r0, [pc, #396]	; (8001438 <main+0x278>)
 80012ac:	f004 fa8e 	bl	80057cc <arm_fir_f32>

        sprintf(msg, "fir\r\n");
 80012b0:	496b      	ldr	r1, [pc, #428]	; (8001460 <main+0x2a0>)
 80012b2:	4865      	ldr	r0, [pc, #404]	; (8001448 <main+0x288>)
 80012b4:	f005 f842 	bl	800633c <siprintf>
        HAL_UART_Transmit( & huart2, (uint8_t * ) msg, strlen(msg), 5);
 80012b8:	4863      	ldr	r0, [pc, #396]	; (8001448 <main+0x288>)
 80012ba:	f7fe ffe1 	bl	8000280 <strlen>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	2305      	movs	r3, #5
 80012c4:	4960      	ldr	r1, [pc, #384]	; (8001448 <main+0x288>)
 80012c6:	4861      	ldr	r0, [pc, #388]	; (800144c <main+0x28c>)
 80012c8:	f003 fd70 	bl	8004dac <HAL_UART_Transmit>
        for (int i = 0; i < ADC_BUF_LEN; i++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	e01a      	b.n	8001308 <main+0x148>
            sprintf(msg, "%f\r\n", data[i]);
 80012d2:	4a5f      	ldr	r2, [pc, #380]	; (8001450 <main+0x290>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f93b 	bl	8000558 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	495b      	ldr	r1, [pc, #364]	; (8001454 <main+0x294>)
 80012e8:	4857      	ldr	r0, [pc, #348]	; (8001448 <main+0x288>)
 80012ea:	f005 f827 	bl	800633c <siprintf>
            HAL_UART_Transmit( & huart2, (uint8_t * ) msg, strlen(msg), 5);
 80012ee:	4856      	ldr	r0, [pc, #344]	; (8001448 <main+0x288>)
 80012f0:	f7fe ffc6 	bl	8000280 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	2305      	movs	r3, #5
 80012fa:	4953      	ldr	r1, [pc, #332]	; (8001448 <main+0x288>)
 80012fc:	4853      	ldr	r0, [pc, #332]	; (800144c <main+0x28c>)
 80012fe:	f003 fd55 	bl	8004dac <HAL_UART_Transmit>
        for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3301      	adds	r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800130e:	dbe0      	blt.n	80012d2 <main+0x112>
        }
        sprintf(msg, "end\r\n");
 8001310:	4951      	ldr	r1, [pc, #324]	; (8001458 <main+0x298>)
 8001312:	484d      	ldr	r0, [pc, #308]	; (8001448 <main+0x288>)
 8001314:	f005 f812 	bl	800633c <siprintf>
        HAL_UART_Transmit( & huart2, (uint8_t * ) msg, strlen(msg), 5);
 8001318:	484b      	ldr	r0, [pc, #300]	; (8001448 <main+0x288>)
 800131a:	f7fe ffb1 	bl	8000280 <strlen>
 800131e:	4603      	mov	r3, r0
 8001320:	b29a      	uxth	r2, r3
 8001322:	2305      	movs	r3, #5
 8001324:	4948      	ldr	r1, [pc, #288]	; (8001448 <main+0x288>)
 8001326:	4849      	ldr	r0, [pc, #292]	; (800144c <main+0x28c>)
 8001328:	f003 fd40 	bl	8004dac <HAL_UART_Transmit>

        // Autocorrelate float values : TODO enable optimization
        arm_correlate_f32(output, ADC_BUF_LEN, output, ADC_BUF_LEN, corrs);
 800132c:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <main+0x2a4>)
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001334:	4a49      	ldr	r2, [pc, #292]	; (800145c <main+0x29c>)
 8001336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133a:	4848      	ldr	r0, [pc, #288]	; (800145c <main+0x29c>)
 800133c:	f004 f8f2 	bl	8005524 <arm_correlate_f32>

        sprintf(msg, "corr\r\n");
 8001340:	4949      	ldr	r1, [pc, #292]	; (8001468 <main+0x2a8>)
 8001342:	4841      	ldr	r0, [pc, #260]	; (8001448 <main+0x288>)
 8001344:	f004 fffa 	bl	800633c <siprintf>
        HAL_UART_Transmit( & huart2, (uint8_t * ) msg, strlen(msg), 5);
 8001348:	483f      	ldr	r0, [pc, #252]	; (8001448 <main+0x288>)
 800134a:	f7fe ff99 	bl	8000280 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29a      	uxth	r2, r3
 8001352:	2305      	movs	r3, #5
 8001354:	493c      	ldr	r1, [pc, #240]	; (8001448 <main+0x288>)
 8001356:	483d      	ldr	r0, [pc, #244]	; (800144c <main+0x28c>)
 8001358:	f003 fd28 	bl	8004dac <HAL_UART_Transmit>
        for (int i = 0; i < (ADC_BUF_LEN * 2 - 1); i++) {
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	e01a      	b.n	8001398 <main+0x1d8>
            sprintf(msg, "%f\r\n", corrs[i]);
 8001362:	4a40      	ldr	r2, [pc, #256]	; (8001464 <main+0x2a4>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8f3 	bl	8000558 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4937      	ldr	r1, [pc, #220]	; (8001454 <main+0x294>)
 8001378:	4833      	ldr	r0, [pc, #204]	; (8001448 <main+0x288>)
 800137a:	f004 ffdf 	bl	800633c <siprintf>
            HAL_UART_Transmit( & huart2, (uint8_t * ) msg, strlen(msg), 5);
 800137e:	4832      	ldr	r0, [pc, #200]	; (8001448 <main+0x288>)
 8001380:	f7fe ff7e 	bl	8000280 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	2305      	movs	r3, #5
 800138a:	492f      	ldr	r1, [pc, #188]	; (8001448 <main+0x288>)
 800138c:	482f      	ldr	r0, [pc, #188]	; (800144c <main+0x28c>)
 800138e:	f003 fd0d 	bl	8004dac <HAL_UART_Transmit>
        for (int i = 0; i < (ADC_BUF_LEN * 2 - 1); i++) {
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3301      	adds	r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 800139e:	4293      	cmp	r3, r2
 80013a0:	dddf      	ble.n	8001362 <main+0x1a2>
        }
        sprintf(msg, "end\r\n");
 80013a2:	492d      	ldr	r1, [pc, #180]	; (8001458 <main+0x298>)
 80013a4:	4828      	ldr	r0, [pc, #160]	; (8001448 <main+0x288>)
 80013a6:	f004 ffc9 	bl	800633c <siprintf>
        HAL_UART_Transmit( & huart2, (uint8_t * ) msg, strlen(msg), 5);
 80013aa:	4827      	ldr	r0, [pc, #156]	; (8001448 <main+0x288>)
 80013ac:	f7fe ff68 	bl	8000280 <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	2305      	movs	r3, #5
 80013b6:	4924      	ldr	r1, [pc, #144]	; (8001448 <main+0x288>)
 80013b8:	4824      	ldr	r0, [pc, #144]	; (800144c <main+0x28c>)
 80013ba:	f003 fcf7 	bl	8004dac <HAL_UART_Transmit>

        // Compute period of 2 most relevant peaks
        period = distance_between_maxima_average(corrs, 2 * ADC_BUF_LEN - 1) * (1.0 / SAMPLE_RATE) * 1000.0;
 80013be:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80013c2:	4828      	ldr	r0, [pc, #160]	; (8001464 <main+0x2a4>)
 80013c4:	f7ff fdc6 	bl	8000f54 <distance_between_maxima_average>
 80013c8:	ee10 3a10 	vmov	r3, s0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8c3 	bl	8000558 <__aeabi_f2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <main+0x2ac>)
 80013d8:	f7ff f916 	bl	8000608 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <main+0x2b0>)
 80013ea:	f7ff f90d 	bl	8000608 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fbdf 	bl	8000bb8 <__aeabi_d2f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <main+0x2b4>)
 80013fe:	6013      	str	r3, [r2, #0]

        sprintf(msg, "%f\r\n", period);
 8001400:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <main+0x2b4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f8a7 	bl	8000558 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4911      	ldr	r1, [pc, #68]	; (8001454 <main+0x294>)
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <main+0x288>)
 8001412:	f004 ff93 	bl	800633c <siprintf>
        HAL_UART_Transmit( & huart2, (uint8_t * ) msg, strlen(msg), 5);
 8001416:	480c      	ldr	r0, [pc, #48]	; (8001448 <main+0x288>)
 8001418:	f7fe ff32 	bl	8000280 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	b29a      	uxth	r2, r3
 8001420:	2305      	movs	r3, #5
 8001422:	4909      	ldr	r1, [pc, #36]	; (8001448 <main+0x288>)
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <main+0x28c>)
 8001426:	f003 fcc1 	bl	8004dac <HAL_UART_Transmit>
        display_result();
 800142a:	f7ff fe55 	bl	80010d8 <display_result>
        HAL_TIM_PWM_Start( & htim3, TIM_CHANNEL_1);
 800142e:	e6ef      	b.n	8001210 <main+0x50>
 8001430:	200001f0 	.word	0x200001f0
 8001434:	08008640 	.word	0x08008640
 8001438:	200044c0 	.word	0x200044c0
 800143c:	20004520 	.word	0x20004520
 8001440:	20004568 	.word	0x20004568
 8001444:	08008618 	.word	0x08008618
 8001448:	20014650 	.word	0x20014650
 800144c:	200045b0 	.word	0x200045b0
 8001450:	200045fc 	.word	0x200045fc
 8001454:	08008620 	.word	0x08008620
 8001458:	08008628 	.word	0x08008628
 800145c:	200085fc 	.word	0x200085fc
 8001460:	08008630 	.word	0x08008630
 8001464:	2000c5fc 	.word	0x2000c5fc
 8001468:	08008638 	.word	0x08008638
 800146c:	3f300000 	.word	0x3f300000
 8001470:	408f4000 	.word	0x408f4000
 8001474:	200145f8 	.word	0x200145f8

08001478 <SystemClock_Config>:
    }
}

void SystemClock_Config(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2230      	movs	r2, #48	; 0x30
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f004 ffbb 	bl	8006402 <memset>
        0
    };
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
        0
    };

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <SystemClock_Config+0xc8>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a26      	ldr	r2, [pc, #152]	; (8001540 <SystemClock_Config+0xc8>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <SystemClock_Config+0xc8>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <SystemClock_Config+0xcc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a20      	ldr	r2, [pc, #128]	; (8001544 <SystemClock_Config+0xcc>)
 80014c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <SystemClock_Config+0xcc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d4:	2302      	movs	r3, #2
 80014d6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d8:	2301      	movs	r3, #1
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014dc:	2310      	movs	r3, #16
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e0:	2302      	movs	r3, #2
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 80014e8:	2308      	movs	r3, #8
 80014ea:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 70;
 80014ec:	2346      	movs	r3, #70	; 0x46
 80014ee:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80014f4:	2304      	movs	r3, #4
 80014f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig( & RCC_OscInitStruct) != HAL_OK) {
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 f8e1 	bl	80036c4 <HAL_RCC_OscConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0x94>
        Error_Handler();
 8001508:	f000 fa10 	bl	800192c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800150c:	230f      	movs	r3, #15
 800150e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001510:	2302      	movs	r3, #2
 8001512:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig( & RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2101      	movs	r1, #1
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fb43 	bl	8003bb4 <HAL_RCC_ClockConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0xc0>
        Error_Handler();
 8001534:	f000 f9fa 	bl	800192c <Error_Handler>
    }
}
 8001538:	bf00      	nop
 800153a:	3750      	adds	r7, #80	; 0x50
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000

08001548 <MX_ADC1_Init>:

static void MX_ADC1_Init(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {
 800154e:	463b      	mov	r3, r7
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
        0
    };

    hadc1.Instance = ADC1;
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <MX_ADC1_Init+0xac>)
 800155c:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <MX_ADC1_Init+0xb0>)
 800155e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <MX_ADC1_Init+0xac>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001566:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <MX_ADC1_Init+0xac>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_ADC1_Init+0xac>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <MX_ADC1_Init+0xac>)
 8001574:	2200      	movs	r2, #0
 8001576:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <MX_ADC1_Init+0xac>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_ADC1_Init+0xac>)
 8001582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_ADC1_Init+0xac>)
 800158a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <MX_ADC1_Init+0xac>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_ADC1_Init+0xac>)
 8001598:	2201      	movs	r2, #1
 800159a:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE; // TODO HERE
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <MX_ADC1_Init+0xac>)
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_ADC1_Init+0xac>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init( & hadc1) != HAL_OK) {
 80015aa:	4812      	ldr	r0, [pc, #72]	; (80015f4 <MX_ADC1_Init+0xac>)
 80015ac:	f000 fcb6 	bl	8001f1c <HAL_ADC_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_ADC1_Init+0x72>
        Error_Handler();
 80015b6:	f000 f9b9 	bl	800192c <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80015be:	2301      	movs	r3, #1
 80015c0:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015c2:	2307      	movs	r3, #7
 80015c4:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel( & hadc1, & sConfig) != HAL_OK) {
 80015c6:	463b      	mov	r3, r7
 80015c8:	4619      	mov	r1, r3
 80015ca:	480a      	ldr	r0, [pc, #40]	; (80015f4 <MX_ADC1_Init+0xac>)
 80015cc:	f000 feda 	bl	8002384 <HAL_ADC_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_ADC1_Init+0x92>
        Error_Handler();
 80015d6:	f000 f9a9 	bl	800192c <Error_Handler>
    }

    // Turn on ADC Global Interrupts
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2012      	movs	r0, #18
 80015e0:	f001 f9e3 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80015e4:	2012      	movs	r0, #18
 80015e6:	f001 f9fc 	bl	80029e2 <HAL_NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20004520 	.word	0x20004520
 80015f8:	40012000 	.word	0x40012000

080015fc <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_I2C1_Init+0x54>)
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <MX_I2C1_Init+0x58>)
 8001604:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 40000;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x54>)
 8001608:	f649 4240 	movw	r2, #40000	; 0x9c40
 800160c:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_I2C1_Init+0x54>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_I2C1_Init+0x54>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <MX_I2C1_Init+0x54>)
 800161c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001620:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_I2C1_Init+0x54>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_I2C1_Init+0x54>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_I2C1_Init+0x54>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_I2C1_Init+0x54>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init( & hi2c1) != HAL_OK) {
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_I2C1_Init+0x54>)
 800163c:	f001 fba4 	bl	8002d88 <HAL_I2C_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_I2C1_Init+0x4e>
        Error_Handler();
 8001646:	f000 f971 	bl	800192c <Error_Handler>
    }
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200044cc 	.word	0x200044cc
 8001654:	40005400 	.word	0x40005400

08001658 <MX_TIM3_Init>:

static void MX_TIM3_Init(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b08e      	sub	sp, #56	; 0x38
 800165c:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {
 800165e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
        0
    };
    TIM_MasterConfigTypeDef sMasterConfig = {
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
        0
    };
    TIM_OC_InitTypeDef sConfigOC = {
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	619a      	str	r2, [r3, #24]
        0
    };

    htim3.Instance = TIM3;
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <MX_TIM3_Init+0xe0>)
 800168a:	4a2c      	ldr	r2, [pc, #176]	; (800173c <MX_TIM3_Init+0xe4>)
 800168c:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <MX_TIM3_Init+0xe0>)
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <MX_TIM3_Init+0xe0>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 8545; // 8545 = 4096 Hz
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <MX_TIM3_Init+0xe0>)
 800169c:	f242 1261 	movw	r2, #8545	; 0x2161
 80016a0:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <MX_TIM3_Init+0xe0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <MX_TIM3_Init+0xe0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init( & htim3) != HAL_OK) {
 80016ae:	4822      	ldr	r0, [pc, #136]	; (8001738 <MX_TIM3_Init+0xe0>)
 80016b0:	f002 fca0 	bl	8003ff4 <HAL_TIM_Base_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM3_Init+0x66>
        Error_Handler();
 80016ba:	f000 f937 	bl	800192c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource( & htim3, & sClockSourceConfig) != HAL_OK) {
 80016c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c8:	4619      	mov	r1, r3
 80016ca:	481b      	ldr	r0, [pc, #108]	; (8001738 <MX_TIM3_Init+0xe0>)
 80016cc:	f002 ff10 	bl	80044f0 <HAL_TIM_ConfigClockSource>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM3_Init+0x82>
        Error_Handler();
 80016d6:	f000 f929 	bl	800192c <Error_Handler>
    }
    if (HAL_TIM_PWM_Init( & htim3) != HAL_OK) {
 80016da:	4817      	ldr	r0, [pc, #92]	; (8001738 <MX_TIM3_Init+0xe0>)
 80016dc:	f002 fcd9 	bl	8004092 <HAL_TIM_PWM_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM3_Init+0x92>
        Error_Handler();
 80016e6:	f000 f921 	bl	800192c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016ea:	2320      	movs	r3, #32
 80016ec:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization( & htim3, & sMasterConfig) != HAL_OK) {
 80016f2:	f107 0320 	add.w	r3, r7, #32
 80016f6:	4619      	mov	r1, r3
 80016f8:	480f      	ldr	r0, [pc, #60]	; (8001738 <MX_TIM3_Init+0xe0>)
 80016fa:	f003 fa99 	bl	8004c30 <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0xb0>
        Error_Handler();
 8001704:	f000 f912 	bl	800192c <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001708:	2360      	movs	r3, #96	; 0x60
 800170a:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel( & htim3, & sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	4619      	mov	r1, r3
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <MX_TIM3_Init+0xe0>)
 8001720:	f002 fe24 	bl	800436c <HAL_TIM_PWM_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM3_Init+0xd6>
        Error_Handler();
 800172a:	f000 f8ff 	bl	800192c <Error_Handler>
    }
}
 800172e:	bf00      	nop
 8001730:	3738      	adds	r7, #56	; 0x38
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20004568 	.word	0x20004568
 800173c:	40000400 	.word	0x40000400

08001740 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <MX_USART2_UART_Init+0x50>)
 8001748:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_USART2_UART_Init+0x4c>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_USART2_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_USART2_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init( & huart2) != HAL_OK) {
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001778:	f003 fac8 	bl	8004d0c <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8001782:	f000 f8d3 	bl	800192c <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200045b0 	.word	0x200045b0
 8001790:	40004400 	.word	0x40004400

08001794 <MX_DMA_Init>:

static void MX_DMA_Init(void) {
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn interrupt configuration */

    //    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
    //    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
        0
    };

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <MX_GPIO_Init+0xd0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a2c      	ldr	r2, [pc, #176]	; (8001874 <MX_GPIO_Init+0xd0>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <MX_GPIO_Init+0xd0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <MX_GPIO_Init+0xd0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a25      	ldr	r2, [pc, #148]	; (8001874 <MX_GPIO_Init+0xd0>)
 80017e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b23      	ldr	r3, [pc, #140]	; (8001874 <MX_GPIO_Init+0xd0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <MX_GPIO_Init+0xd0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <MX_GPIO_Init+0xd0>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <MX_GPIO_Init+0xd0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <MX_GPIO_Init+0xd0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <MX_GPIO_Init+0xd0>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <MX_GPIO_Init+0xd0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2120      	movs	r1, #32
 800182e:	4812      	ldr	r0, [pc, #72]	; (8001878 <MX_GPIO_Init+0xd4>)
 8001830:	f001 fa76 	bl	8002d20 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8001834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800183a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, & GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	480c      	ldr	r0, [pc, #48]	; (800187c <MX_GPIO_Init+0xd8>)
 800184c:	f001 f8e4 	bl	8002a18 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8001850:	2320      	movs	r3, #32
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, & GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	4804      	ldr	r0, [pc, #16]	; (8001878 <MX_GPIO_Init+0xd4>)
 8001868:	f001 f8d6 	bl	8002a18 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020800 	.word	0x40020800

08001880 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef * hadc) {
    // HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc) {
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001888:	2120      	movs	r1, #32
 800188a:	4822      	ldr	r0, [pc, #136]	; (8001914 <HAL_ADC_ConvCpltCallback+0x94>)
 800188c:	f001 fa61 	bl	8002d52 <HAL_GPIO_TogglePin>

    if (hadc == & hadc1) { // Check if the callback is from ADC1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a21      	ldr	r2, [pc, #132]	; (8001918 <HAL_ADC_ConvCpltCallback+0x98>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d139      	bne.n	800190c <HAL_ADC_ConvCpltCallback+0x8c>
        data[head] = ((float32_t) HAL_ADC_GetValue(hadc) / 4096.0);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fd51 	bl	8002340 <HAL_ADC_GetValue>
 800189e:	ee07 0a90 	vmov	s15, r0
 80018a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a6:	ee17 0a90 	vmov	r0, s15
 80018aa:	f7fe fe55 	bl	8000558 <__aeabi_f2d>
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_ADC_ConvCpltCallback+0x9c>)
 80018b4:	f7fe ffd2 	bl	800085c <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4918      	ldr	r1, [pc, #96]	; (8001920 <HAL_ADC_ConvCpltCallback+0xa0>)
 80018be:	8809      	ldrh	r1, [r1, #0]
 80018c0:	b289      	uxth	r1, r1
 80018c2:	460c      	mov	r4, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f976 	bl	8000bb8 <__aeabi_d2f>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4915      	ldr	r1, [pc, #84]	; (8001924 <HAL_ADC_ConvCpltCallback+0xa4>)
 80018d0:	00a3      	lsls	r3, r4, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	601a      	str	r2, [r3, #0]

        if (head == (ADC_BUF_LEN - 1)) {
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_ADC_ConvCpltCallback+0xa0>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d10c      	bne.n	80018fe <HAL_ADC_ConvCpltCallback+0x7e>
            HAL_TIM_PWM_Stop( & htim3, TIM_CHANNEL_1);
 80018e4:	2100      	movs	r1, #0
 80018e6:	4810      	ldr	r0, [pc, #64]	; (8001928 <HAL_ADC_ConvCpltCallback+0xa8>)
 80018e8:	f002 fcdc 	bl	80042a4 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2120      	movs	r1, #32
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <HAL_ADC_ConvCpltCallback+0x94>)
 80018f2:	f001 fa15 	bl	8002d20 <HAL_GPIO_WritePin>
            head = 0;
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_ADC_ConvCpltCallback+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	801a      	strh	r2, [r3, #0]
        } else head++;
    }
}
 80018fc:	e006      	b.n	800190c <HAL_ADC_ConvCpltCallback+0x8c>
        } else head++;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	3301      	adds	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_ADC_ConvCpltCallback+0xa0>)
 800190a:	801a      	strh	r2, [r3, #0]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}
 8001914:	40020000 	.word	0x40020000
 8001918:	20004520 	.word	0x20004520
 800191c:	40b00000 	.word	0x40b00000
 8001920:	200045f8 	.word	0x200045f8
 8001924:	200045fc 	.word	0x200045fc
 8001928:	20004568 	.word	0x20004568

0800192c <Error_Handler>:

void Error_Handler(void) {
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 8001934:	e7fe      	b.n	8001934 <Error_Handler+0x8>
	...

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <HAL_MspInit+0x4c>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <HAL_MspInit+0x4c>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_MspInit+0x4c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_MspInit+0x4c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_MspInit+0x4c>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_MspInit+0x4c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001976:	2007      	movs	r0, #7
 8001978:	f001 f80c 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <HAL_ADC_MspInit+0x8c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12f      	bne.n	8001a0a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a19      	ldr	r2, [pc, #100]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019e2:	2301      	movs	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e6:	2303      	movs	r3, #3
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4809      	ldr	r0, [pc, #36]	; (8001a1c <HAL_ADC_MspInit+0x94>)
 80019f6:	f001 f80f 	bl	8002a18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2012      	movs	r0, #18
 8001a00:	f000 ffd3 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a04:	2012      	movs	r0, #18
 8001a06:	f000 ffec 	bl	80029e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40012000 	.word	0x40012000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <HAL_I2C_MspInit+0x84>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12b      	bne.n	8001a9a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_I2C_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_I2C_MspInit+0x88>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_I2C_MspInit+0x88>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a5e:	23c0      	movs	r3, #192	; 0xc0
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a62:	2312      	movs	r3, #18
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <HAL_I2C_MspInit+0x8c>)
 8001a7a:	f000 ffcd 	bl	8002a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_I2C_MspInit+0x88>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_I2C_MspInit+0x88>)
 8001a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_I2C_MspInit+0x88>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020400 	.word	0x40020400

08001ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_TIM_Base_MspInit+0x3c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d10d      	bne.n	8001ade <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_TIM_Base_MspInit+0x40>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_TIM_Base_MspInit+0x40>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_TIM_Base_MspInit+0x40>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40000400 	.word	0x40000400
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <HAL_UART_MspInit+0x84>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d12b      	bne.n	8001b6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_UART_MspInit+0x88>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <HAL_UART_MspInit+0x88>)
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_UART_MspInit+0x88>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_UART_MspInit+0x88>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_UART_MspInit+0x88>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_UART_MspInit+0x88>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b5e:	2307      	movs	r3, #7
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <HAL_UART_MspInit+0x8c>)
 8001b6a:	f000 ff55 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	; 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40004400 	.word	0x40004400
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000

08001b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b88:	e7fe      	b.n	8001b88 <NMI_Handler+0x4>

08001b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <HardFault_Handler+0x4>

08001b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <MemManage_Handler+0x4>

08001b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <BusFault_Handler+0x4>

08001b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <UsageFault_Handler+0x4>

08001ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd0:	f000 f960 	bl	8001e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <ADC_IRQHandler+0x10>)
 8001bde:	f000 fa9f 	bl	8002120 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20004520 	.word	0x20004520

08001bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return 1;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_kill>:

int _kill(int pid, int sig)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c06:	f004 fc4f 	bl	80064a8 <__errno>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2216      	movs	r2, #22
 8001c0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_exit>:

void _exit (int status)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ffe7 	bl	8001bfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c2e:	e7fe      	b.n	8001c2e <_exit+0x12>

08001c30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e00a      	b.n	8001c58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c42:	f3af 8000 	nop.w
 8001c46:	4601      	mov	r1, r0
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60ba      	str	r2, [r7, #8]
 8001c4e:	b2ca      	uxtb	r2, r1
 8001c50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbf0      	blt.n	8001c42 <_read+0x12>
  }

  return len;
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e009      	b.n	8001c90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	60ba      	str	r2, [r7, #8]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbf1      	blt.n	8001c7c <_write+0x12>
  }
  return len;
 8001c98:	687b      	ldr	r3, [r7, #4]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_close>:

int _close(int file)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cca:	605a      	str	r2, [r3, #4]
  return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_isatty>:

int _isatty(int file)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f004 fbb4 	bl	80064a8 <__errno>
 8001d40:	4603      	mov	r3, r0
 8001d42:	220c      	movs	r2, #12
 8001d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20020000 	.word	0x20020000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	20014690 	.word	0x20014690
 8001d74:	200147e8 	.word	0x200147e8

08001d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <SystemInit+0x20>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <SystemInit+0x20>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001da0:	f7ff ffea 	bl	8001d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da4:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001da6:	490d      	ldr	r1, [pc, #52]	; (8001ddc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dac:	e002      	b.n	8001db4 <LoopCopyDataInit>

08001dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db2:	3304      	adds	r3, #4

08001db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db8:	d3f9      	bcc.n	8001dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dbc:	4c0a      	ldr	r4, [pc, #40]	; (8001de8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc0:	e001      	b.n	8001dc6 <LoopFillZerobss>

08001dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc4:	3204      	adds	r2, #4

08001dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc8:	d3fb      	bcc.n	8001dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dca:	f004 fb73 	bl	80064b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dce:	f7ff f9f7 	bl	80011c0 <main>
  bx  lr    
 8001dd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ddc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001de0:	08008cac 	.word	0x08008cac
  ldr r2, =_sbss
 8001de4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001de8:	200147e4 	.word	0x200147e4

08001dec <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dec:	e7fe      	b.n	8001dec <DMA1_Stream0_IRQHandler>
	...

08001df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <HAL_Init+0x40>)
 8001dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_Init+0x40>)
 8001e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_Init+0x40>)
 8001e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f000 fdbb 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f808 	bl	8001e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e24:	f7ff fd88 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x54>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_InitTick+0x58>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fdd3 	bl	80029fe <HAL_SYSTICK_Config>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00e      	b.n	8001e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0f      	cmp	r3, #15
 8001e66:	d80a      	bhi.n	8001e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f000 fd9b 	bl	80029aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <HAL_InitTick+0x5c>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	20014694 	.word	0x20014694

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20014694 	.word	0x20014694

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff ffee 	bl	8001ebc <HAL_GetTick>
 8001ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_Delay+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001efa:	bf00      	nop
 8001efc:	f7ff ffde 	bl	8001ebc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000008 	.word	0x20000008

08001f1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e033      	b.n	8001f9a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff fd24 	bl	8001988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d118      	bne.n	8001f8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f62:	f023 0302 	bic.w	r3, r3, #2
 8001f66:	f043 0202 	orr.w	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fb3a 	bl	80025e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f023 0303 	bic.w	r3, r3, #3
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
 8001f8a:	e001      	b.n	8001f90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_Start_IT+0x1a>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e0a1      	b.n	8002102 <HAL_ADC_Start_IT+0x15e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d018      	beq.n	8002006 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe4:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <HAL_ADC_Start_IT+0x16c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <HAL_ADC_Start_IT+0x170>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0c9a      	lsrs	r2, r3, #18
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ff8:	e002      	b.n	8002000 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f9      	bne.n	8001ffa <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d169      	bne.n	80020e8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800203e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002052:	d106      	bne.n	8002062 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	f023 0206 	bic.w	r2, r3, #6
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	645a      	str	r2, [r3, #68]	; 0x44
 8002060:	e002      	b.n	8002068 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_ADC_Start_IT+0x174>)
 8002072:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800207c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800208c:	f043 0320 	orr.w	r3, r3, #32
 8002090:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10f      	bne.n	80020be <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d129      	bne.n	8002100 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	e020      	b.n	8002100 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a16      	ldr	r2, [pc, #88]	; (800211c <HAL_ADC_Start_IT+0x178>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d11b      	bne.n	8002100 <HAL_ADC_Start_IT+0x15c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d114      	bne.n	8002100 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	e00b      	b.n	8002100 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f043 0210 	orr.w	r2, r3, #16
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000000 	.word	0x20000000
 8002114:	431bde83 	.word	0x431bde83
 8002118:	40012300 	.word	0x40012300
 800211c:	40012000 	.word	0x40012000

08002120 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d049      	beq.n	80021ea <HAL_ADC_IRQHandler+0xca>
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d046      	beq.n	80021ea <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d12b      	bne.n	80021da <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002186:	2b00      	cmp	r3, #0
 8002188:	d127      	bne.n	80021da <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d119      	bne.n	80021da <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0220 	bic.w	r2, r2, #32
 80021b4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fb50 	bl	8001880 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0212 	mvn.w	r2, #18
 80021e8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d057      	beq.n	80022b0 <HAL_ADC_IRQHandler+0x190>
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d054      	beq.n	80022b0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d139      	bne.n	80022a0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002244:	2b00      	cmp	r3, #0
 8002246:	d12b      	bne.n	80022a0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002252:	2b00      	cmp	r3, #0
 8002254:	d124      	bne.n	80022a0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002260:	2b00      	cmp	r3, #0
 8002262:	d11d      	bne.n	80022a0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002268:	2b00      	cmp	r3, #0
 800226a:	d119      	bne.n	80022a0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fa9d 	bl	80027e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f06f 020c 	mvn.w	r2, #12
 80022ae:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d017      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x1d6>
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d014      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10d      	bne.n	80022f6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f837 	bl	800235a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0201 	mvn.w	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002304:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d015      	beq.n	8002338 <HAL_ADC_IRQHandler+0x218>
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d012      	beq.n	8002338 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f043 0202 	orr.w	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f06f 0220 	mvn.w	r2, #32
 8002326:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f820 	bl	800236e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f06f 0220 	mvn.w	r2, #32
 8002336:	601a      	str	r2, [r3, #0]
  }
}
 8002338:	bf00      	nop
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1c>
 800239c:	2302      	movs	r3, #2
 800239e:	e113      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x244>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	d925      	bls.n	80023fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68d9      	ldr	r1, [r3, #12]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	3b1e      	subs	r3, #30
 80023c6:	2207      	movs	r2, #7
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43da      	mvns	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	400a      	ands	r2, r1
 80023d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68d9      	ldr	r1, [r3, #12]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	4603      	mov	r3, r0
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4403      	add	r3, r0
 80023ee:	3b1e      	subs	r3, #30
 80023f0:	409a      	lsls	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	e022      	b.n	8002442 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6919      	ldr	r1, [r3, #16]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	2207      	movs	r2, #7
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	400a      	ands	r2, r1
 800241e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6919      	ldr	r1, [r3, #16]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	4603      	mov	r3, r0
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4403      	add	r3, r0
 8002438:	409a      	lsls	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b06      	cmp	r3, #6
 8002448:	d824      	bhi.n	8002494 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	3b05      	subs	r3, #5
 800245c:	221f      	movs	r2, #31
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	400a      	ands	r2, r1
 800246a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b05      	subs	r3, #5
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	635a      	str	r2, [r3, #52]	; 0x34
 8002492:	e04c      	b.n	800252e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d824      	bhi.n	80024e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b23      	subs	r3, #35	; 0x23
 80024ae:	221f      	movs	r2, #31
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43da      	mvns	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	400a      	ands	r2, r1
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	3b23      	subs	r3, #35	; 0x23
 80024d8:	fa00 f203 	lsl.w	r2, r0, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
 80024e4:	e023      	b.n	800252e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	3b41      	subs	r3, #65	; 0x41
 80024f8:	221f      	movs	r2, #31
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	400a      	ands	r2, r1
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	4618      	mov	r0, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3b41      	subs	r3, #65	; 0x41
 8002522:	fa00 f203 	lsl.w	r2, r0, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800252e:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <HAL_ADC_ConfigChannel+0x250>)
 8002530:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <HAL_ADC_ConfigChannel+0x254>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d10f      	bne.n	800255c <HAL_ADC_ConfigChannel+0x1d8>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b12      	cmp	r3, #18
 8002542:	d10b      	bne.n	800255c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <HAL_ADC_ConfigChannel+0x254>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d12b      	bne.n	80025be <HAL_ADC_ConfigChannel+0x23a>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <HAL_ADC_ConfigChannel+0x258>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d003      	beq.n	8002578 <HAL_ADC_ConfigChannel+0x1f4>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b11      	cmp	r3, #17
 8002576:	d122      	bne.n	80025be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a11      	ldr	r2, [pc, #68]	; (80025dc <HAL_ADC_ConfigChannel+0x258>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d111      	bne.n	80025be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_ADC_ConfigChannel+0x25c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <HAL_ADC_ConfigChannel+0x260>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	0c9a      	lsrs	r2, r3, #18
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025b0:	e002      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f9      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40012300 	.word	0x40012300
 80025d8:	40012000 	.word	0x40012000
 80025dc:	10000012 	.word	0x10000012
 80025e0:	20000000 	.word	0x20000000
 80025e4:	431bde83 	.word	0x431bde83

080025e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025f0:	4b79      	ldr	r3, [pc, #484]	; (80027d8 <ADC_Init+0x1f0>)
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	431a      	orrs	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800261c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	021a      	lsls	r2, r3, #8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6899      	ldr	r1, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	4a58      	ldr	r2, [pc, #352]	; (80027dc <ADC_Init+0x1f4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d022      	beq.n	80026c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800268e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6899      	ldr	r1, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6899      	ldr	r1, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	e00f      	b.n	80026e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0202 	bic.w	r2, r2, #2
 80026f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6899      	ldr	r1, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7e1b      	ldrb	r3, [r3, #24]
 8002700:	005a      	lsls	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01b      	beq.n	800274c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002722:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002732:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6859      	ldr	r1, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	3b01      	subs	r3, #1
 8002740:	035a      	lsls	r2, r3, #13
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	e007      	b.n	800275c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800275a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	3b01      	subs	r3, #1
 8002778:	051a      	lsls	r2, r3, #20
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6899      	ldr	r1, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800279e:	025a      	lsls	r2, r3, #9
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6899      	ldr	r1, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	029a      	lsls	r2, r3, #10
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	609a      	str	r2, [r3, #8]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40012300 	.word	0x40012300
 80027dc:	0f000001 	.word	0x0f000001

080027e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800281c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002826:	4a04      	ldr	r2, [pc, #16]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	60d3      	str	r3, [r2, #12]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <__NVIC_GetPriorityGrouping+0x18>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	f003 0307 	and.w	r3, r3, #7
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db0b      	blt.n	8002882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	4907      	ldr	r1, [pc, #28]	; (8002890 <__NVIC_EnableIRQ+0x38>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000e100 	.word	0xe000e100

08002894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	6039      	str	r1, [r7, #0]
 800289e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db0a      	blt.n	80028be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	490c      	ldr	r1, [pc, #48]	; (80028e0 <__NVIC_SetPriority+0x4c>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	0112      	lsls	r2, r2, #4
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	440b      	add	r3, r1
 80028b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028bc:	e00a      	b.n	80028d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4908      	ldr	r1, [pc, #32]	; (80028e4 <__NVIC_SetPriority+0x50>)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3b04      	subs	r3, #4
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	440b      	add	r3, r1
 80028d2:	761a      	strb	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000e100 	.word	0xe000e100
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f1c3 0307 	rsb	r3, r3, #7
 8002902:	2b04      	cmp	r3, #4
 8002904:	bf28      	it	cs
 8002906:	2304      	movcs	r3, #4
 8002908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3304      	adds	r3, #4
 800290e:	2b06      	cmp	r3, #6
 8002910:	d902      	bls.n	8002918 <NVIC_EncodePriority+0x30>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3b03      	subs	r3, #3
 8002916:	e000      	b.n	800291a <NVIC_EncodePriority+0x32>
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	401a      	ands	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002930:	f04f 31ff 	mov.w	r1, #4294967295
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43d9      	mvns	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	4313      	orrs	r3, r2
         );
}
 8002942:	4618      	mov	r0, r3
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002960:	d301      	bcc.n	8002966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002962:	2301      	movs	r3, #1
 8002964:	e00f      	b.n	8002986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <SysTick_Config+0x40>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296e:	210f      	movs	r1, #15
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f7ff ff8e 	bl	8002894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <SysTick_Config+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <SysTick_Config+0x40>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff29 	bl	80027f4 <__NVIC_SetPriorityGrouping>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029bc:	f7ff ff3e 	bl	800283c <__NVIC_GetPriorityGrouping>
 80029c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	6978      	ldr	r0, [r7, #20]
 80029c8:	f7ff ff8e 	bl	80028e8 <NVIC_EncodePriority>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff5d 	bl	8002894 <__NVIC_SetPriority>
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff31 	bl	8002858 <__NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffa2 	bl	8002950 <SysTick_Config>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e159      	b.n	8002ce8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a34:	2201      	movs	r2, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	f040 8148 	bne.w	8002ce2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d005      	beq.n	8002a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d130      	bne.n	8002acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2203      	movs	r2, #3
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 0201 	and.w	r2, r3, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d017      	beq.n	8002b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d123      	bne.n	8002b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	08da      	lsrs	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3208      	adds	r2, #8
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0203 	and.w	r2, r3, #3
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a2 	beq.w	8002ce2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	4a56      	ldr	r2, [pc, #344]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bac:	6453      	str	r3, [r2, #68]	; 0x44
 8002bae:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bba:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_GPIO_Init+0x2ec>)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a49      	ldr	r2, [pc, #292]	; (8002d08 <HAL_GPIO_Init+0x2f0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d019      	beq.n	8002c1a <HAL_GPIO_Init+0x202>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a48      	ldr	r2, [pc, #288]	; (8002d0c <HAL_GPIO_Init+0x2f4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <HAL_GPIO_Init+0x1fe>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a47      	ldr	r2, [pc, #284]	; (8002d10 <HAL_GPIO_Init+0x2f8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00d      	beq.n	8002c12 <HAL_GPIO_Init+0x1fa>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a46      	ldr	r2, [pc, #280]	; (8002d14 <HAL_GPIO_Init+0x2fc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <HAL_GPIO_Init+0x1f6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a45      	ldr	r2, [pc, #276]	; (8002d18 <HAL_GPIO_Init+0x300>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <HAL_GPIO_Init+0x1f2>
 8002c06:	2304      	movs	r3, #4
 8002c08:	e008      	b.n	8002c1c <HAL_GPIO_Init+0x204>
 8002c0a:	2307      	movs	r3, #7
 8002c0c:	e006      	b.n	8002c1c <HAL_GPIO_Init+0x204>
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e004      	b.n	8002c1c <HAL_GPIO_Init+0x204>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e002      	b.n	8002c1c <HAL_GPIO_Init+0x204>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_GPIO_Init+0x204>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	f002 0203 	and.w	r2, r2, #3
 8002c22:	0092      	lsls	r2, r2, #2
 8002c24:	4093      	lsls	r3, r2
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c2c:	4935      	ldr	r1, [pc, #212]	; (8002d04 <HAL_GPIO_Init+0x2ec>)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3a:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_GPIO_Init+0x304>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c5e:	4a2f      	ldr	r2, [pc, #188]	; (8002d1c <HAL_GPIO_Init+0x304>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c64:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <HAL_GPIO_Init+0x304>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c88:	4a24      	ldr	r2, [pc, #144]	; (8002d1c <HAL_GPIO_Init+0x304>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c8e:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_GPIO_Init+0x304>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb2:	4a1a      	ldr	r2, [pc, #104]	; (8002d1c <HAL_GPIO_Init+0x304>)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb8:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <HAL_GPIO_Init+0x304>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cdc:	4a0f      	ldr	r2, [pc, #60]	; (8002d1c <HAL_GPIO_Init+0x304>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	f67f aea2 	bls.w	8002a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3724      	adds	r7, #36	; 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40013800 	.word	0x40013800
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	40020400 	.word	0x40020400
 8002d10:	40020800 	.word	0x40020800
 8002d14:	40020c00 	.word	0x40020c00
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40013c00 	.word	0x40013c00

08002d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d30:	787b      	ldrb	r3, [r7, #1]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d3c:	e003      	b.n	8002d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	041a      	lsls	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	619a      	str	r2, [r3, #24]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d64:	887a      	ldrh	r2, [r7, #2]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	041a      	lsls	r2, r3, #16
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	400b      	ands	r3, r1
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e12b      	b.n	8002ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe fe36 	bl	8001a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dec:	f001 f8da 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8002df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4a81      	ldr	r2, [pc, #516]	; (8002ffc <HAL_I2C_Init+0x274>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d807      	bhi.n	8002e0c <HAL_I2C_Init+0x84>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a80      	ldr	r2, [pc, #512]	; (8003000 <HAL_I2C_Init+0x278>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	bf94      	ite	ls
 8002e04:	2301      	movls	r3, #1
 8002e06:	2300      	movhi	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e006      	b.n	8002e1a <HAL_I2C_Init+0x92>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a7d      	ldr	r2, [pc, #500]	; (8003004 <HAL_I2C_Init+0x27c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	bf94      	ite	ls
 8002e14:	2301      	movls	r3, #1
 8002e16:	2300      	movhi	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e0e7      	b.n	8002ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a78      	ldr	r2, [pc, #480]	; (8003008 <HAL_I2C_Init+0x280>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	0c9b      	lsrs	r3, r3, #18
 8002e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a6a      	ldr	r2, [pc, #424]	; (8002ffc <HAL_I2C_Init+0x274>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d802      	bhi.n	8002e5c <HAL_I2C_Init+0xd4>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	e009      	b.n	8002e70 <HAL_I2C_Init+0xe8>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	4a69      	ldr	r2, [pc, #420]	; (800300c <HAL_I2C_Init+0x284>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	099b      	lsrs	r3, r3, #6
 8002e6e:	3301      	adds	r3, #1
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	430b      	orrs	r3, r1
 8002e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	495c      	ldr	r1, [pc, #368]	; (8002ffc <HAL_I2C_Init+0x274>)
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	d819      	bhi.n	8002ec4 <HAL_I2C_Init+0x13c>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1e59      	subs	r1, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9e:	1c59      	adds	r1, r3, #1
 8002ea0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_I2C_Init+0x138>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1e59      	subs	r1, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebe:	e051      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	e04f      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d111      	bne.n	8002ef0 <HAL_I2C_Init+0x168>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e58      	subs	r0, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	440b      	add	r3, r1
 8002eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e012      	b.n	8002f16 <HAL_I2C_Init+0x18e>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	0099      	lsls	r1, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Init+0x196>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e022      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10e      	bne.n	8002f44 <HAL_I2C_Init+0x1bc>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1e58      	subs	r0, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	440b      	add	r3, r1
 8002f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f42:	e00f      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	0099      	lsls	r1, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	6809      	ldr	r1, [r1, #0]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6911      	ldr	r1, [r2, #16]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	000186a0 	.word	0x000186a0
 8003000:	001e847f 	.word	0x001e847f
 8003004:	003d08ff 	.word	0x003d08ff
 8003008:	431bde83 	.word	0x431bde83
 800300c:	10624dd3 	.word	0x10624dd3

08003010 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	461a      	mov	r2, r3
 800301c:	460b      	mov	r3, r1
 800301e:	817b      	strh	r3, [r7, #10]
 8003020:	4613      	mov	r3, r2
 8003022:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7fe ff4a 	bl	8001ebc <HAL_GetTick>
 8003028:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b20      	cmp	r3, #32
 8003034:	f040 80e0 	bne.w	80031f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	2319      	movs	r3, #25
 800303e:	2201      	movs	r2, #1
 8003040:	4970      	ldr	r1, [pc, #448]	; (8003204 <HAL_I2C_Master_Transmit+0x1f4>)
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f964 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800304e:	2302      	movs	r3, #2
 8003050:	e0d3      	b.n	80031fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_I2C_Master_Transmit+0x50>
 800305c:	2302      	movs	r3, #2
 800305e:	e0cc      	b.n	80031fa <HAL_I2C_Master_Transmit+0x1ea>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d007      	beq.n	8003086 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003094:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2221      	movs	r2, #33	; 0x21
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2210      	movs	r2, #16
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	893a      	ldrh	r2, [r7, #8]
 80030b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a50      	ldr	r2, [pc, #320]	; (8003208 <HAL_I2C_Master_Transmit+0x1f8>)
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030c8:	8979      	ldrh	r1, [r7, #10]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f89c 	bl	800320c <I2C_MasterRequestWrite>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e08d      	b.n	80031fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030f4:	e066      	b.n	80031c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	6a39      	ldr	r1, [r7, #32]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fa22 	bl	8003544 <I2C_WaitOnTXEFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	2b04      	cmp	r3, #4
 800310c:	d107      	bne.n	800311e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06b      	b.n	80031fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	781a      	ldrb	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b04      	cmp	r3, #4
 800315e:	d11b      	bne.n	8003198 <HAL_I2C_Master_Transmit+0x188>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	2b00      	cmp	r3, #0
 8003166:	d017      	beq.n	8003198 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	781a      	ldrb	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	6a39      	ldr	r1, [r7, #32]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fa19 	bl	80035d4 <I2C_WaitOnBTFFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d107      	bne.n	80031c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e01a      	b.n	80031fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d194      	bne.n	80030f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e000      	b.n	80031fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031f8:	2302      	movs	r3, #2
  }
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	00100002 	.word	0x00100002
 8003208:	ffff0000 	.word	0xffff0000

0800320c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	460b      	mov	r3, r1
 800321a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d006      	beq.n	8003236 <I2C_MasterRequestWrite+0x2a>
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d003      	beq.n	8003236 <I2C_MasterRequestWrite+0x2a>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003234:	d108      	bne.n	8003248 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e00b      	b.n	8003260 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	2b12      	cmp	r3, #18
 800324e:	d107      	bne.n	8003260 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800325e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f84f 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00d      	beq.n	8003294 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003286:	d103      	bne.n	8003290 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e035      	b.n	8003300 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800329c:	d108      	bne.n	80032b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800329e:	897b      	ldrh	r3, [r7, #10]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032ac:	611a      	str	r2, [r3, #16]
 80032ae:	e01b      	b.n	80032e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032b0:	897b      	ldrh	r3, [r7, #10]
 80032b2:	11db      	asrs	r3, r3, #7
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f003 0306 	and.w	r3, r3, #6
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f063 030f 	orn	r3, r3, #15
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	490e      	ldr	r1, [pc, #56]	; (8003308 <I2C_MasterRequestWrite+0xfc>)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f898 	bl	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e010      	b.n	8003300 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032de:	897b      	ldrh	r3, [r7, #10]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4907      	ldr	r1, [pc, #28]	; (800330c <I2C_MasterRequestWrite+0x100>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f888 	bl	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	00010008 	.word	0x00010008
 800330c:	00010002 	.word	0x00010002

08003310 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003320:	e048      	b.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d044      	beq.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe fdc7 	bl	8001ebc <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnFlagUntilTimeout+0x30>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d139      	bne.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d10d      	bne.n	8003366 <I2C_WaitOnFlagUntilTimeout+0x56>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	43da      	mvns	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4013      	ands	r3, r2
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	e00c      	b.n	8003380 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	43da      	mvns	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4013      	ands	r3, r2
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	429a      	cmp	r2, r3
 8003384:	d116      	bne.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e023      	b.n	80033fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0c1b      	lsrs	r3, r3, #16
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10d      	bne.n	80033da <I2C_WaitOnFlagUntilTimeout+0xca>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	43da      	mvns	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	e00c      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d093      	beq.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003412:	e071      	b.n	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d123      	bne.n	800346c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003432:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800343c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f043 0204 	orr.w	r2, r3, #4
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e067      	b.n	800353c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d041      	beq.n	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003474:	f7fe fd22 	bl	8001ebc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d302      	bcc.n	800348a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d136      	bne.n	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10c      	bne.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf14      	ite	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	2300      	moveq	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	e00b      	b.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	43da      	mvns	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4013      	ands	r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e021      	b.n	800353c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	0c1b      	lsrs	r3, r3, #16
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d10c      	bne.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	43da      	mvns	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4013      	ands	r3, r2
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e00b      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4013      	ands	r3, r2
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	bf14      	ite	ne
 800352e:	2301      	movne	r3, #1
 8003530:	2300      	moveq	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	f47f af6d 	bne.w	8003414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003550:	e034      	b.n	80035bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f886 	bl	8003664 <I2C_IsAcknowledgeFailed>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e034      	b.n	80035cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d028      	beq.n	80035bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356a:	f7fe fca7 	bl	8001ebc <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d11d      	bne.n	80035bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b80      	cmp	r3, #128	; 0x80
 800358c:	d016      	beq.n	80035bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e007      	b.n	80035cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b80      	cmp	r3, #128	; 0x80
 80035c8:	d1c3      	bne.n	8003552 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035e0:	e034      	b.n	800364c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f83e 	bl	8003664 <I2C_IsAcknowledgeFailed>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e034      	b.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d028      	beq.n	800364c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fe fc5f 	bl	8001ebc <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11d      	bne.n	800364c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d016      	beq.n	800364c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e007      	b.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	d1c3      	bne.n	80035e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367a:	d11b      	bne.n	80036b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003684:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f043 0204 	orr.w	r2, r3, #4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e267      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d075      	beq.n	80037ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036e2:	4b88      	ldr	r3, [pc, #544]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d00c      	beq.n	8003708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ee:	4b85      	ldr	r3, [pc, #532]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d112      	bne.n	8003720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fa:	4b82      	ldr	r3, [pc, #520]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003706:	d10b      	bne.n	8003720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	4b7e      	ldr	r3, [pc, #504]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05b      	beq.n	80037cc <HAL_RCC_OscConfig+0x108>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d157      	bne.n	80037cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e242      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x74>
 800372a:	4b76      	ldr	r3, [pc, #472]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a75      	ldr	r2, [pc, #468]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e01d      	b.n	8003774 <HAL_RCC_OscConfig+0xb0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x98>
 8003742:	4b70      	ldr	r3, [pc, #448]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a6f      	ldr	r2, [pc, #444]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b6d      	ldr	r3, [pc, #436]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a6c      	ldr	r2, [pc, #432]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0xb0>
 800375c:	4b69      	ldr	r3, [pc, #420]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a68      	ldr	r2, [pc, #416]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b66      	ldr	r3, [pc, #408]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a65      	ldr	r2, [pc, #404]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800376e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fe fb9e 	bl	8001ebc <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003784:	f7fe fb9a 	bl	8001ebc <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e207      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b5b      	ldr	r3, [pc, #364]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0xc0>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fe fb8a 	bl	8001ebc <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fe fb86 	bl	8001ebc <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e1f3      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	4b51      	ldr	r3, [pc, #324]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0xe8>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d063      	beq.n	80038a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037da:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e6:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d11c      	bne.n	800382c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f2:	4b44      	ldr	r3, [pc, #272]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d116      	bne.n	800382c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	4b41      	ldr	r3, [pc, #260]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_RCC_OscConfig+0x152>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e1c7      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4937      	ldr	r1, [pc, #220]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	e03a      	b.n	80038a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003834:	4b34      	ldr	r3, [pc, #208]	; (8003908 <HAL_RCC_OscConfig+0x244>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fe fb3f 	bl	8001ebc <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003842:	f7fe fb3b 	bl	8001ebc <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1a8      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4925      	ldr	r1, [pc, #148]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
 8003874:	e015      	b.n	80038a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_RCC_OscConfig+0x244>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe fb1e 	bl	8001ebc <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003884:	f7fe fb1a 	bl	8001ebc <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e187      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d036      	beq.n	800391c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <HAL_RCC_OscConfig+0x248>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7fe fafe 	bl	8001ebc <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c4:	f7fe fafa 	bl	8001ebc <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e167      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d6:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80038d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x200>
 80038e2:	e01b      	b.n	800391c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <HAL_RCC_OscConfig+0x248>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ea:	f7fe fae7 	bl	8001ebc <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	e00e      	b.n	8003910 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f2:	f7fe fae3 	bl	8001ebc <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d907      	bls.n	8003910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e150      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
 8003904:	40023800 	.word	0x40023800
 8003908:	42470000 	.word	0x42470000
 800390c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003910:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ea      	bne.n	80038f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8097 	beq.w	8003a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392a:	2300      	movs	r3, #0
 800392c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392e:	4b81      	ldr	r3, [pc, #516]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	4b7d      	ldr	r3, [pc, #500]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	4a7c      	ldr	r2, [pc, #496]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	6413      	str	r3, [r2, #64]	; 0x40
 800394a:	4b7a      	ldr	r3, [pc, #488]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395a:	4b77      	ldr	r3, [pc, #476]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d118      	bne.n	8003998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003966:	4b74      	ldr	r3, [pc, #464]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a73      	ldr	r2, [pc, #460]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 800396c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003972:	f7fe faa3 	bl	8001ebc <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397a:	f7fe fa9f 	bl	8001ebc <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e10c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x2ea>
 80039a0:	4b64      	ldr	r3, [pc, #400]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	4a63      	ldr	r2, [pc, #396]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6713      	str	r3, [r2, #112]	; 0x70
 80039ac:	e01c      	b.n	80039e8 <HAL_RCC_OscConfig+0x324>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x30c>
 80039b6:	4b5f      	ldr	r3, [pc, #380]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a5e      	ldr	r2, [pc, #376]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039bc:	f043 0304 	orr.w	r3, r3, #4
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
 80039c2:	4b5c      	ldr	r3, [pc, #368]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a5b      	ldr	r2, [pc, #364]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
 80039ce:	e00b      	b.n	80039e8 <HAL_RCC_OscConfig+0x324>
 80039d0:	4b58      	ldr	r3, [pc, #352]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	4a57      	ldr	r2, [pc, #348]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6713      	str	r3, [r2, #112]	; 0x70
 80039dc:	4b55      	ldr	r3, [pc, #340]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	4a54      	ldr	r2, [pc, #336]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039e2:	f023 0304 	bic.w	r3, r3, #4
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d015      	beq.n	8003a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fe fa64 	bl	8001ebc <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f8:	f7fe fa60 	bl	8001ebc <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e0cb      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	4b49      	ldr	r3, [pc, #292]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0ee      	beq.n	80039f8 <HAL_RCC_OscConfig+0x334>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1c:	f7fe fa4e 	bl	8001ebc <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a24:	f7fe fa4a 	bl	8001ebc <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e0b5      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3a:	4b3e      	ldr	r3, [pc, #248]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1ee      	bne.n	8003a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a46:	7dfb      	ldrb	r3, [r7, #23]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4c:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	4a38      	ldr	r2, [pc, #224]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80a1 	beq.w	8003ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a62:	4b34      	ldr	r3, [pc, #208]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d05c      	beq.n	8003b28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d141      	bne.n	8003afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a76:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <HAL_RCC_OscConfig+0x478>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fa1e 	bl	8001ebc <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fe fa1a 	bl	8001ebc <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e087      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	4b27      	ldr	r3, [pc, #156]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	019b      	lsls	r3, r3, #6
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	3b01      	subs	r3, #1
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	061b      	lsls	r3, r3, #24
 8003ac6:	491b      	ldr	r1, [pc, #108]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_RCC_OscConfig+0x478>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fe f9f3 	bl	8001ebc <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ada:	f7fe f9ef 	bl	8001ebc <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e05c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aec:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x416>
 8003af8:	e054      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <HAL_RCC_OscConfig+0x478>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fe f9dc 	bl	8001ebc <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fe f9d8 	bl	8001ebc <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e045      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x444>
 8003b26:	e03d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e038      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40007000 	.word	0x40007000
 8003b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x4ec>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d028      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d121      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d11a      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d111      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800

08003bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0cc      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d90c      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b65      	ldr	r3, [pc, #404]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0b8      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d020      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c20:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c2c:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	494d      	ldr	r1, [pc, #308]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d044      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d119      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d003      	beq.n	8003c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c72:	4b3f      	ldr	r3, [pc, #252]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c82:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e067      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c92:	4b37      	ldr	r3, [pc, #220]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f023 0203 	bic.w	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4934      	ldr	r1, [pc, #208]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca4:	f7fe f90a 	bl	8001ebc <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cac:	f7fe f906 	bl	8001ebc <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e04f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 020c 	and.w	r2, r3, #12
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d1eb      	bne.n	8003cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd4:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d20c      	bcs.n	8003cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce2:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e032      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4916      	ldr	r1, [pc, #88]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	490e      	ldr	r1, [pc, #56]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d3a:	f000 f821 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	490a      	ldr	r1, [pc, #40]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	5ccb      	ldrb	r3, [r1, r3]
 8003d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe f86a 	bl	8001e34 <HAL_InitTick>

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40023c00 	.word	0x40023c00
 8003d70:	40023800 	.word	0x40023800
 8003d74:	08008914 	.word	0x08008914
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	20000004 	.word	0x20000004

08003d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d84:	b094      	sub	sp, #80	; 0x50
 8003d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d90:	2300      	movs	r3, #0
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d98:	4b79      	ldr	r3, [pc, #484]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d00d      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	f200 80e1 	bhi.w	8003f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0x3a>
 8003db2:	e0db      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db4:	4b73      	ldr	r3, [pc, #460]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003db8:	e0db      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dba:	4b73      	ldr	r3, [pc, #460]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dbe:	e0d8      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc0:	4b6f      	ldr	r3, [pc, #444]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dca:	4b6d      	ldr	r3, [pc, #436]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d063      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd6:	4b6a      	ldr	r3, [pc, #424]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	099b      	lsrs	r3, r3, #6
 8003ddc:	2200      	movs	r2, #0
 8003dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8003de0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dea:	2300      	movs	r3, #0
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
 8003dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	f04f 0000 	mov.w	r0, #0
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	0159      	lsls	r1, r3, #5
 8003e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e04:	0150      	lsls	r0, r2, #5
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	1a51      	subs	r1, r2, r1
 8003e0e:	6139      	str	r1, [r7, #16]
 8003e10:	4629      	mov	r1, r5
 8003e12:	eb63 0301 	sbc.w	r3, r3, r1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e24:	4659      	mov	r1, fp
 8003e26:	018b      	lsls	r3, r1, #6
 8003e28:	4651      	mov	r1, sl
 8003e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e2e:	4651      	mov	r1, sl
 8003e30:	018a      	lsls	r2, r1, #6
 8003e32:	4651      	mov	r1, sl
 8003e34:	ebb2 0801 	subs.w	r8, r2, r1
 8003e38:	4659      	mov	r1, fp
 8003e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e52:	4690      	mov	r8, r2
 8003e54:	4699      	mov	r9, r3
 8003e56:	4623      	mov	r3, r4
 8003e58:	eb18 0303 	adds.w	r3, r8, r3
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	462b      	mov	r3, r5
 8003e60:	eb49 0303 	adc.w	r3, r9, r3
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e72:	4629      	mov	r1, r5
 8003e74:	024b      	lsls	r3, r1, #9
 8003e76:	4621      	mov	r1, r4
 8003e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	024a      	lsls	r2, r1, #9
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e86:	2200      	movs	r2, #0
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e90:	f7fc fee2 	bl	8000c58 <__aeabi_uldivmod>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4613      	mov	r3, r2
 8003e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e9c:	e058      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9e:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eae:	623b      	str	r3, [r7, #32]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003eb8:	4642      	mov	r2, r8
 8003eba:	464b      	mov	r3, r9
 8003ebc:	f04f 0000 	mov.w	r0, #0
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	0159      	lsls	r1, r3, #5
 8003ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eca:	0150      	lsls	r0, r2, #5
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	00eb      	lsls	r3, r5, #3
 8003f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f06:	00e2      	lsls	r2, r4, #3
 8003f08:	4614      	mov	r4, r2
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	4643      	mov	r3, r8
 8003f0e:	18e3      	adds	r3, r4, r3
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	464b      	mov	r3, r9
 8003f14:	eb45 0303 	adc.w	r3, r5, r3
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f26:	4629      	mov	r1, r5
 8003f28:	028b      	lsls	r3, r1, #10
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f30:	4621      	mov	r1, r4
 8003f32:	028a      	lsls	r2, r1, #10
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	61fa      	str	r2, [r7, #28]
 8003f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f44:	f7fc fe88 	bl	8000c58 <__aeabi_uldivmod>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f6a:	e002      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3750      	adds	r7, #80	; 0x50
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	007a1200 	.word	0x007a1200

08003f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000000 	.word	0x20000000

08003fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fa8:	f7ff fff0 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	0a9b      	lsrs	r3, r3, #10
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	4903      	ldr	r1, [pc, #12]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	08008924 	.word	0x08008924

08003fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fd0:	f7ff ffdc 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	0b5b      	lsrs	r3, r3, #13
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4903      	ldr	r1, [pc, #12]	; (8003ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	08008924 	.word	0x08008924

08003ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e041      	b.n	800408a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd fd48 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f000 fb24 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e041      	b.n	8004128 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f839 	bl	8004130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f000 fad5 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_TIM_PWM_Start+0x24>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e022      	b.n	80041ae <HAL_TIM_PWM_Start+0x6a>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b04      	cmp	r3, #4
 800416c:	d109      	bne.n	8004182 <HAL_TIM_PWM_Start+0x3e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	e015      	b.n	80041ae <HAL_TIM_PWM_Start+0x6a>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d109      	bne.n	800419c <HAL_TIM_PWM_Start+0x58>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	bf14      	ite	ne
 8004194:	2301      	movne	r3, #1
 8004196:	2300      	moveq	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	e008      	b.n	80041ae <HAL_TIM_PWM_Start+0x6a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e068      	b.n	8004288 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_PWM_Start+0x82>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c4:	e013      	b.n	80041ee <HAL_TIM_PWM_Start+0xaa>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_PWM_Start+0x92>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d4:	e00b      	b.n	80041ee <HAL_TIM_PWM_Start+0xaa>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_PWM_Start+0xa2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e4:	e003      	b.n	80041ee <HAL_TIM_PWM_Start+0xaa>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2201      	movs	r2, #1
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fcf4 	bl	8004be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a23      	ldr	r2, [pc, #140]	; (8004290 <HAL_TIM_PWM_Start+0x14c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d107      	bne.n	8004216 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004214:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <HAL_TIM_PWM_Start+0x14c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d018      	beq.n	8004252 <HAL_TIM_PWM_Start+0x10e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004228:	d013      	beq.n	8004252 <HAL_TIM_PWM_Start+0x10e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a19      	ldr	r2, [pc, #100]	; (8004294 <HAL_TIM_PWM_Start+0x150>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00e      	beq.n	8004252 <HAL_TIM_PWM_Start+0x10e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a17      	ldr	r2, [pc, #92]	; (8004298 <HAL_TIM_PWM_Start+0x154>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d009      	beq.n	8004252 <HAL_TIM_PWM_Start+0x10e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a16      	ldr	r2, [pc, #88]	; (800429c <HAL_TIM_PWM_Start+0x158>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d004      	beq.n	8004252 <HAL_TIM_PWM_Start+0x10e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <HAL_TIM_PWM_Start+0x15c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d111      	bne.n	8004276 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b06      	cmp	r3, #6
 8004262:	d010      	beq.n	8004286 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004274:	e007      	b.n	8004286 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40010000 	.word	0x40010000
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40014000 	.word	0x40014000

080042a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	6839      	ldr	r1, [r7, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fc94 	bl	8004be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a29      	ldr	r2, [pc, #164]	; (8004368 <HAL_TIM_PWM_Stop+0xc4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d117      	bne.n	80042f6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10f      	bne.n	80042f6 <HAL_TIM_PWM_Stop+0x52>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	f240 4344 	movw	r3, #1092	; 0x444
 80042e0:	4013      	ands	r3, r2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <HAL_TIM_PWM_Stop+0x52>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10f      	bne.n	8004326 <HAL_TIM_PWM_Stop+0x82>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a1a      	ldr	r2, [r3, #32]
 800430c:	f240 4344 	movw	r3, #1092	; 0x444
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d107      	bne.n	8004326 <HAL_TIM_PWM_Stop+0x82>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0201 	bic.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <HAL_TIM_PWM_Stop+0x92>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004334:	e013      	b.n	800435e <HAL_TIM_PWM_Stop+0xba>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b04      	cmp	r3, #4
 800433a:	d104      	bne.n	8004346 <HAL_TIM_PWM_Stop+0xa2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004344:	e00b      	b.n	800435e <HAL_TIM_PWM_Stop+0xba>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d104      	bne.n	8004356 <HAL_TIM_PWM_Stop+0xb2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004354:	e003      	b.n	800435e <HAL_TIM_PWM_Stop+0xba>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40010000 	.word	0x40010000

0800436c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004386:	2302      	movs	r3, #2
 8004388:	e0ae      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b0c      	cmp	r3, #12
 8004396:	f200 809f 	bhi.w	80044d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800439a:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043d5 	.word	0x080043d5
 80043a4:	080044d9 	.word	0x080044d9
 80043a8:	080044d9 	.word	0x080044d9
 80043ac:	080044d9 	.word	0x080044d9
 80043b0:	08004415 	.word	0x08004415
 80043b4:	080044d9 	.word	0x080044d9
 80043b8:	080044d9 	.word	0x080044d9
 80043bc:	080044d9 	.word	0x080044d9
 80043c0:	08004457 	.word	0x08004457
 80043c4:	080044d9 	.word	0x080044d9
 80043c8:	080044d9 	.word	0x080044d9
 80043cc:	080044d9 	.word	0x080044d9
 80043d0:	08004497 	.word	0x08004497
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f9dc 	bl	8004798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0208 	orr.w	r2, r2, #8
 80043ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0204 	bic.w	r2, r2, #4
 80043fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6999      	ldr	r1, [r3, #24]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	619a      	str	r2, [r3, #24]
      break;
 8004412:	e064      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fa22 	bl	8004864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6999      	ldr	r1, [r3, #24]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	021a      	lsls	r2, r3, #8
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	619a      	str	r2, [r3, #24]
      break;
 8004454:	e043      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fa6d 	bl	800493c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0208 	orr.w	r2, r2, #8
 8004470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0204 	bic.w	r2, r2, #4
 8004480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69d9      	ldr	r1, [r3, #28]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	61da      	str	r2, [r3, #28]
      break;
 8004494:	e023      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fab7 	bl	8004a10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69d9      	ldr	r1, [r3, #28]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	021a      	lsls	r2, r3, #8
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	61da      	str	r2, [r3, #28]
      break;
 80044d6:	e002      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
      break;
 80044dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_TIM_ConfigClockSource+0x1c>
 8004508:	2302      	movs	r3, #2
 800450a:	e0b4      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x186>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800452a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004544:	d03e      	beq.n	80045c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454a:	f200 8087 	bhi.w	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800454e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004552:	f000 8086 	beq.w	8004662 <HAL_TIM_ConfigClockSource+0x172>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455a:	d87f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b70      	cmp	r3, #112	; 0x70
 800455e:	d01a      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0xa6>
 8004560:	2b70      	cmp	r3, #112	; 0x70
 8004562:	d87b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004564:	2b60      	cmp	r3, #96	; 0x60
 8004566:	d050      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x11a>
 8004568:	2b60      	cmp	r3, #96	; 0x60
 800456a:	d877      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b50      	cmp	r3, #80	; 0x50
 800456e:	d03c      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0xfa>
 8004570:	2b50      	cmp	r3, #80	; 0x50
 8004572:	d873      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d058      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x13a>
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d86f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b30      	cmp	r3, #48	; 0x30
 800457e:	d064      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004580:	2b30      	cmp	r3, #48	; 0x30
 8004582:	d86b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d060      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004588:	2b20      	cmp	r3, #32
 800458a:	d867      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05c      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004590:	2b10      	cmp	r3, #16
 8004592:	d05a      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004594:	e062      	b.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	f000 fafd 	bl	8004ba4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	609a      	str	r2, [r3, #8]
      break;
 80045c2:	e04f      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	f000 fae6 	bl	8004ba4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e6:	609a      	str	r2, [r3, #8]
      break;
 80045e8:	e03c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 fa5a 	bl	8004ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2150      	movs	r1, #80	; 0x50
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fab3 	bl	8004b6e <TIM_ITRx_SetConfig>
      break;
 8004608:	e02c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004616:	461a      	mov	r2, r3
 8004618:	f000 fa79 	bl	8004b0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2160      	movs	r1, #96	; 0x60
 8004622:	4618      	mov	r0, r3
 8004624:	f000 faa3 	bl	8004b6e <TIM_ITRx_SetConfig>
      break;
 8004628:	e01c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	461a      	mov	r2, r3
 8004638:	f000 fa3a 	bl	8004ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2140      	movs	r1, #64	; 0x40
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fa93 	bl	8004b6e <TIM_ITRx_SetConfig>
      break;
 8004648:	e00c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f000 fa8a 	bl	8004b6e <TIM_ITRx_SetConfig>
      break;
 800465a:	e003      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e000      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a3a      	ldr	r2, [pc, #232]	; (800477c <TIM_Base_SetConfig+0xfc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00f      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d00b      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a37      	ldr	r2, [pc, #220]	; (8004780 <TIM_Base_SetConfig+0x100>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a36      	ldr	r2, [pc, #216]	; (8004784 <TIM_Base_SetConfig+0x104>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a35      	ldr	r2, [pc, #212]	; (8004788 <TIM_Base_SetConfig+0x108>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2b      	ldr	r2, [pc, #172]	; (800477c <TIM_Base_SetConfig+0xfc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d01b      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d017      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a28      	ldr	r2, [pc, #160]	; (8004780 <TIM_Base_SetConfig+0x100>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a27      	ldr	r2, [pc, #156]	; (8004784 <TIM_Base_SetConfig+0x104>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00f      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a26      	ldr	r2, [pc, #152]	; (8004788 <TIM_Base_SetConfig+0x108>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00b      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a25      	ldr	r2, [pc, #148]	; (800478c <TIM_Base_SetConfig+0x10c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d007      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a24      	ldr	r2, [pc, #144]	; (8004790 <TIM_Base_SetConfig+0x110>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d003      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a23      	ldr	r2, [pc, #140]	; (8004794 <TIM_Base_SetConfig+0x114>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d108      	bne.n	800471c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a0e      	ldr	r2, [pc, #56]	; (800477c <TIM_Base_SetConfig+0xfc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d103      	bne.n	8004750 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f023 0201 	bic.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	611a      	str	r2, [r3, #16]
  }
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40014000 	.word	0x40014000
 8004790:	40014400 	.word	0x40014400
 8004794:	40014800 	.word	0x40014800

08004798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f023 0201 	bic.w	r2, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0303 	bic.w	r3, r3, #3
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 0302 	bic.w	r3, r3, #2
 80047e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a1c      	ldr	r2, [pc, #112]	; (8004860 <TIM_OC1_SetConfig+0xc8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d10c      	bne.n	800480e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f023 0308 	bic.w	r3, r3, #8
 80047fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f023 0304 	bic.w	r3, r3, #4
 800480c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a13      	ldr	r2, [pc, #76]	; (8004860 <TIM_OC1_SetConfig+0xc8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d111      	bne.n	800483a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800481c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	621a      	str	r2, [r3, #32]
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	40010000 	.word	0x40010000

08004864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f023 0210 	bic.w	r2, r3, #16
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f023 0320 	bic.w	r3, r3, #32
 80048ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a1e      	ldr	r2, [pc, #120]	; (8004938 <TIM_OC2_SetConfig+0xd4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d10d      	bne.n	80048e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a15      	ldr	r2, [pc, #84]	; (8004938 <TIM_OC2_SetConfig+0xd4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d113      	bne.n	8004910 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40010000 	.word	0x40010000

0800493c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <TIM_OC3_SetConfig+0xd0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d10d      	bne.n	80049b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <TIM_OC3_SetConfig+0xd0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d113      	bne.n	80049e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40010000 	.word	0x40010000

08004a10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	031b      	lsls	r3, r3, #12
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a10      	ldr	r2, [pc, #64]	; (8004aac <TIM_OC4_SetConfig+0x9c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d109      	bne.n	8004a84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	019b      	lsls	r3, r3, #6
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	621a      	str	r2, [r3, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010000 	.word	0x40010000

08004ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 0201 	bic.w	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f023 030a 	bic.w	r3, r3, #10
 8004aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b087      	sub	sp, #28
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f023 0210 	bic.w	r2, r3, #16
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	031b      	lsls	r3, r3, #12
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	621a      	str	r2, [r3, #32]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f043 0307 	orr.w	r3, r3, #7
 8004b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	609a      	str	r2, [r3, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	021a      	lsls	r2, r3, #8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	609a      	str	r2, [r3, #8]
}
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1a      	ldr	r2, [r3, #32]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	43db      	mvns	r3, r3
 8004c06:	401a      	ands	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a1a      	ldr	r2, [r3, #32]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e050      	b.n	8004cea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c94:	d013      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a15      	ldr	r2, [pc, #84]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800
 8004d04:	40000c00 	.word	0x40000c00
 8004d08:	40014000 	.word	0x40014000

08004d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e042      	b.n	8004da4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fc fede 	bl	8001af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2224      	movs	r2, #36	; 0x24
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f973 	bl	800503c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	; 0x28
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d175      	bne.n	8004eb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_UART_Transmit+0x2c>
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e06e      	b.n	8004eba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2221      	movs	r2, #33	; 0x21
 8004de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dea:	f7fd f867 	bl	8001ebc <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	88fa      	ldrh	r2, [r7, #6]
 8004dfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e04:	d108      	bne.n	8004e18 <HAL_UART_Transmit+0x6c>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	e003      	b.n	8004e20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e20:	e02e      	b.n	8004e80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f848 	bl	8004ec2 <UART_WaitOnFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e03a      	b.n	8004eba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	e007      	b.n	8004e72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	781a      	ldrb	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1cb      	bne.n	8004e22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2200      	movs	r2, #0
 8004e92:	2140      	movs	r1, #64	; 0x40
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f814 	bl	8004ec2 <UART_WaitOnFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e006      	b.n	8004eba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed2:	e03b      	b.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d037      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004edc:	f7fc ffee 	bl	8001ebc <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d302      	bcc.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e03a      	b.n	8004f6c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d023      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b80      	cmp	r3, #128	; 0x80
 8004f08:	d020      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d01d      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d116      	bne.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f81d 	bl	8004f74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e00f      	b.n	8004f6c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d0b4      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b095      	sub	sp, #84	; 0x54
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f9c:	643a      	str	r2, [r7, #64]	; 0x40
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3314      	adds	r3, #20
 8004fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3314      	adds	r3, #20
 8004fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d119      	bne.n	8005020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f023 0310 	bic.w	r3, r3, #16
 8005002:	647b      	str	r3, [r7, #68]	; 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800500c:	61ba      	str	r2, [r7, #24]
 800500e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6979      	ldr	r1, [r7, #20]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	613b      	str	r3, [r7, #16]
   return(result);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e5      	bne.n	8004fec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800502e:	bf00      	nop
 8005030:	3754      	adds	r7, #84	; 0x54
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800503c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005040:	b0c0      	sub	sp, #256	; 0x100
 8005042:	af00      	add	r7, sp, #0
 8005044:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005058:	68d9      	ldr	r1, [r3, #12]
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	ea40 0301 	orr.w	r3, r0, r1
 8005064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	431a      	orrs	r2, r3
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	431a      	orrs	r2, r3
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005094:	f021 010c 	bic.w	r1, r1, #12
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050a2:	430b      	orrs	r3, r1
 80050a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	6999      	ldr	r1, [r3, #24]
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	ea40 0301 	orr.w	r3, r0, r1
 80050c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b8f      	ldr	r3, [pc, #572]	; (8005308 <UART_SetConfig+0x2cc>)
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d005      	beq.n	80050dc <UART_SetConfig+0xa0>
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b8d      	ldr	r3, [pc, #564]	; (800530c <UART_SetConfig+0x2d0>)
 80050d8:	429a      	cmp	r2, r3
 80050da:	d104      	bne.n	80050e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050dc:	f7fe ff76 	bl	8003fcc <HAL_RCC_GetPCLK2Freq>
 80050e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050e4:	e003      	b.n	80050ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050e6:	f7fe ff5d 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 80050ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f8:	f040 810c 	bne.w	8005314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005100:	2200      	movs	r2, #0
 8005102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005106:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800510a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800510e:	4622      	mov	r2, r4
 8005110:	462b      	mov	r3, r5
 8005112:	1891      	adds	r1, r2, r2
 8005114:	65b9      	str	r1, [r7, #88]	; 0x58
 8005116:	415b      	adcs	r3, r3
 8005118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800511a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800511e:	4621      	mov	r1, r4
 8005120:	eb12 0801 	adds.w	r8, r2, r1
 8005124:	4629      	mov	r1, r5
 8005126:	eb43 0901 	adc.w	r9, r3, r1
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800513a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800513e:	4690      	mov	r8, r2
 8005140:	4699      	mov	r9, r3
 8005142:	4623      	mov	r3, r4
 8005144:	eb18 0303 	adds.w	r3, r8, r3
 8005148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800514c:	462b      	mov	r3, r5
 800514e:	eb49 0303 	adc.w	r3, r9, r3
 8005152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005162:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800516a:	460b      	mov	r3, r1
 800516c:	18db      	adds	r3, r3, r3
 800516e:	653b      	str	r3, [r7, #80]	; 0x50
 8005170:	4613      	mov	r3, r2
 8005172:	eb42 0303 	adc.w	r3, r2, r3
 8005176:	657b      	str	r3, [r7, #84]	; 0x54
 8005178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800517c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005180:	f7fb fd6a 	bl	8000c58 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4b61      	ldr	r3, [pc, #388]	; (8005310 <UART_SetConfig+0x2d4>)
 800518a:	fba3 2302 	umull	r2, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	011c      	lsls	r4, r3, #4
 8005192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005196:	2200      	movs	r2, #0
 8005198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800519c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051a4:	4642      	mov	r2, r8
 80051a6:	464b      	mov	r3, r9
 80051a8:	1891      	adds	r1, r2, r2
 80051aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80051ac:	415b      	adcs	r3, r3
 80051ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051b4:	4641      	mov	r1, r8
 80051b6:	eb12 0a01 	adds.w	sl, r2, r1
 80051ba:	4649      	mov	r1, r9
 80051bc:	eb43 0b01 	adc.w	fp, r3, r1
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051d4:	4692      	mov	sl, r2
 80051d6:	469b      	mov	fp, r3
 80051d8:	4643      	mov	r3, r8
 80051da:	eb1a 0303 	adds.w	r3, sl, r3
 80051de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051e2:	464b      	mov	r3, r9
 80051e4:	eb4b 0303 	adc.w	r3, fp, r3
 80051e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005200:	460b      	mov	r3, r1
 8005202:	18db      	adds	r3, r3, r3
 8005204:	643b      	str	r3, [r7, #64]	; 0x40
 8005206:	4613      	mov	r3, r2
 8005208:	eb42 0303 	adc.w	r3, r2, r3
 800520c:	647b      	str	r3, [r7, #68]	; 0x44
 800520e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005216:	f7fb fd1f 	bl	8000c58 <__aeabi_uldivmod>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4611      	mov	r1, r2
 8005220:	4b3b      	ldr	r3, [pc, #236]	; (8005310 <UART_SetConfig+0x2d4>)
 8005222:	fba3 2301 	umull	r2, r3, r3, r1
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	2264      	movs	r2, #100	; 0x64
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	1acb      	subs	r3, r1, r3
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005236:	4b36      	ldr	r3, [pc, #216]	; (8005310 <UART_SetConfig+0x2d4>)
 8005238:	fba3 2302 	umull	r2, r3, r3, r2
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005244:	441c      	add	r4, r3
 8005246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524a:	2200      	movs	r2, #0
 800524c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005250:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005258:	4642      	mov	r2, r8
 800525a:	464b      	mov	r3, r9
 800525c:	1891      	adds	r1, r2, r2
 800525e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005260:	415b      	adcs	r3, r3
 8005262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005268:	4641      	mov	r1, r8
 800526a:	1851      	adds	r1, r2, r1
 800526c:	6339      	str	r1, [r7, #48]	; 0x30
 800526e:	4649      	mov	r1, r9
 8005270:	414b      	adcs	r3, r1
 8005272:	637b      	str	r3, [r7, #52]	; 0x34
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005280:	4659      	mov	r1, fp
 8005282:	00cb      	lsls	r3, r1, #3
 8005284:	4651      	mov	r1, sl
 8005286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800528a:	4651      	mov	r1, sl
 800528c:	00ca      	lsls	r2, r1, #3
 800528e:	4610      	mov	r0, r2
 8005290:	4619      	mov	r1, r3
 8005292:	4603      	mov	r3, r0
 8005294:	4642      	mov	r2, r8
 8005296:	189b      	adds	r3, r3, r2
 8005298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800529c:	464b      	mov	r3, r9
 800529e:	460a      	mov	r2, r1
 80052a0:	eb42 0303 	adc.w	r3, r2, r3
 80052a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052bc:	460b      	mov	r3, r1
 80052be:	18db      	adds	r3, r3, r3
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c2:	4613      	mov	r3, r2
 80052c4:	eb42 0303 	adc.w	r3, r2, r3
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052d2:	f7fb fcc1 	bl	8000c58 <__aeabi_uldivmod>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <UART_SetConfig+0x2d4>)
 80052dc:	fba3 1302 	umull	r1, r3, r3, r2
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	2164      	movs	r1, #100	; 0x64
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	3332      	adds	r3, #50	; 0x32
 80052ee:	4a08      	ldr	r2, [pc, #32]	; (8005310 <UART_SetConfig+0x2d4>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	f003 0207 	and.w	r2, r3, #7
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4422      	add	r2, r4
 8005302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005304:	e106      	b.n	8005514 <UART_SetConfig+0x4d8>
 8005306:	bf00      	nop
 8005308:	40011000 	.word	0x40011000
 800530c:	40011400 	.word	0x40011400
 8005310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005318:	2200      	movs	r2, #0
 800531a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800531e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005326:	4642      	mov	r2, r8
 8005328:	464b      	mov	r3, r9
 800532a:	1891      	adds	r1, r2, r2
 800532c:	6239      	str	r1, [r7, #32]
 800532e:	415b      	adcs	r3, r3
 8005330:	627b      	str	r3, [r7, #36]	; 0x24
 8005332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005336:	4641      	mov	r1, r8
 8005338:	1854      	adds	r4, r2, r1
 800533a:	4649      	mov	r1, r9
 800533c:	eb43 0501 	adc.w	r5, r3, r1
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	00eb      	lsls	r3, r5, #3
 800534a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800534e:	00e2      	lsls	r2, r4, #3
 8005350:	4614      	mov	r4, r2
 8005352:	461d      	mov	r5, r3
 8005354:	4643      	mov	r3, r8
 8005356:	18e3      	adds	r3, r4, r3
 8005358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800535c:	464b      	mov	r3, r9
 800535e:	eb45 0303 	adc.w	r3, r5, r3
 8005362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005372:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005382:	4629      	mov	r1, r5
 8005384:	008b      	lsls	r3, r1, #2
 8005386:	4621      	mov	r1, r4
 8005388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800538c:	4621      	mov	r1, r4
 800538e:	008a      	lsls	r2, r1, #2
 8005390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005394:	f7fb fc60 	bl	8000c58 <__aeabi_uldivmod>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4b60      	ldr	r3, [pc, #384]	; (8005520 <UART_SetConfig+0x4e4>)
 800539e:	fba3 2302 	umull	r2, r3, r3, r2
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	011c      	lsls	r4, r3, #4
 80053a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053b8:	4642      	mov	r2, r8
 80053ba:	464b      	mov	r3, r9
 80053bc:	1891      	adds	r1, r2, r2
 80053be:	61b9      	str	r1, [r7, #24]
 80053c0:	415b      	adcs	r3, r3
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c8:	4641      	mov	r1, r8
 80053ca:	1851      	adds	r1, r2, r1
 80053cc:	6139      	str	r1, [r7, #16]
 80053ce:	4649      	mov	r1, r9
 80053d0:	414b      	adcs	r3, r1
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053e0:	4659      	mov	r1, fp
 80053e2:	00cb      	lsls	r3, r1, #3
 80053e4:	4651      	mov	r1, sl
 80053e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ea:	4651      	mov	r1, sl
 80053ec:	00ca      	lsls	r2, r1, #3
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	4603      	mov	r3, r0
 80053f4:	4642      	mov	r2, r8
 80053f6:	189b      	adds	r3, r3, r2
 80053f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053fc:	464b      	mov	r3, r9
 80053fe:	460a      	mov	r2, r1
 8005400:	eb42 0303 	adc.w	r3, r2, r3
 8005404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	67bb      	str	r3, [r7, #120]	; 0x78
 8005412:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005420:	4649      	mov	r1, r9
 8005422:	008b      	lsls	r3, r1, #2
 8005424:	4641      	mov	r1, r8
 8005426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800542a:	4641      	mov	r1, r8
 800542c:	008a      	lsls	r2, r1, #2
 800542e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005432:	f7fb fc11 	bl	8000c58 <__aeabi_uldivmod>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4611      	mov	r1, r2
 800543c:	4b38      	ldr	r3, [pc, #224]	; (8005520 <UART_SetConfig+0x4e4>)
 800543e:	fba3 2301 	umull	r2, r3, r3, r1
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	2264      	movs	r2, #100	; 0x64
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	1acb      	subs	r3, r1, r3
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	3332      	adds	r3, #50	; 0x32
 8005450:	4a33      	ldr	r2, [pc, #204]	; (8005520 <UART_SetConfig+0x4e4>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800545c:	441c      	add	r4, r3
 800545e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005462:	2200      	movs	r2, #0
 8005464:	673b      	str	r3, [r7, #112]	; 0x70
 8005466:	677a      	str	r2, [r7, #116]	; 0x74
 8005468:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800546c:	4642      	mov	r2, r8
 800546e:	464b      	mov	r3, r9
 8005470:	1891      	adds	r1, r2, r2
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	415b      	adcs	r3, r3
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800547c:	4641      	mov	r1, r8
 800547e:	1851      	adds	r1, r2, r1
 8005480:	6039      	str	r1, [r7, #0]
 8005482:	4649      	mov	r1, r9
 8005484:	414b      	adcs	r3, r1
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005494:	4659      	mov	r1, fp
 8005496:	00cb      	lsls	r3, r1, #3
 8005498:	4651      	mov	r1, sl
 800549a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800549e:	4651      	mov	r1, sl
 80054a0:	00ca      	lsls	r2, r1, #3
 80054a2:	4610      	mov	r0, r2
 80054a4:	4619      	mov	r1, r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	4642      	mov	r2, r8
 80054aa:	189b      	adds	r3, r3, r2
 80054ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80054ae:	464b      	mov	r3, r9
 80054b0:	460a      	mov	r2, r1
 80054b2:	eb42 0303 	adc.w	r3, r2, r3
 80054b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	663b      	str	r3, [r7, #96]	; 0x60
 80054c2:	667a      	str	r2, [r7, #100]	; 0x64
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054d0:	4649      	mov	r1, r9
 80054d2:	008b      	lsls	r3, r1, #2
 80054d4:	4641      	mov	r1, r8
 80054d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054da:	4641      	mov	r1, r8
 80054dc:	008a      	lsls	r2, r1, #2
 80054de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054e2:	f7fb fbb9 	bl	8000c58 <__aeabi_uldivmod>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <UART_SetConfig+0x4e4>)
 80054ec:	fba3 1302 	umull	r1, r3, r3, r2
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	2164      	movs	r1, #100	; 0x64
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	3332      	adds	r3, #50	; 0x32
 80054fe:	4a08      	ldr	r2, [pc, #32]	; (8005520 <UART_SetConfig+0x4e4>)
 8005500:	fba2 2303 	umull	r2, r3, r2, r3
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	f003 020f 	and.w	r2, r3, #15
 800550a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4422      	add	r2, r4
 8005512:	609a      	str	r2, [r3, #8]
}
 8005514:	bf00      	nop
 8005516:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800551a:	46bd      	mov	sp, r7
 800551c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005520:	51eb851f 	.word	0x51eb851f

08005524 <arm_correlate_f32>:
  const float32_t * pSrcA,
        uint32_t srcALen,
  const float32_t * pSrcB,
        uint32_t srcBLen,
        float32_t * pDst)
{
 8005524:	b480      	push	{r7}
 8005526:	b095      	sub	sp, #84	; 0x54
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_AUTOVECTORIZE)
  
  const float32_t *pIn1;                               /* InputA pointer */
  const float32_t *pIn2;                               /* InputB pointer */
        float32_t *pOut = pDst;                        /* Output pointer */
 8005532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005534:	647b      	str	r3, [r7, #68]	; 0x44
  const float32_t *pSrc1;
        float32_t sum;
        uint32_t blockSize1, blockSize2, blockSize3;   /* Loop counters */
        uint32_t j, k, count, blkCnt;                  /* Loop counters */
        uint32_t outBlockSize;                         /* Loop counter */
        int32_t inc = 1;                               /* Destination address modifier */
 8005536:	2301      	movs	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
   * we assume zeroes in the output instead of zero padding either of the the inputs*/
  /* If srcALen > srcBLen,
   * (srcALen - srcBLen) zeroes has to included in the starting of the output buffer */
  /* If srcALen < srcBLen,
   * (srcALen - srcBLen) zeroes has to included in the ending of the output buffer */
  if (srcALen >= srcBLen)
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d314      	bcc.n	800556c <arm_correlate_f32+0x48>
  {
    /* Initialization of inputA pointer */
    pIn1 = pSrcA;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Initialization of inputB pointer */
    pIn2 = pSrcB;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Number of output samples is calculated */
    outBlockSize = (2U * srcALen) - 1U;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	3b01      	subs	r3, #1
 8005550:	617b      	str	r3, [r7, #20]

    /* When srcALen > srcBLen, zero padding has to be done to srcB
     * to make their lengths equal.
     * Instead, (outBlockSize - (srcALen + srcBLen - 1))
     * number of output samples are made zero */
    j = outBlockSize - (srcALen + (srcBLen - 1U));
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4413      	add	r3, r2
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	3301      	adds	r3, #1
 800555e:	61bb      	str	r3, [r7, #24]

    /* Updating the pointer position to non zero value */
    pOut += j;
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005566:	4413      	add	r3, r2
 8005568:	647b      	str	r3, [r7, #68]	; 0x44
 800556a:	e016      	b.n	800559a <arm_correlate_f32+0x76>
  }
  else
  {
    /* Initialization of inputA pointer */
    pIn1 = pSrcB;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Initialization of inputB pointer */
    pIn2 = pSrcA;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	64bb      	str	r3, [r7, #72]	; 0x48

    /* srcBLen is always considered as shorter or equal to srcALen */
    j = srcBLen;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	61bb      	str	r3, [r7, #24]
    srcBLen = srcALen;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
    srcALen = j;
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	60bb      	str	r3, [r7, #8]

    /* CORR(x, y) = Reverse order(CORR(y, x)) */
    /* Hence set the destination pointer to point to the last output sample */
    pOut = pDst + ((srcALen + srcBLen) - 2U);
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	4413      	add	r3, r2
 8005586:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800558a:	3b02      	subs	r3, #2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005590:	4413      	add	r3, r2
 8005592:	647b      	str	r3, [r7, #68]	; 0x44

    /* Destination address modifier is set to -1 */
    inc = -1;
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
 8005598:	61fb      	str	r3, [r7, #28]
   * In the third stage of the algorithm, the multiplications decrease by one
   * for every iteration. */

  /* The algorithm is implemented in three stages.
     The loop counters of each stage is initiated here. */
  blockSize1 = srcBLen - 1U;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	3b01      	subs	r3, #1
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
  blockSize2 = srcALen - (srcBLen - 1U);
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	3301      	adds	r3, #1
 80055a8:	613b      	str	r3, [r7, #16]
  blockSize3 = blockSize1;
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   * sum = x[0] * y[0] + x[1] * y[1] +...+ x[srcBLen - 1] * y[srcBLen - 1]
   */

  /* In this stage the MAC operations are increased by 1 for every iteration.
     The count variable holds the number of MAC operations performed */
  count = 1U;
 80055ae:	2301      	movs	r3, #1
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Working pointer of inputA */
  px = pIn1;
 80055b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b4:	643b      	str	r3, [r7, #64]	; 0x40

  /* Working pointer of inputB */
  pSrc1 = pIn2 + (srcBLen - 1U);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055bc:	3b01      	subs	r3, #1
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055c2:	4413      	add	r3, r2
 80055c4:	63bb      	str	r3, [r7, #56]	; 0x38
  py = pSrc1;
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* ------------------------
   * Stage1 process
   * ----------------------*/

  /* The first stage starts here */
  while (blockSize1 > 0U)
 80055ca:	e033      	b.n	8005634 <arm_correlate_f32+0x110>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0.0f;
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	637b      	str	r3, [r7, #52]	; 0x34

#endif /* #if defined(ARM_MATH_NEON) */
#else

    /* Initialize k with number of samples */
    k = count;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28

#endif /* #if defined (ARM_MATH_LOOPUNROLL) || defined(ARM_MATH_NEON) */

    while (k > 0U)
 80055d6:	e014      	b.n	8005602 <arm_correlate_f32+0xde>
    {
      /* Perform the multiply-accumulate */
      /* x[0] * y[srcBLen - 1] */
      sum += *px++ * *py++;
 80055d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055da:	1d1a      	adds	r2, r3, #4
 80055dc:	643a      	str	r2, [r7, #64]	; 0x40
 80055de:	ed93 7a00 	vldr	s14, [r3]
 80055e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e4:	1d1a      	adds	r2, r3, #4
 80055e6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055e8:	edd3 7a00 	vldr	s15, [r3]
 80055ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80055f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055f8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

      /* Decrement loop counter */
      k--;
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	3b01      	subs	r3, #1
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
    while (k > 0U)
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e7      	bne.n	80055d8 <arm_correlate_f32+0xb4>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut = sum;
 8005608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800560c:	601a      	str	r2, [r3, #0]
    /* Destination pointer is updated according to the address modifier, inc */
    pOut += inc;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005614:	4413      	add	r3, r2
 8005616:	647b      	str	r3, [r7, #68]	; 0x44

    /* Update the inputA and inputB pointers for next MAC calculation */
    py = pSrc1 - count;
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	425b      	negs	r3, r3
 800561e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005620:	4413      	add	r3, r2
 8005622:	63fb      	str	r3, [r7, #60]	; 0x3c
    px = pIn1;
 8005624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005626:	643b      	str	r3, [r7, #64]	; 0x40

    /* Increment MAC count */
    count++;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	3301      	adds	r3, #1
 800562c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Decrement loop counter */
    blockSize1--;
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	3b01      	subs	r3, #1
 8005632:	633b      	str	r3, [r7, #48]	; 0x30
  while (blockSize1 > 0U)
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1c8      	bne.n	80055cc <arm_correlate_f32+0xa8>
   * ....
   * sum = x[srcALen-srcBLen-2] * y[0] + x[srcALen-srcBLen-1] * y[1] +...+ x[srcALen-1] * y[srcBLen-1]
   */

  /* Working pointer of inputA */
  px = pIn1;
 800563a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563c:	643b      	str	r3, [r7, #64]	; 0x40

  /* Working pointer of inputB */
  py = pIn2;
 800563e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* count is index by which the pointer pIn1 to be incremented */
  count = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
   * ------------------*/

  /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
   * So, to loop unroll over blockSize2,
   * srcBLen should be greater than or equal to 4 */
  if (srcBLen >= 4U)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b03      	cmp	r3, #3
 800564a:	d939      	bls.n	80056c0 <arm_correlate_f32+0x19c>
    blkCnt = blockSize2 % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = blockSize2;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	623b      	str	r3, [r7, #32]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) || defined(ARM_MATH_NEON) */

    while (blkCnt > 0U)
 8005650:	e032      	b.n	80056b8 <arm_correlate_f32+0x194>
    {
      /* Accumulator is made zero for every iteration */
      sum = 0.0f;
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
       ** No loop unrolling is used. */
      k = srcBLen % 0x4U;
#else

      /* Initialize blkCnt with number of samples */
      k = srcBLen;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	62bb      	str	r3, [r7, #40]	; 0x28

#endif /* #if defined (ARM_MATH_LOOPUNROLL) || defined(ARM_MATH_NEON) */

      while (k > 0U)
 800565c:	e014      	b.n	8005688 <arm_correlate_f32+0x164>
      {
        /* Perform the multiply-accumulate */
        sum += *px++ * *py++;
 800565e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005660:	1d1a      	adds	r2, r3, #4
 8005662:	643a      	str	r2, [r7, #64]	; 0x40
 8005664:	ed93 7a00 	vldr	s14, [r3]
 8005668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566a:	1d1a      	adds	r2, r3, #4
 800566c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800566e:	edd3 7a00 	vldr	s15, [r3]
 8005672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005676:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800567a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800567e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        /* Decrement the loop counter */
        k--;
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	3b01      	subs	r3, #1
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
      while (k > 0U)
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e7      	bne.n	800565e <arm_correlate_f32+0x13a>
      }

      /* Store the result in the accumulator in the destination buffer. */
      *pOut = sum;
 800568e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005692:	601a      	str	r2, [r3, #0]

      /* Destination pointer is updated according to the address modifier, inc */
      pOut += inc;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800569a:	4413      	add	r3, r2
 800569c:	647b      	str	r3, [r7, #68]	; 0x44

      /* Increment the pointer pIn1 index, count by 1 */
      count++;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	3301      	adds	r3, #1
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056aa:	4413      	add	r3, r2
 80056ac:	643b      	str	r3, [r7, #64]	; 0x40
      py = pIn2;
 80056ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement the loop counter */
      blkCnt--;
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	623b      	str	r3, [r7, #32]
    while (blkCnt > 0U)
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1c9      	bne.n	8005652 <arm_correlate_f32+0x12e>
 80056be:	e038      	b.n	8005732 <arm_correlate_f32+0x20e>
  }
  else
  {
    /* If the srcBLen is not a multiple of 4,
     * the blockSize2 loop cannot be unrolled by 4 */
    blkCnt = blockSize2;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	623b      	str	r3, [r7, #32]

    while (blkCnt > 0U)
 80056c4:	e032      	b.n	800572c <arm_correlate_f32+0x208>
    {
      /* Accumulator is made zero for every iteration */
      sum = 0.0f;
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	637b      	str	r3, [r7, #52]	; 0x34

      /* Loop over srcBLen */
      k = srcBLen;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28

      while (k > 0U)
 80056d0:	e014      	b.n	80056fc <arm_correlate_f32+0x1d8>
      {
        /* Perform the multiply-accumulate */
        sum += *px++ * *py++;
 80056d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d4:	1d1a      	adds	r2, r3, #4
 80056d6:	643a      	str	r2, [r7, #64]	; 0x40
 80056d8:	ed93 7a00 	vldr	s14, [r3]
 80056dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056e2:	edd3 7a00 	vldr	s15, [r3]
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80056ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056f2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        /* Decrement the loop counter */
        k--;
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	3b01      	subs	r3, #1
 80056fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (k > 0U)
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e7      	bne.n	80056d2 <arm_correlate_f32+0x1ae>
      }

      /* Store the result in the accumulator in the destination buffer. */
      *pOut = sum;
 8005702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005706:	601a      	str	r2, [r3, #0]
      /* Destination pointer is updated according to the address modifier, inc */
      pOut += inc;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800570e:	4413      	add	r3, r2
 8005710:	647b      	str	r3, [r7, #68]	; 0x44

      /* Increment the pointer pIn1 index, count by 1 */
      count++;
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	3301      	adds	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	; 0x24

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800571e:	4413      	add	r3, r2
 8005720:	643b      	str	r3, [r7, #64]	; 0x40
      py = pIn2;
 8005722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement the loop counter */
      blkCnt--;
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	3b01      	subs	r3, #1
 800572a:	623b      	str	r3, [r7, #32]
    while (blkCnt > 0U)
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1c9      	bne.n	80056c6 <arm_correlate_f32+0x1a2>
   * sum +=  x[srcALen-1] * y[0]
   */

  /* In this stage the MAC operations are decreased by 1 for every iteration.
     The count variable holds the number of MAC operations performed */
  count = srcBLen - 1U;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	3b01      	subs	r3, #1
 8005736:	627b      	str	r3, [r7, #36]	; 0x24

  /* Working pointer of inputA */
  pSrc1 = pIn1 + (srcALen - (srcBLen - 1U));
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	3301      	adds	r3, #1
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005744:	4413      	add	r3, r2
 8005746:	63bb      	str	r3, [r7, #56]	; 0x38
  px = pSrc1;
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	643b      	str	r3, [r7, #64]	; 0x40

  /* Working pointer of inputB */
  py = pIn2;
 800574c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* -------------------
   * Stage3 process
   * ------------------*/

  while (blockSize3 > 0U)
 8005750:	e032      	b.n	80057b8 <arm_correlate_f32+0x294>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0.0f;
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	637b      	str	r3, [r7, #52]	; 0x34
    k = count % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    k = count;
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	62bb      	str	r3, [r7, #40]	; 0x28

#endif /* #if defined (ARM_MATH_LOOPUNROLL) || defined(ARM_MATH_NEON) */

    while (k > 0U)
 800575c:	e014      	b.n	8005788 <arm_correlate_f32+0x264>
    {
      /* Perform the multiply-accumulate */
      sum += *px++ * *py++;
 800575e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	643a      	str	r2, [r7, #64]	; 0x40
 8005764:	ed93 7a00 	vldr	s14, [r3]
 8005768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576a:	1d1a      	adds	r2, r3, #4
 800576c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800576e:	edd3 7a00 	vldr	s15, [r3]
 8005772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005776:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800577a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800577e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

      /* Decrement loop counter */
      k--;
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	3b01      	subs	r3, #1
 8005786:	62bb      	str	r3, [r7, #40]	; 0x28
    while (k > 0U)
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e7      	bne.n	800575e <arm_correlate_f32+0x23a>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut = sum;
 800578e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005792:	601a      	str	r2, [r3, #0]
    /* Destination pointer is updated according to the address modifier, inc */
    pOut += inc;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800579a:	4413      	add	r3, r2
 800579c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Update the inputA and inputB pointers for next MAC calculation */
    px = ++pSrc1;
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	3304      	adds	r3, #4
 80057a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80057a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a6:	643b      	str	r3, [r7, #64]	; 0x40
    py = pIn2;
 80057a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Decrement MAC count */
    count--;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	3b01      	subs	r3, #1
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blockSize3--;
 80057b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b4:	3b01      	subs	r3, #1
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (blockSize3 > 0U)
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1c9      	bne.n	8005752 <arm_correlate_f32+0x22e>
      *pDst++ = sum;
  }

#endif /* #if !defined(ARM_MATH_CM0_FAMILY) */

}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	3754      	adds	r7, #84	; 0x54
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b08f      	sub	sp, #60	; 0x3c
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	637b      	str	r3, [r7, #52]	; 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057f6:	3b01      	subs	r3, #1
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	633b      	str	r3, [r7, #48]	; 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8005802:	e034      	b.n	800586e <arm_fir_f32+0xa2>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	1d13      	adds	r3, r2, #4
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	1d19      	adds	r1, r3, #4
 800580e:	6339      	str	r1, [r7, #48]	; 0x30
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	627b      	str	r3, [r7, #36]	; 0x24

    /* Initialize state pointer */
    px = pState;
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28

    i = numTaps;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    while (i > 0U)
 8005826:	e014      	b.n	8005852 <arm_fir_f32+0x86>
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	1d1a      	adds	r2, r3, #4
 800582c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800582e:	ed93 7a00 	vldr	s14, [r3]
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	1d1a      	adds	r2, r3, #4
 8005836:	62ba      	str	r2, [r7, #40]	; 0x28
 8005838:	edd3 7a00 	vldr	s15, [r3]
 800583c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005840:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005848:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      i--;
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	3b01      	subs	r3, #1
 8005850:	623b      	str	r3, [r7, #32]
    while (i > 0U)
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e7      	bne.n	8005828 <arm_fir_f32+0x5c>
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	1d1a      	adds	r2, r3, #4
 800585c:	607a      	str	r2, [r7, #4]
 800585e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005860:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005864:	3304      	adds	r3, #4
 8005866:	637b      	str	r3, [r7, #52]	; 0x34

    /* Decrement loop counter */
    blkCnt--;
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	3b01      	subs	r3, #1
 800586c:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1c7      	bne.n	8005804 <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	633b      	str	r3, [r7, #48]	; 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	3b01      	subs	r3, #1
 800587e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8005880:	e00a      	b.n	8005898 <arm_fir_f32+0xcc>
  {
    *pStateCurnt++ = *pState++;
 8005882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005884:	1d13      	adds	r3, r2, #4
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	1d19      	adds	r1, r3, #4
 800588c:	6339      	str	r1, [r7, #48]	; 0x30
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3b01      	subs	r3, #1
 8005896:	61fb      	str	r3, [r7, #28]
  while (tapCnt > 0U)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f1      	bne.n	8005882 <arm_fir_f32+0xb6>
  }

}
 800589e:	bf00      	nop
 80058a0:	bf00      	nop
 80058a2:	373c      	adds	r7, #60	; 0x3c
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	460b      	mov	r3, r1
 80058ba:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	897a      	ldrh	r2, [r7, #10]
 80058c0:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80058c8:	897a      	ldrh	r2, [r7, #10]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	4413      	add	r3, r2
 80058ce:	3b01      	subs	r3, #1
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	461a      	mov	r2, r3
 80058d4:	2100      	movs	r1, #0
 80058d6:	6838      	ldr	r0, [r7, #0]
 80058d8:	f000 fd93 	bl	8006402 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	605a      	str	r2, [r3, #4]
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <__cvt>:
 80058ea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058ee:	ec55 4b10 	vmov	r4, r5, d0
 80058f2:	2d00      	cmp	r5, #0
 80058f4:	460e      	mov	r6, r1
 80058f6:	4619      	mov	r1, r3
 80058f8:	462b      	mov	r3, r5
 80058fa:	bfbb      	ittet	lt
 80058fc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005900:	461d      	movlt	r5, r3
 8005902:	2300      	movge	r3, #0
 8005904:	232d      	movlt	r3, #45	; 0x2d
 8005906:	700b      	strb	r3, [r1, #0]
 8005908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800590a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800590e:	4691      	mov	r9, r2
 8005910:	f023 0820 	bic.w	r8, r3, #32
 8005914:	bfbc      	itt	lt
 8005916:	4622      	movlt	r2, r4
 8005918:	4614      	movlt	r4, r2
 800591a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800591e:	d005      	beq.n	800592c <__cvt+0x42>
 8005920:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005924:	d100      	bne.n	8005928 <__cvt+0x3e>
 8005926:	3601      	adds	r6, #1
 8005928:	2102      	movs	r1, #2
 800592a:	e000      	b.n	800592e <__cvt+0x44>
 800592c:	2103      	movs	r1, #3
 800592e:	ab03      	add	r3, sp, #12
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	ab02      	add	r3, sp, #8
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	ec45 4b10 	vmov	d0, r4, r5
 800593a:	4653      	mov	r3, sl
 800593c:	4632      	mov	r2, r6
 800593e:	f000 fe77 	bl	8006630 <_dtoa_r>
 8005942:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005946:	4607      	mov	r7, r0
 8005948:	d102      	bne.n	8005950 <__cvt+0x66>
 800594a:	f019 0f01 	tst.w	r9, #1
 800594e:	d022      	beq.n	8005996 <__cvt+0xac>
 8005950:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005954:	eb07 0906 	add.w	r9, r7, r6
 8005958:	d110      	bne.n	800597c <__cvt+0x92>
 800595a:	783b      	ldrb	r3, [r7, #0]
 800595c:	2b30      	cmp	r3, #48	; 0x30
 800595e:	d10a      	bne.n	8005976 <__cvt+0x8c>
 8005960:	2200      	movs	r2, #0
 8005962:	2300      	movs	r3, #0
 8005964:	4620      	mov	r0, r4
 8005966:	4629      	mov	r1, r5
 8005968:	f7fb f8b6 	bl	8000ad8 <__aeabi_dcmpeq>
 800596c:	b918      	cbnz	r0, 8005976 <__cvt+0x8c>
 800596e:	f1c6 0601 	rsb	r6, r6, #1
 8005972:	f8ca 6000 	str.w	r6, [sl]
 8005976:	f8da 3000 	ldr.w	r3, [sl]
 800597a:	4499      	add	r9, r3
 800597c:	2200      	movs	r2, #0
 800597e:	2300      	movs	r3, #0
 8005980:	4620      	mov	r0, r4
 8005982:	4629      	mov	r1, r5
 8005984:	f7fb f8a8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005988:	b108      	cbz	r0, 800598e <__cvt+0xa4>
 800598a:	f8cd 900c 	str.w	r9, [sp, #12]
 800598e:	2230      	movs	r2, #48	; 0x30
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	454b      	cmp	r3, r9
 8005994:	d307      	bcc.n	80059a6 <__cvt+0xbc>
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800599a:	1bdb      	subs	r3, r3, r7
 800599c:	4638      	mov	r0, r7
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	b004      	add	sp, #16
 80059a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a6:	1c59      	adds	r1, r3, #1
 80059a8:	9103      	str	r1, [sp, #12]
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	e7f0      	b.n	8005990 <__cvt+0xa6>

080059ae <__exponent>:
 80059ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059b0:	4603      	mov	r3, r0
 80059b2:	2900      	cmp	r1, #0
 80059b4:	bfb8      	it	lt
 80059b6:	4249      	neglt	r1, r1
 80059b8:	f803 2b02 	strb.w	r2, [r3], #2
 80059bc:	bfb4      	ite	lt
 80059be:	222d      	movlt	r2, #45	; 0x2d
 80059c0:	222b      	movge	r2, #43	; 0x2b
 80059c2:	2909      	cmp	r1, #9
 80059c4:	7042      	strb	r2, [r0, #1]
 80059c6:	dd2a      	ble.n	8005a1e <__exponent+0x70>
 80059c8:	f10d 0207 	add.w	r2, sp, #7
 80059cc:	4617      	mov	r7, r2
 80059ce:	260a      	movs	r6, #10
 80059d0:	4694      	mov	ip, r2
 80059d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80059d6:	fb06 1415 	mls	r4, r6, r5, r1
 80059da:	3430      	adds	r4, #48	; 0x30
 80059dc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80059e0:	460c      	mov	r4, r1
 80059e2:	2c63      	cmp	r4, #99	; 0x63
 80059e4:	f102 32ff 	add.w	r2, r2, #4294967295
 80059e8:	4629      	mov	r1, r5
 80059ea:	dcf1      	bgt.n	80059d0 <__exponent+0x22>
 80059ec:	3130      	adds	r1, #48	; 0x30
 80059ee:	f1ac 0402 	sub.w	r4, ip, #2
 80059f2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80059f6:	1c41      	adds	r1, r0, #1
 80059f8:	4622      	mov	r2, r4
 80059fa:	42ba      	cmp	r2, r7
 80059fc:	d30a      	bcc.n	8005a14 <__exponent+0x66>
 80059fe:	f10d 0209 	add.w	r2, sp, #9
 8005a02:	eba2 020c 	sub.w	r2, r2, ip
 8005a06:	42bc      	cmp	r4, r7
 8005a08:	bf88      	it	hi
 8005a0a:	2200      	movhi	r2, #0
 8005a0c:	4413      	add	r3, r2
 8005a0e:	1a18      	subs	r0, r3, r0
 8005a10:	b003      	add	sp, #12
 8005a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a14:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005a18:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005a1c:	e7ed      	b.n	80059fa <__exponent+0x4c>
 8005a1e:	2330      	movs	r3, #48	; 0x30
 8005a20:	3130      	adds	r1, #48	; 0x30
 8005a22:	7083      	strb	r3, [r0, #2]
 8005a24:	70c1      	strb	r1, [r0, #3]
 8005a26:	1d03      	adds	r3, r0, #4
 8005a28:	e7f1      	b.n	8005a0e <__exponent+0x60>
	...

08005a2c <_printf_float>:
 8005a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a30:	ed2d 8b02 	vpush	{d8}
 8005a34:	b08d      	sub	sp, #52	; 0x34
 8005a36:	460c      	mov	r4, r1
 8005a38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	461f      	mov	r7, r3
 8005a40:	4605      	mov	r5, r0
 8005a42:	f000 fce7 	bl	8006414 <_localeconv_r>
 8005a46:	f8d0 a000 	ldr.w	sl, [r0]
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	f7fa fc18 	bl	8000280 <strlen>
 8005a50:	2300      	movs	r3, #0
 8005a52:	930a      	str	r3, [sp, #40]	; 0x28
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	9305      	str	r3, [sp, #20]
 8005a58:	f8d8 3000 	ldr.w	r3, [r8]
 8005a5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a60:	3307      	adds	r3, #7
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	f103 0208 	add.w	r2, r3, #8
 8005a6a:	f8c8 2000 	str.w	r2, [r8]
 8005a6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a7c:	ee08 0a10 	vmov	s16, r0
 8005a80:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005a84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a88:	4b9e      	ldr	r3, [pc, #632]	; (8005d04 <_printf_float+0x2d8>)
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	f7fb f855 	bl	8000b3c <__aeabi_dcmpun>
 8005a92:	bb88      	cbnz	r0, 8005af8 <_printf_float+0xcc>
 8005a94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a98:	4b9a      	ldr	r3, [pc, #616]	; (8005d04 <_printf_float+0x2d8>)
 8005a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9e:	f7fb f82f 	bl	8000b00 <__aeabi_dcmple>
 8005aa2:	bb48      	cbnz	r0, 8005af8 <_printf_float+0xcc>
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	4649      	mov	r1, r9
 8005aac:	f7fb f81e 	bl	8000aec <__aeabi_dcmplt>
 8005ab0:	b110      	cbz	r0, 8005ab8 <_printf_float+0x8c>
 8005ab2:	232d      	movs	r3, #45	; 0x2d
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	4a93      	ldr	r2, [pc, #588]	; (8005d08 <_printf_float+0x2dc>)
 8005aba:	4b94      	ldr	r3, [pc, #592]	; (8005d0c <_printf_float+0x2e0>)
 8005abc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ac0:	bf94      	ite	ls
 8005ac2:	4690      	movls	r8, r2
 8005ac4:	4698      	movhi	r8, r3
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	9b05      	ldr	r3, [sp, #20]
 8005acc:	f023 0304 	bic.w	r3, r3, #4
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	f04f 0900 	mov.w	r9, #0
 8005ad6:	9700      	str	r7, [sp, #0]
 8005ad8:	4633      	mov	r3, r6
 8005ada:	aa0b      	add	r2, sp, #44	; 0x2c
 8005adc:	4621      	mov	r1, r4
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 f9da 	bl	8005e98 <_printf_common>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	f040 8090 	bne.w	8005c0a <_printf_float+0x1de>
 8005aea:	f04f 30ff 	mov.w	r0, #4294967295
 8005aee:	b00d      	add	sp, #52	; 0x34
 8005af0:	ecbd 8b02 	vpop	{d8}
 8005af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af8:	4642      	mov	r2, r8
 8005afa:	464b      	mov	r3, r9
 8005afc:	4640      	mov	r0, r8
 8005afe:	4649      	mov	r1, r9
 8005b00:	f7fb f81c 	bl	8000b3c <__aeabi_dcmpun>
 8005b04:	b140      	cbz	r0, 8005b18 <_printf_float+0xec>
 8005b06:	464b      	mov	r3, r9
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bfbc      	itt	lt
 8005b0c:	232d      	movlt	r3, #45	; 0x2d
 8005b0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b12:	4a7f      	ldr	r2, [pc, #508]	; (8005d10 <_printf_float+0x2e4>)
 8005b14:	4b7f      	ldr	r3, [pc, #508]	; (8005d14 <_printf_float+0x2e8>)
 8005b16:	e7d1      	b.n	8005abc <_printf_float+0x90>
 8005b18:	6863      	ldr	r3, [r4, #4]
 8005b1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b1e:	9206      	str	r2, [sp, #24]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	d13f      	bne.n	8005ba4 <_printf_float+0x178>
 8005b24:	2306      	movs	r3, #6
 8005b26:	6063      	str	r3, [r4, #4]
 8005b28:	9b05      	ldr	r3, [sp, #20]
 8005b2a:	6861      	ldr	r1, [r4, #4]
 8005b2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b30:	2300      	movs	r3, #0
 8005b32:	9303      	str	r3, [sp, #12]
 8005b34:	ab0a      	add	r3, sp, #40	; 0x28
 8005b36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b3a:	ab09      	add	r3, sp, #36	; 0x24
 8005b3c:	ec49 8b10 	vmov	d0, r8, r9
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6022      	str	r2, [r4, #0]
 8005b44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f7ff fece 	bl	80058ea <__cvt>
 8005b4e:	9b06      	ldr	r3, [sp, #24]
 8005b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b52:	2b47      	cmp	r3, #71	; 0x47
 8005b54:	4680      	mov	r8, r0
 8005b56:	d108      	bne.n	8005b6a <_printf_float+0x13e>
 8005b58:	1cc8      	adds	r0, r1, #3
 8005b5a:	db02      	blt.n	8005b62 <_printf_float+0x136>
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	4299      	cmp	r1, r3
 8005b60:	dd41      	ble.n	8005be6 <_printf_float+0x1ba>
 8005b62:	f1ab 0302 	sub.w	r3, fp, #2
 8005b66:	fa5f fb83 	uxtb.w	fp, r3
 8005b6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b6e:	d820      	bhi.n	8005bb2 <_printf_float+0x186>
 8005b70:	3901      	subs	r1, #1
 8005b72:	465a      	mov	r2, fp
 8005b74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b78:	9109      	str	r1, [sp, #36]	; 0x24
 8005b7a:	f7ff ff18 	bl	80059ae <__exponent>
 8005b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b80:	1813      	adds	r3, r2, r0
 8005b82:	2a01      	cmp	r2, #1
 8005b84:	4681      	mov	r9, r0
 8005b86:	6123      	str	r3, [r4, #16]
 8005b88:	dc02      	bgt.n	8005b90 <_printf_float+0x164>
 8005b8a:	6822      	ldr	r2, [r4, #0]
 8005b8c:	07d2      	lsls	r2, r2, #31
 8005b8e:	d501      	bpl.n	8005b94 <_printf_float+0x168>
 8005b90:	3301      	adds	r3, #1
 8005b92:	6123      	str	r3, [r4, #16]
 8005b94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d09c      	beq.n	8005ad6 <_printf_float+0xaa>
 8005b9c:	232d      	movs	r3, #45	; 0x2d
 8005b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba2:	e798      	b.n	8005ad6 <_printf_float+0xaa>
 8005ba4:	9a06      	ldr	r2, [sp, #24]
 8005ba6:	2a47      	cmp	r2, #71	; 0x47
 8005ba8:	d1be      	bne.n	8005b28 <_printf_float+0xfc>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1bc      	bne.n	8005b28 <_printf_float+0xfc>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e7b9      	b.n	8005b26 <_printf_float+0xfa>
 8005bb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005bb6:	d118      	bne.n	8005bea <_printf_float+0x1be>
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	dd0b      	ble.n	8005bd6 <_printf_float+0x1aa>
 8005bbe:	6121      	str	r1, [r4, #16]
 8005bc0:	b913      	cbnz	r3, 8005bc8 <_printf_float+0x19c>
 8005bc2:	6822      	ldr	r2, [r4, #0]
 8005bc4:	07d0      	lsls	r0, r2, #31
 8005bc6:	d502      	bpl.n	8005bce <_printf_float+0x1a2>
 8005bc8:	3301      	adds	r3, #1
 8005bca:	440b      	add	r3, r1
 8005bcc:	6123      	str	r3, [r4, #16]
 8005bce:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bd0:	f04f 0900 	mov.w	r9, #0
 8005bd4:	e7de      	b.n	8005b94 <_printf_float+0x168>
 8005bd6:	b913      	cbnz	r3, 8005bde <_printf_float+0x1b2>
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	07d2      	lsls	r2, r2, #31
 8005bdc:	d501      	bpl.n	8005be2 <_printf_float+0x1b6>
 8005bde:	3302      	adds	r3, #2
 8005be0:	e7f4      	b.n	8005bcc <_printf_float+0x1a0>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e7f2      	b.n	8005bcc <_printf_float+0x1a0>
 8005be6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bec:	4299      	cmp	r1, r3
 8005bee:	db05      	blt.n	8005bfc <_printf_float+0x1d0>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	6121      	str	r1, [r4, #16]
 8005bf4:	07d8      	lsls	r0, r3, #31
 8005bf6:	d5ea      	bpl.n	8005bce <_printf_float+0x1a2>
 8005bf8:	1c4b      	adds	r3, r1, #1
 8005bfa:	e7e7      	b.n	8005bcc <_printf_float+0x1a0>
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	bfd4      	ite	le
 8005c00:	f1c1 0202 	rsble	r2, r1, #2
 8005c04:	2201      	movgt	r2, #1
 8005c06:	4413      	add	r3, r2
 8005c08:	e7e0      	b.n	8005bcc <_printf_float+0x1a0>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	055a      	lsls	r2, r3, #21
 8005c0e:	d407      	bmi.n	8005c20 <_printf_float+0x1f4>
 8005c10:	6923      	ldr	r3, [r4, #16]
 8005c12:	4642      	mov	r2, r8
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d12c      	bne.n	8005c78 <_printf_float+0x24c>
 8005c1e:	e764      	b.n	8005aea <_printf_float+0xbe>
 8005c20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c24:	f240 80e0 	bls.w	8005de8 <_printf_float+0x3bc>
 8005c28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f7fa ff52 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d034      	beq.n	8005ca2 <_printf_float+0x276>
 8005c38:	4a37      	ldr	r2, [pc, #220]	; (8005d18 <_printf_float+0x2ec>)
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	f43f af51 	beq.w	8005aea <_printf_float+0xbe>
 8005c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	db02      	blt.n	8005c56 <_printf_float+0x22a>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	07d8      	lsls	r0, r3, #31
 8005c54:	d510      	bpl.n	8005c78 <_printf_float+0x24c>
 8005c56:	ee18 3a10 	vmov	r3, s16
 8005c5a:	4652      	mov	r2, sl
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	f43f af41 	beq.w	8005aea <_printf_float+0xbe>
 8005c68:	f04f 0800 	mov.w	r8, #0
 8005c6c:	f104 091a 	add.w	r9, r4, #26
 8005c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c72:	3b01      	subs	r3, #1
 8005c74:	4543      	cmp	r3, r8
 8005c76:	dc09      	bgt.n	8005c8c <_printf_float+0x260>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	079b      	lsls	r3, r3, #30
 8005c7c:	f100 8107 	bmi.w	8005e8e <_printf_float+0x462>
 8005c80:	68e0      	ldr	r0, [r4, #12]
 8005c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c84:	4298      	cmp	r0, r3
 8005c86:	bfb8      	it	lt
 8005c88:	4618      	movlt	r0, r3
 8005c8a:	e730      	b.n	8005aee <_printf_float+0xc2>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	464a      	mov	r2, r9
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	f43f af27 	beq.w	8005aea <_printf_float+0xbe>
 8005c9c:	f108 0801 	add.w	r8, r8, #1
 8005ca0:	e7e6      	b.n	8005c70 <_printf_float+0x244>
 8005ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dc39      	bgt.n	8005d1c <_printf_float+0x2f0>
 8005ca8:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <_printf_float+0x2ec>)
 8005caa:	2301      	movs	r3, #1
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f43f af19 	beq.w	8005aea <_printf_float+0xbe>
 8005cb8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	d102      	bne.n	8005cc6 <_printf_float+0x29a>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	07d9      	lsls	r1, r3, #31
 8005cc4:	d5d8      	bpl.n	8005c78 <_printf_float+0x24c>
 8005cc6:	ee18 3a10 	vmov	r3, s16
 8005cca:	4652      	mov	r2, sl
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f43f af09 	beq.w	8005aea <_printf_float+0xbe>
 8005cd8:	f04f 0900 	mov.w	r9, #0
 8005cdc:	f104 0a1a 	add.w	sl, r4, #26
 8005ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce2:	425b      	negs	r3, r3
 8005ce4:	454b      	cmp	r3, r9
 8005ce6:	dc01      	bgt.n	8005cec <_printf_float+0x2c0>
 8005ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cea:	e792      	b.n	8005c12 <_printf_float+0x1e6>
 8005cec:	2301      	movs	r3, #1
 8005cee:	4652      	mov	r2, sl
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f43f aef7 	beq.w	8005aea <_printf_float+0xbe>
 8005cfc:	f109 0901 	add.w	r9, r9, #1
 8005d00:	e7ee      	b.n	8005ce0 <_printf_float+0x2b4>
 8005d02:	bf00      	nop
 8005d04:	7fefffff 	.word	0x7fefffff
 8005d08:	0800892c 	.word	0x0800892c
 8005d0c:	08008930 	.word	0x08008930
 8005d10:	08008934 	.word	0x08008934
 8005d14:	08008938 	.word	0x08008938
 8005d18:	0800893c 	.word	0x0800893c
 8005d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d20:	429a      	cmp	r2, r3
 8005d22:	bfa8      	it	ge
 8005d24:	461a      	movge	r2, r3
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	4691      	mov	r9, r2
 8005d2a:	dc37      	bgt.n	8005d9c <_printf_float+0x370>
 8005d2c:	f04f 0b00 	mov.w	fp, #0
 8005d30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d34:	f104 021a 	add.w	r2, r4, #26
 8005d38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d3a:	9305      	str	r3, [sp, #20]
 8005d3c:	eba3 0309 	sub.w	r3, r3, r9
 8005d40:	455b      	cmp	r3, fp
 8005d42:	dc33      	bgt.n	8005dac <_printf_float+0x380>
 8005d44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	db3b      	blt.n	8005dc4 <_printf_float+0x398>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	07da      	lsls	r2, r3, #31
 8005d50:	d438      	bmi.n	8005dc4 <_printf_float+0x398>
 8005d52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d56:	eba2 0903 	sub.w	r9, r2, r3
 8005d5a:	9b05      	ldr	r3, [sp, #20]
 8005d5c:	1ad2      	subs	r2, r2, r3
 8005d5e:	4591      	cmp	r9, r2
 8005d60:	bfa8      	it	ge
 8005d62:	4691      	movge	r9, r2
 8005d64:	f1b9 0f00 	cmp.w	r9, #0
 8005d68:	dc35      	bgt.n	8005dd6 <_printf_float+0x3aa>
 8005d6a:	f04f 0800 	mov.w	r8, #0
 8005d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d72:	f104 0a1a 	add.w	sl, r4, #26
 8005d76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	eba3 0309 	sub.w	r3, r3, r9
 8005d80:	4543      	cmp	r3, r8
 8005d82:	f77f af79 	ble.w	8005c78 <_printf_float+0x24c>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4652      	mov	r2, sl
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	f43f aeaa 	beq.w	8005aea <_printf_float+0xbe>
 8005d96:	f108 0801 	add.w	r8, r8, #1
 8005d9a:	e7ec      	b.n	8005d76 <_printf_float+0x34a>
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4642      	mov	r2, r8
 8005da2:	4628      	mov	r0, r5
 8005da4:	47b8      	blx	r7
 8005da6:	3001      	adds	r0, #1
 8005da8:	d1c0      	bne.n	8005d2c <_printf_float+0x300>
 8005daa:	e69e      	b.n	8005aea <_printf_float+0xbe>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	9205      	str	r2, [sp, #20]
 8005db4:	47b8      	blx	r7
 8005db6:	3001      	adds	r0, #1
 8005db8:	f43f ae97 	beq.w	8005aea <_printf_float+0xbe>
 8005dbc:	9a05      	ldr	r2, [sp, #20]
 8005dbe:	f10b 0b01 	add.w	fp, fp, #1
 8005dc2:	e7b9      	b.n	8005d38 <_printf_float+0x30c>
 8005dc4:	ee18 3a10 	vmov	r3, s16
 8005dc8:	4652      	mov	r2, sl
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	47b8      	blx	r7
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d1be      	bne.n	8005d52 <_printf_float+0x326>
 8005dd4:	e689      	b.n	8005aea <_printf_float+0xbe>
 8005dd6:	9a05      	ldr	r2, [sp, #20]
 8005dd8:	464b      	mov	r3, r9
 8005dda:	4442      	add	r2, r8
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b8      	blx	r7
 8005de2:	3001      	adds	r0, #1
 8005de4:	d1c1      	bne.n	8005d6a <_printf_float+0x33e>
 8005de6:	e680      	b.n	8005aea <_printf_float+0xbe>
 8005de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dea:	2a01      	cmp	r2, #1
 8005dec:	dc01      	bgt.n	8005df2 <_printf_float+0x3c6>
 8005dee:	07db      	lsls	r3, r3, #31
 8005df0:	d53a      	bpl.n	8005e68 <_printf_float+0x43c>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4642      	mov	r2, r8
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f43f ae74 	beq.w	8005aea <_printf_float+0xbe>
 8005e02:	ee18 3a10 	vmov	r3, s16
 8005e06:	4652      	mov	r2, sl
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f ae6b 	beq.w	8005aea <_printf_float+0xbe>
 8005e14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005e20:	f7fa fe5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e24:	b9d8      	cbnz	r0, 8005e5e <_printf_float+0x432>
 8005e26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005e2a:	f108 0201 	add.w	r2, r8, #1
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	d10e      	bne.n	8005e56 <_printf_float+0x42a>
 8005e38:	e657      	b.n	8005aea <_printf_float+0xbe>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4628      	mov	r0, r5
 8005e42:	47b8      	blx	r7
 8005e44:	3001      	adds	r0, #1
 8005e46:	f43f ae50 	beq.w	8005aea <_printf_float+0xbe>
 8005e4a:	f108 0801 	add.w	r8, r8, #1
 8005e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e50:	3b01      	subs	r3, #1
 8005e52:	4543      	cmp	r3, r8
 8005e54:	dcf1      	bgt.n	8005e3a <_printf_float+0x40e>
 8005e56:	464b      	mov	r3, r9
 8005e58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e5c:	e6da      	b.n	8005c14 <_printf_float+0x1e8>
 8005e5e:	f04f 0800 	mov.w	r8, #0
 8005e62:	f104 0a1a 	add.w	sl, r4, #26
 8005e66:	e7f2      	b.n	8005e4e <_printf_float+0x422>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4642      	mov	r2, r8
 8005e6c:	e7df      	b.n	8005e2e <_printf_float+0x402>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	464a      	mov	r2, r9
 8005e72:	4631      	mov	r1, r6
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f43f ae36 	beq.w	8005aea <_printf_float+0xbe>
 8005e7e:	f108 0801 	add.w	r8, r8, #1
 8005e82:	68e3      	ldr	r3, [r4, #12]
 8005e84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e86:	1a5b      	subs	r3, r3, r1
 8005e88:	4543      	cmp	r3, r8
 8005e8a:	dcf0      	bgt.n	8005e6e <_printf_float+0x442>
 8005e8c:	e6f8      	b.n	8005c80 <_printf_float+0x254>
 8005e8e:	f04f 0800 	mov.w	r8, #0
 8005e92:	f104 0919 	add.w	r9, r4, #25
 8005e96:	e7f4      	b.n	8005e82 <_printf_float+0x456>

08005e98 <_printf_common>:
 8005e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9c:	4616      	mov	r6, r2
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	688a      	ldr	r2, [r1, #8]
 8005ea2:	690b      	ldr	r3, [r1, #16]
 8005ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	bfb8      	it	lt
 8005eac:	4613      	movlt	r3, r2
 8005eae:	6033      	str	r3, [r6, #0]
 8005eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	b10a      	cbz	r2, 8005ebe <_printf_common+0x26>
 8005eba:	3301      	adds	r3, #1
 8005ebc:	6033      	str	r3, [r6, #0]
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	0699      	lsls	r1, r3, #26
 8005ec2:	bf42      	ittt	mi
 8005ec4:	6833      	ldrmi	r3, [r6, #0]
 8005ec6:	3302      	addmi	r3, #2
 8005ec8:	6033      	strmi	r3, [r6, #0]
 8005eca:	6825      	ldr	r5, [r4, #0]
 8005ecc:	f015 0506 	ands.w	r5, r5, #6
 8005ed0:	d106      	bne.n	8005ee0 <_printf_common+0x48>
 8005ed2:	f104 0a19 	add.w	sl, r4, #25
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	6832      	ldr	r2, [r6, #0]
 8005eda:	1a9b      	subs	r3, r3, r2
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	dc26      	bgt.n	8005f2e <_printf_common+0x96>
 8005ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ee4:	1e13      	subs	r3, r2, #0
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	bf18      	it	ne
 8005eea:	2301      	movne	r3, #1
 8005eec:	0692      	lsls	r2, r2, #26
 8005eee:	d42b      	bmi.n	8005f48 <_printf_common+0xb0>
 8005ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	47c0      	blx	r8
 8005efa:	3001      	adds	r0, #1
 8005efc:	d01e      	beq.n	8005f3c <_printf_common+0xa4>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	6922      	ldr	r2, [r4, #16]
 8005f02:	f003 0306 	and.w	r3, r3, #6
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	bf02      	ittt	eq
 8005f0a:	68e5      	ldreq	r5, [r4, #12]
 8005f0c:	6833      	ldreq	r3, [r6, #0]
 8005f0e:	1aed      	subeq	r5, r5, r3
 8005f10:	68a3      	ldr	r3, [r4, #8]
 8005f12:	bf0c      	ite	eq
 8005f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f18:	2500      	movne	r5, #0
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	bfc4      	itt	gt
 8005f1e:	1a9b      	subgt	r3, r3, r2
 8005f20:	18ed      	addgt	r5, r5, r3
 8005f22:	2600      	movs	r6, #0
 8005f24:	341a      	adds	r4, #26
 8005f26:	42b5      	cmp	r5, r6
 8005f28:	d11a      	bne.n	8005f60 <_printf_common+0xc8>
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	e008      	b.n	8005f40 <_printf_common+0xa8>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4652      	mov	r2, sl
 8005f32:	4649      	mov	r1, r9
 8005f34:	4638      	mov	r0, r7
 8005f36:	47c0      	blx	r8
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d103      	bne.n	8005f44 <_printf_common+0xac>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f44:	3501      	adds	r5, #1
 8005f46:	e7c6      	b.n	8005ed6 <_printf_common+0x3e>
 8005f48:	18e1      	adds	r1, r4, r3
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	2030      	movs	r0, #48	; 0x30
 8005f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f52:	4422      	add	r2, r4
 8005f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f5c:	3302      	adds	r3, #2
 8005f5e:	e7c7      	b.n	8005ef0 <_printf_common+0x58>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4622      	mov	r2, r4
 8005f64:	4649      	mov	r1, r9
 8005f66:	4638      	mov	r0, r7
 8005f68:	47c0      	blx	r8
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d0e6      	beq.n	8005f3c <_printf_common+0xa4>
 8005f6e:	3601      	adds	r6, #1
 8005f70:	e7d9      	b.n	8005f26 <_printf_common+0x8e>
	...

08005f74 <_printf_i>:
 8005f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f78:	7e0f      	ldrb	r7, [r1, #24]
 8005f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f7c:	2f78      	cmp	r7, #120	; 0x78
 8005f7e:	4691      	mov	r9, r2
 8005f80:	4680      	mov	r8, r0
 8005f82:	460c      	mov	r4, r1
 8005f84:	469a      	mov	sl, r3
 8005f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f8a:	d807      	bhi.n	8005f9c <_printf_i+0x28>
 8005f8c:	2f62      	cmp	r7, #98	; 0x62
 8005f8e:	d80a      	bhi.n	8005fa6 <_printf_i+0x32>
 8005f90:	2f00      	cmp	r7, #0
 8005f92:	f000 80d4 	beq.w	800613e <_printf_i+0x1ca>
 8005f96:	2f58      	cmp	r7, #88	; 0x58
 8005f98:	f000 80c0 	beq.w	800611c <_printf_i+0x1a8>
 8005f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fa4:	e03a      	b.n	800601c <_printf_i+0xa8>
 8005fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005faa:	2b15      	cmp	r3, #21
 8005fac:	d8f6      	bhi.n	8005f9c <_printf_i+0x28>
 8005fae:	a101      	add	r1, pc, #4	; (adr r1, 8005fb4 <_printf_i+0x40>)
 8005fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb4:	0800600d 	.word	0x0800600d
 8005fb8:	08006021 	.word	0x08006021
 8005fbc:	08005f9d 	.word	0x08005f9d
 8005fc0:	08005f9d 	.word	0x08005f9d
 8005fc4:	08005f9d 	.word	0x08005f9d
 8005fc8:	08005f9d 	.word	0x08005f9d
 8005fcc:	08006021 	.word	0x08006021
 8005fd0:	08005f9d 	.word	0x08005f9d
 8005fd4:	08005f9d 	.word	0x08005f9d
 8005fd8:	08005f9d 	.word	0x08005f9d
 8005fdc:	08005f9d 	.word	0x08005f9d
 8005fe0:	08006125 	.word	0x08006125
 8005fe4:	0800604d 	.word	0x0800604d
 8005fe8:	080060df 	.word	0x080060df
 8005fec:	08005f9d 	.word	0x08005f9d
 8005ff0:	08005f9d 	.word	0x08005f9d
 8005ff4:	08006147 	.word	0x08006147
 8005ff8:	08005f9d 	.word	0x08005f9d
 8005ffc:	0800604d 	.word	0x0800604d
 8006000:	08005f9d 	.word	0x08005f9d
 8006004:	08005f9d 	.word	0x08005f9d
 8006008:	080060e7 	.word	0x080060e7
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	1d1a      	adds	r2, r3, #4
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	602a      	str	r2, [r5, #0]
 8006014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800601c:	2301      	movs	r3, #1
 800601e:	e09f      	b.n	8006160 <_printf_i+0x1ec>
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	0607      	lsls	r7, r0, #24
 8006026:	f103 0104 	add.w	r1, r3, #4
 800602a:	6029      	str	r1, [r5, #0]
 800602c:	d501      	bpl.n	8006032 <_printf_i+0xbe>
 800602e:	681e      	ldr	r6, [r3, #0]
 8006030:	e003      	b.n	800603a <_printf_i+0xc6>
 8006032:	0646      	lsls	r6, r0, #25
 8006034:	d5fb      	bpl.n	800602e <_printf_i+0xba>
 8006036:	f9b3 6000 	ldrsh.w	r6, [r3]
 800603a:	2e00      	cmp	r6, #0
 800603c:	da03      	bge.n	8006046 <_printf_i+0xd2>
 800603e:	232d      	movs	r3, #45	; 0x2d
 8006040:	4276      	negs	r6, r6
 8006042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006046:	485a      	ldr	r0, [pc, #360]	; (80061b0 <_printf_i+0x23c>)
 8006048:	230a      	movs	r3, #10
 800604a:	e012      	b.n	8006072 <_printf_i+0xfe>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	1d19      	adds	r1, r3, #4
 8006052:	6029      	str	r1, [r5, #0]
 8006054:	0605      	lsls	r5, r0, #24
 8006056:	d501      	bpl.n	800605c <_printf_i+0xe8>
 8006058:	681e      	ldr	r6, [r3, #0]
 800605a:	e002      	b.n	8006062 <_printf_i+0xee>
 800605c:	0641      	lsls	r1, r0, #25
 800605e:	d5fb      	bpl.n	8006058 <_printf_i+0xe4>
 8006060:	881e      	ldrh	r6, [r3, #0]
 8006062:	4853      	ldr	r0, [pc, #332]	; (80061b0 <_printf_i+0x23c>)
 8006064:	2f6f      	cmp	r7, #111	; 0x6f
 8006066:	bf0c      	ite	eq
 8006068:	2308      	moveq	r3, #8
 800606a:	230a      	movne	r3, #10
 800606c:	2100      	movs	r1, #0
 800606e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006072:	6865      	ldr	r5, [r4, #4]
 8006074:	60a5      	str	r5, [r4, #8]
 8006076:	2d00      	cmp	r5, #0
 8006078:	bfa2      	ittt	ge
 800607a:	6821      	ldrge	r1, [r4, #0]
 800607c:	f021 0104 	bicge.w	r1, r1, #4
 8006080:	6021      	strge	r1, [r4, #0]
 8006082:	b90e      	cbnz	r6, 8006088 <_printf_i+0x114>
 8006084:	2d00      	cmp	r5, #0
 8006086:	d04b      	beq.n	8006120 <_printf_i+0x1ac>
 8006088:	4615      	mov	r5, r2
 800608a:	fbb6 f1f3 	udiv	r1, r6, r3
 800608e:	fb03 6711 	mls	r7, r3, r1, r6
 8006092:	5dc7      	ldrb	r7, [r0, r7]
 8006094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006098:	4637      	mov	r7, r6
 800609a:	42bb      	cmp	r3, r7
 800609c:	460e      	mov	r6, r1
 800609e:	d9f4      	bls.n	800608a <_printf_i+0x116>
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d10b      	bne.n	80060bc <_printf_i+0x148>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	07de      	lsls	r6, r3, #31
 80060a8:	d508      	bpl.n	80060bc <_printf_i+0x148>
 80060aa:	6923      	ldr	r3, [r4, #16]
 80060ac:	6861      	ldr	r1, [r4, #4]
 80060ae:	4299      	cmp	r1, r3
 80060b0:	bfde      	ittt	le
 80060b2:	2330      	movle	r3, #48	; 0x30
 80060b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060bc:	1b52      	subs	r2, r2, r5
 80060be:	6122      	str	r2, [r4, #16]
 80060c0:	f8cd a000 	str.w	sl, [sp]
 80060c4:	464b      	mov	r3, r9
 80060c6:	aa03      	add	r2, sp, #12
 80060c8:	4621      	mov	r1, r4
 80060ca:	4640      	mov	r0, r8
 80060cc:	f7ff fee4 	bl	8005e98 <_printf_common>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d14a      	bne.n	800616a <_printf_i+0x1f6>
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295
 80060d8:	b004      	add	sp, #16
 80060da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	f043 0320 	orr.w	r3, r3, #32
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	4833      	ldr	r0, [pc, #204]	; (80061b4 <_printf_i+0x240>)
 80060e8:	2778      	movs	r7, #120	; 0x78
 80060ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	6829      	ldr	r1, [r5, #0]
 80060f2:	061f      	lsls	r7, r3, #24
 80060f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80060f8:	d402      	bmi.n	8006100 <_printf_i+0x18c>
 80060fa:	065f      	lsls	r7, r3, #25
 80060fc:	bf48      	it	mi
 80060fe:	b2b6      	uxthmi	r6, r6
 8006100:	07df      	lsls	r7, r3, #31
 8006102:	bf48      	it	mi
 8006104:	f043 0320 	orrmi.w	r3, r3, #32
 8006108:	6029      	str	r1, [r5, #0]
 800610a:	bf48      	it	mi
 800610c:	6023      	strmi	r3, [r4, #0]
 800610e:	b91e      	cbnz	r6, 8006118 <_printf_i+0x1a4>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	f023 0320 	bic.w	r3, r3, #32
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	2310      	movs	r3, #16
 800611a:	e7a7      	b.n	800606c <_printf_i+0xf8>
 800611c:	4824      	ldr	r0, [pc, #144]	; (80061b0 <_printf_i+0x23c>)
 800611e:	e7e4      	b.n	80060ea <_printf_i+0x176>
 8006120:	4615      	mov	r5, r2
 8006122:	e7bd      	b.n	80060a0 <_printf_i+0x12c>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	6826      	ldr	r6, [r4, #0]
 8006128:	6961      	ldr	r1, [r4, #20]
 800612a:	1d18      	adds	r0, r3, #4
 800612c:	6028      	str	r0, [r5, #0]
 800612e:	0635      	lsls	r5, r6, #24
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	d501      	bpl.n	8006138 <_printf_i+0x1c4>
 8006134:	6019      	str	r1, [r3, #0]
 8006136:	e002      	b.n	800613e <_printf_i+0x1ca>
 8006138:	0670      	lsls	r0, r6, #25
 800613a:	d5fb      	bpl.n	8006134 <_printf_i+0x1c0>
 800613c:	8019      	strh	r1, [r3, #0]
 800613e:	2300      	movs	r3, #0
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	4615      	mov	r5, r2
 8006144:	e7bc      	b.n	80060c0 <_printf_i+0x14c>
 8006146:	682b      	ldr	r3, [r5, #0]
 8006148:	1d1a      	adds	r2, r3, #4
 800614a:	602a      	str	r2, [r5, #0]
 800614c:	681d      	ldr	r5, [r3, #0]
 800614e:	6862      	ldr	r2, [r4, #4]
 8006150:	2100      	movs	r1, #0
 8006152:	4628      	mov	r0, r5
 8006154:	f7fa f844 	bl	80001e0 <memchr>
 8006158:	b108      	cbz	r0, 800615e <_printf_i+0x1ea>
 800615a:	1b40      	subs	r0, r0, r5
 800615c:	6060      	str	r0, [r4, #4]
 800615e:	6863      	ldr	r3, [r4, #4]
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	2300      	movs	r3, #0
 8006164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006168:	e7aa      	b.n	80060c0 <_printf_i+0x14c>
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	462a      	mov	r2, r5
 800616e:	4649      	mov	r1, r9
 8006170:	4640      	mov	r0, r8
 8006172:	47d0      	blx	sl
 8006174:	3001      	adds	r0, #1
 8006176:	d0ad      	beq.n	80060d4 <_printf_i+0x160>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	079b      	lsls	r3, r3, #30
 800617c:	d413      	bmi.n	80061a6 <_printf_i+0x232>
 800617e:	68e0      	ldr	r0, [r4, #12]
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	4298      	cmp	r0, r3
 8006184:	bfb8      	it	lt
 8006186:	4618      	movlt	r0, r3
 8006188:	e7a6      	b.n	80060d8 <_printf_i+0x164>
 800618a:	2301      	movs	r3, #1
 800618c:	4632      	mov	r2, r6
 800618e:	4649      	mov	r1, r9
 8006190:	4640      	mov	r0, r8
 8006192:	47d0      	blx	sl
 8006194:	3001      	adds	r0, #1
 8006196:	d09d      	beq.n	80060d4 <_printf_i+0x160>
 8006198:	3501      	adds	r5, #1
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	9903      	ldr	r1, [sp, #12]
 800619e:	1a5b      	subs	r3, r3, r1
 80061a0:	42ab      	cmp	r3, r5
 80061a2:	dcf2      	bgt.n	800618a <_printf_i+0x216>
 80061a4:	e7eb      	b.n	800617e <_printf_i+0x20a>
 80061a6:	2500      	movs	r5, #0
 80061a8:	f104 0619 	add.w	r6, r4, #25
 80061ac:	e7f5      	b.n	800619a <_printf_i+0x226>
 80061ae:	bf00      	nop
 80061b0:	0800893e 	.word	0x0800893e
 80061b4:	0800894f 	.word	0x0800894f

080061b8 <std>:
 80061b8:	2300      	movs	r3, #0
 80061ba:	b510      	push	{r4, lr}
 80061bc:	4604      	mov	r4, r0
 80061be:	e9c0 3300 	strd	r3, r3, [r0]
 80061c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061c6:	6083      	str	r3, [r0, #8]
 80061c8:	8181      	strh	r1, [r0, #12]
 80061ca:	6643      	str	r3, [r0, #100]	; 0x64
 80061cc:	81c2      	strh	r2, [r0, #14]
 80061ce:	6183      	str	r3, [r0, #24]
 80061d0:	4619      	mov	r1, r3
 80061d2:	2208      	movs	r2, #8
 80061d4:	305c      	adds	r0, #92	; 0x5c
 80061d6:	f000 f914 	bl	8006402 <memset>
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <std+0x58>)
 80061dc:	6263      	str	r3, [r4, #36]	; 0x24
 80061de:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <std+0x5c>)
 80061e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <std+0x60>)
 80061e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061e6:	4b0d      	ldr	r3, [pc, #52]	; (800621c <std+0x64>)
 80061e8:	6323      	str	r3, [r4, #48]	; 0x30
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <std+0x68>)
 80061ec:	6224      	str	r4, [r4, #32]
 80061ee:	429c      	cmp	r4, r3
 80061f0:	d006      	beq.n	8006200 <std+0x48>
 80061f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80061f6:	4294      	cmp	r4, r2
 80061f8:	d002      	beq.n	8006200 <std+0x48>
 80061fa:	33d0      	adds	r3, #208	; 0xd0
 80061fc:	429c      	cmp	r4, r3
 80061fe:	d105      	bne.n	800620c <std+0x54>
 8006200:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006208:	f000 b978 	b.w	80064fc <__retarget_lock_init_recursive>
 800620c:	bd10      	pop	{r4, pc}
 800620e:	bf00      	nop
 8006210:	0800637d 	.word	0x0800637d
 8006214:	0800639f 	.word	0x0800639f
 8006218:	080063d7 	.word	0x080063d7
 800621c:	080063fb 	.word	0x080063fb
 8006220:	20014698 	.word	0x20014698

08006224 <stdio_exit_handler>:
 8006224:	4a02      	ldr	r2, [pc, #8]	; (8006230 <stdio_exit_handler+0xc>)
 8006226:	4903      	ldr	r1, [pc, #12]	; (8006234 <stdio_exit_handler+0x10>)
 8006228:	4803      	ldr	r0, [pc, #12]	; (8006238 <stdio_exit_handler+0x14>)
 800622a:	f000 b869 	b.w	8006300 <_fwalk_sglue>
 800622e:	bf00      	nop
 8006230:	2000000c 	.word	0x2000000c
 8006234:	08007ec9 	.word	0x08007ec9
 8006238:	20000018 	.word	0x20000018

0800623c <cleanup_stdio>:
 800623c:	6841      	ldr	r1, [r0, #4]
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <cleanup_stdio+0x34>)
 8006240:	4299      	cmp	r1, r3
 8006242:	b510      	push	{r4, lr}
 8006244:	4604      	mov	r4, r0
 8006246:	d001      	beq.n	800624c <cleanup_stdio+0x10>
 8006248:	f001 fe3e 	bl	8007ec8 <_fflush_r>
 800624c:	68a1      	ldr	r1, [r4, #8]
 800624e:	4b09      	ldr	r3, [pc, #36]	; (8006274 <cleanup_stdio+0x38>)
 8006250:	4299      	cmp	r1, r3
 8006252:	d002      	beq.n	800625a <cleanup_stdio+0x1e>
 8006254:	4620      	mov	r0, r4
 8006256:	f001 fe37 	bl	8007ec8 <_fflush_r>
 800625a:	68e1      	ldr	r1, [r4, #12]
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <cleanup_stdio+0x3c>)
 800625e:	4299      	cmp	r1, r3
 8006260:	d004      	beq.n	800626c <cleanup_stdio+0x30>
 8006262:	4620      	mov	r0, r4
 8006264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006268:	f001 be2e 	b.w	8007ec8 <_fflush_r>
 800626c:	bd10      	pop	{r4, pc}
 800626e:	bf00      	nop
 8006270:	20014698 	.word	0x20014698
 8006274:	20014700 	.word	0x20014700
 8006278:	20014768 	.word	0x20014768

0800627c <global_stdio_init.part.0>:
 800627c:	b510      	push	{r4, lr}
 800627e:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <global_stdio_init.part.0+0x30>)
 8006280:	4c0b      	ldr	r4, [pc, #44]	; (80062b0 <global_stdio_init.part.0+0x34>)
 8006282:	4a0c      	ldr	r2, [pc, #48]	; (80062b4 <global_stdio_init.part.0+0x38>)
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	4620      	mov	r0, r4
 8006288:	2200      	movs	r2, #0
 800628a:	2104      	movs	r1, #4
 800628c:	f7ff ff94 	bl	80061b8 <std>
 8006290:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006294:	2201      	movs	r2, #1
 8006296:	2109      	movs	r1, #9
 8006298:	f7ff ff8e 	bl	80061b8 <std>
 800629c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80062a0:	2202      	movs	r2, #2
 80062a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a6:	2112      	movs	r1, #18
 80062a8:	f7ff bf86 	b.w	80061b8 <std>
 80062ac:	200147d0 	.word	0x200147d0
 80062b0:	20014698 	.word	0x20014698
 80062b4:	08006225 	.word	0x08006225

080062b8 <__sfp_lock_acquire>:
 80062b8:	4801      	ldr	r0, [pc, #4]	; (80062c0 <__sfp_lock_acquire+0x8>)
 80062ba:	f000 b920 	b.w	80064fe <__retarget_lock_acquire_recursive>
 80062be:	bf00      	nop
 80062c0:	200147d9 	.word	0x200147d9

080062c4 <__sfp_lock_release>:
 80062c4:	4801      	ldr	r0, [pc, #4]	; (80062cc <__sfp_lock_release+0x8>)
 80062c6:	f000 b91b 	b.w	8006500 <__retarget_lock_release_recursive>
 80062ca:	bf00      	nop
 80062cc:	200147d9 	.word	0x200147d9

080062d0 <__sinit>:
 80062d0:	b510      	push	{r4, lr}
 80062d2:	4604      	mov	r4, r0
 80062d4:	f7ff fff0 	bl	80062b8 <__sfp_lock_acquire>
 80062d8:	6a23      	ldr	r3, [r4, #32]
 80062da:	b11b      	cbz	r3, 80062e4 <__sinit+0x14>
 80062dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e0:	f7ff bff0 	b.w	80062c4 <__sfp_lock_release>
 80062e4:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <__sinit+0x28>)
 80062e6:	6223      	str	r3, [r4, #32]
 80062e8:	4b04      	ldr	r3, [pc, #16]	; (80062fc <__sinit+0x2c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1f5      	bne.n	80062dc <__sinit+0xc>
 80062f0:	f7ff ffc4 	bl	800627c <global_stdio_init.part.0>
 80062f4:	e7f2      	b.n	80062dc <__sinit+0xc>
 80062f6:	bf00      	nop
 80062f8:	0800623d 	.word	0x0800623d
 80062fc:	200147d0 	.word	0x200147d0

08006300 <_fwalk_sglue>:
 8006300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006304:	4607      	mov	r7, r0
 8006306:	4688      	mov	r8, r1
 8006308:	4614      	mov	r4, r2
 800630a:	2600      	movs	r6, #0
 800630c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006310:	f1b9 0901 	subs.w	r9, r9, #1
 8006314:	d505      	bpl.n	8006322 <_fwalk_sglue+0x22>
 8006316:	6824      	ldr	r4, [r4, #0]
 8006318:	2c00      	cmp	r4, #0
 800631a:	d1f7      	bne.n	800630c <_fwalk_sglue+0xc>
 800631c:	4630      	mov	r0, r6
 800631e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006322:	89ab      	ldrh	r3, [r5, #12]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d907      	bls.n	8006338 <_fwalk_sglue+0x38>
 8006328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800632c:	3301      	adds	r3, #1
 800632e:	d003      	beq.n	8006338 <_fwalk_sglue+0x38>
 8006330:	4629      	mov	r1, r5
 8006332:	4638      	mov	r0, r7
 8006334:	47c0      	blx	r8
 8006336:	4306      	orrs	r6, r0
 8006338:	3568      	adds	r5, #104	; 0x68
 800633a:	e7e9      	b.n	8006310 <_fwalk_sglue+0x10>

0800633c <siprintf>:
 800633c:	b40e      	push	{r1, r2, r3}
 800633e:	b500      	push	{lr}
 8006340:	b09c      	sub	sp, #112	; 0x70
 8006342:	ab1d      	add	r3, sp, #116	; 0x74
 8006344:	9002      	str	r0, [sp, #8]
 8006346:	9006      	str	r0, [sp, #24]
 8006348:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800634c:	4809      	ldr	r0, [pc, #36]	; (8006374 <siprintf+0x38>)
 800634e:	9107      	str	r1, [sp, #28]
 8006350:	9104      	str	r1, [sp, #16]
 8006352:	4909      	ldr	r1, [pc, #36]	; (8006378 <siprintf+0x3c>)
 8006354:	f853 2b04 	ldr.w	r2, [r3], #4
 8006358:	9105      	str	r1, [sp, #20]
 800635a:	6800      	ldr	r0, [r0, #0]
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	a902      	add	r1, sp, #8
 8006360:	f001 fc2e 	bl	8007bc0 <_svfiprintf_r>
 8006364:	9b02      	ldr	r3, [sp, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	b01c      	add	sp, #112	; 0x70
 800636c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006370:	b003      	add	sp, #12
 8006372:	4770      	bx	lr
 8006374:	20000064 	.word	0x20000064
 8006378:	ffff0208 	.word	0xffff0208

0800637c <__sread>:
 800637c:	b510      	push	{r4, lr}
 800637e:	460c      	mov	r4, r1
 8006380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006384:	f000 f86c 	bl	8006460 <_read_r>
 8006388:	2800      	cmp	r0, #0
 800638a:	bfab      	itete	ge
 800638c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800638e:	89a3      	ldrhlt	r3, [r4, #12]
 8006390:	181b      	addge	r3, r3, r0
 8006392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006396:	bfac      	ite	ge
 8006398:	6563      	strge	r3, [r4, #84]	; 0x54
 800639a:	81a3      	strhlt	r3, [r4, #12]
 800639c:	bd10      	pop	{r4, pc}

0800639e <__swrite>:
 800639e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a2:	461f      	mov	r7, r3
 80063a4:	898b      	ldrh	r3, [r1, #12]
 80063a6:	05db      	lsls	r3, r3, #23
 80063a8:	4605      	mov	r5, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	4616      	mov	r6, r2
 80063ae:	d505      	bpl.n	80063bc <__swrite+0x1e>
 80063b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b4:	2302      	movs	r3, #2
 80063b6:	2200      	movs	r2, #0
 80063b8:	f000 f840 	bl	800643c <_lseek_r>
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063c6:	81a3      	strh	r3, [r4, #12]
 80063c8:	4632      	mov	r2, r6
 80063ca:	463b      	mov	r3, r7
 80063cc:	4628      	mov	r0, r5
 80063ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d2:	f000 b857 	b.w	8006484 <_write_r>

080063d6 <__sseek>:
 80063d6:	b510      	push	{r4, lr}
 80063d8:	460c      	mov	r4, r1
 80063da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063de:	f000 f82d 	bl	800643c <_lseek_r>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	bf15      	itete	ne
 80063e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80063ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063f2:	81a3      	strheq	r3, [r4, #12]
 80063f4:	bf18      	it	ne
 80063f6:	81a3      	strhne	r3, [r4, #12]
 80063f8:	bd10      	pop	{r4, pc}

080063fa <__sclose>:
 80063fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fe:	f000 b80d 	b.w	800641c <_close_r>

08006402 <memset>:
 8006402:	4402      	add	r2, r0
 8006404:	4603      	mov	r3, r0
 8006406:	4293      	cmp	r3, r2
 8006408:	d100      	bne.n	800640c <memset+0xa>
 800640a:	4770      	bx	lr
 800640c:	f803 1b01 	strb.w	r1, [r3], #1
 8006410:	e7f9      	b.n	8006406 <memset+0x4>
	...

08006414 <_localeconv_r>:
 8006414:	4800      	ldr	r0, [pc, #0]	; (8006418 <_localeconv_r+0x4>)
 8006416:	4770      	bx	lr
 8006418:	20000158 	.word	0x20000158

0800641c <_close_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4d06      	ldr	r5, [pc, #24]	; (8006438 <_close_r+0x1c>)
 8006420:	2300      	movs	r3, #0
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	f7fb fc3b 	bl	8001ca2 <_close>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_close_r+0x1a>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_close_r+0x1a>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	200147d4 	.word	0x200147d4

0800643c <_lseek_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d07      	ldr	r5, [pc, #28]	; (800645c <_lseek_r+0x20>)
 8006440:	4604      	mov	r4, r0
 8006442:	4608      	mov	r0, r1
 8006444:	4611      	mov	r1, r2
 8006446:	2200      	movs	r2, #0
 8006448:	602a      	str	r2, [r5, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	f7fb fc50 	bl	8001cf0 <_lseek>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_lseek_r+0x1e>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	b103      	cbz	r3, 800645a <_lseek_r+0x1e>
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	200147d4 	.word	0x200147d4

08006460 <_read_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d07      	ldr	r5, [pc, #28]	; (8006480 <_read_r+0x20>)
 8006464:	4604      	mov	r4, r0
 8006466:	4608      	mov	r0, r1
 8006468:	4611      	mov	r1, r2
 800646a:	2200      	movs	r2, #0
 800646c:	602a      	str	r2, [r5, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	f7fb fbde 	bl	8001c30 <_read>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_read_r+0x1e>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_read_r+0x1e>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	200147d4 	.word	0x200147d4

08006484 <_write_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4d07      	ldr	r5, [pc, #28]	; (80064a4 <_write_r+0x20>)
 8006488:	4604      	mov	r4, r0
 800648a:	4608      	mov	r0, r1
 800648c:	4611      	mov	r1, r2
 800648e:	2200      	movs	r2, #0
 8006490:	602a      	str	r2, [r5, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	f7fb fbe9 	bl	8001c6a <_write>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d102      	bne.n	80064a2 <_write_r+0x1e>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	b103      	cbz	r3, 80064a2 <_write_r+0x1e>
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
 80064a4:	200147d4 	.word	0x200147d4

080064a8 <__errno>:
 80064a8:	4b01      	ldr	r3, [pc, #4]	; (80064b0 <__errno+0x8>)
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	20000064 	.word	0x20000064

080064b4 <__libc_init_array>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	4d0d      	ldr	r5, [pc, #52]	; (80064ec <__libc_init_array+0x38>)
 80064b8:	4c0d      	ldr	r4, [pc, #52]	; (80064f0 <__libc_init_array+0x3c>)
 80064ba:	1b64      	subs	r4, r4, r5
 80064bc:	10a4      	asrs	r4, r4, #2
 80064be:	2600      	movs	r6, #0
 80064c0:	42a6      	cmp	r6, r4
 80064c2:	d109      	bne.n	80064d8 <__libc_init_array+0x24>
 80064c4:	4d0b      	ldr	r5, [pc, #44]	; (80064f4 <__libc_init_array+0x40>)
 80064c6:	4c0c      	ldr	r4, [pc, #48]	; (80064f8 <__libc_init_array+0x44>)
 80064c8:	f002 f894 	bl	80085f4 <_init>
 80064cc:	1b64      	subs	r4, r4, r5
 80064ce:	10a4      	asrs	r4, r4, #2
 80064d0:	2600      	movs	r6, #0
 80064d2:	42a6      	cmp	r6, r4
 80064d4:	d105      	bne.n	80064e2 <__libc_init_array+0x2e>
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064dc:	4798      	blx	r3
 80064de:	3601      	adds	r6, #1
 80064e0:	e7ee      	b.n	80064c0 <__libc_init_array+0xc>
 80064e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e6:	4798      	blx	r3
 80064e8:	3601      	adds	r6, #1
 80064ea:	e7f2      	b.n	80064d2 <__libc_init_array+0x1e>
 80064ec:	08008ca4 	.word	0x08008ca4
 80064f0:	08008ca4 	.word	0x08008ca4
 80064f4:	08008ca4 	.word	0x08008ca4
 80064f8:	08008ca8 	.word	0x08008ca8

080064fc <__retarget_lock_init_recursive>:
 80064fc:	4770      	bx	lr

080064fe <__retarget_lock_acquire_recursive>:
 80064fe:	4770      	bx	lr

08006500 <__retarget_lock_release_recursive>:
 8006500:	4770      	bx	lr

08006502 <memcpy>:
 8006502:	440a      	add	r2, r1
 8006504:	4291      	cmp	r1, r2
 8006506:	f100 33ff 	add.w	r3, r0, #4294967295
 800650a:	d100      	bne.n	800650e <memcpy+0xc>
 800650c:	4770      	bx	lr
 800650e:	b510      	push	{r4, lr}
 8006510:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006514:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006518:	4291      	cmp	r1, r2
 800651a:	d1f9      	bne.n	8006510 <memcpy+0xe>
 800651c:	bd10      	pop	{r4, pc}

0800651e <quorem>:
 800651e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006522:	6903      	ldr	r3, [r0, #16]
 8006524:	690c      	ldr	r4, [r1, #16]
 8006526:	42a3      	cmp	r3, r4
 8006528:	4607      	mov	r7, r0
 800652a:	db7e      	blt.n	800662a <quorem+0x10c>
 800652c:	3c01      	subs	r4, #1
 800652e:	f101 0814 	add.w	r8, r1, #20
 8006532:	f100 0514 	add.w	r5, r0, #20
 8006536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006540:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006544:	3301      	adds	r3, #1
 8006546:	429a      	cmp	r2, r3
 8006548:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800654c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006550:	fbb2 f6f3 	udiv	r6, r2, r3
 8006554:	d331      	bcc.n	80065ba <quorem+0x9c>
 8006556:	f04f 0e00 	mov.w	lr, #0
 800655a:	4640      	mov	r0, r8
 800655c:	46ac      	mov	ip, r5
 800655e:	46f2      	mov	sl, lr
 8006560:	f850 2b04 	ldr.w	r2, [r0], #4
 8006564:	b293      	uxth	r3, r2
 8006566:	fb06 e303 	mla	r3, r6, r3, lr
 800656a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800656e:	0c1a      	lsrs	r2, r3, #16
 8006570:	b29b      	uxth	r3, r3
 8006572:	ebaa 0303 	sub.w	r3, sl, r3
 8006576:	f8dc a000 	ldr.w	sl, [ip]
 800657a:	fa13 f38a 	uxtah	r3, r3, sl
 800657e:	fb06 220e 	mla	r2, r6, lr, r2
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800658a:	b292      	uxth	r2, r2
 800658c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006594:	f8bd 3000 	ldrh.w	r3, [sp]
 8006598:	4581      	cmp	r9, r0
 800659a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800659e:	f84c 3b04 	str.w	r3, [ip], #4
 80065a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065a6:	d2db      	bcs.n	8006560 <quorem+0x42>
 80065a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80065ac:	b92b      	cbnz	r3, 80065ba <quorem+0x9c>
 80065ae:	9b01      	ldr	r3, [sp, #4]
 80065b0:	3b04      	subs	r3, #4
 80065b2:	429d      	cmp	r5, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	d32c      	bcc.n	8006612 <quorem+0xf4>
 80065b8:	613c      	str	r4, [r7, #16]
 80065ba:	4638      	mov	r0, r7
 80065bc:	f001 f9a6 	bl	800790c <__mcmp>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	db22      	blt.n	800660a <quorem+0xec>
 80065c4:	3601      	adds	r6, #1
 80065c6:	4629      	mov	r1, r5
 80065c8:	2000      	movs	r0, #0
 80065ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80065ce:	f8d1 c000 	ldr.w	ip, [r1]
 80065d2:	b293      	uxth	r3, r2
 80065d4:	1ac3      	subs	r3, r0, r3
 80065d6:	0c12      	lsrs	r2, r2, #16
 80065d8:	fa13 f38c 	uxtah	r3, r3, ip
 80065dc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80065e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065ea:	45c1      	cmp	r9, r8
 80065ec:	f841 3b04 	str.w	r3, [r1], #4
 80065f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065f4:	d2e9      	bcs.n	80065ca <quorem+0xac>
 80065f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065fe:	b922      	cbnz	r2, 800660a <quorem+0xec>
 8006600:	3b04      	subs	r3, #4
 8006602:	429d      	cmp	r5, r3
 8006604:	461a      	mov	r2, r3
 8006606:	d30a      	bcc.n	800661e <quorem+0x100>
 8006608:	613c      	str	r4, [r7, #16]
 800660a:	4630      	mov	r0, r6
 800660c:	b003      	add	sp, #12
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	3b04      	subs	r3, #4
 8006616:	2a00      	cmp	r2, #0
 8006618:	d1ce      	bne.n	80065b8 <quorem+0x9a>
 800661a:	3c01      	subs	r4, #1
 800661c:	e7c9      	b.n	80065b2 <quorem+0x94>
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	3b04      	subs	r3, #4
 8006622:	2a00      	cmp	r2, #0
 8006624:	d1f0      	bne.n	8006608 <quorem+0xea>
 8006626:	3c01      	subs	r4, #1
 8006628:	e7eb      	b.n	8006602 <quorem+0xe4>
 800662a:	2000      	movs	r0, #0
 800662c:	e7ee      	b.n	800660c <quorem+0xee>
	...

08006630 <_dtoa_r>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	ed2d 8b04 	vpush	{d8-d9}
 8006638:	69c5      	ldr	r5, [r0, #28]
 800663a:	b093      	sub	sp, #76	; 0x4c
 800663c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006640:	ec57 6b10 	vmov	r6, r7, d0
 8006644:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006648:	9107      	str	r1, [sp, #28]
 800664a:	4604      	mov	r4, r0
 800664c:	920a      	str	r2, [sp, #40]	; 0x28
 800664e:	930d      	str	r3, [sp, #52]	; 0x34
 8006650:	b975      	cbnz	r5, 8006670 <_dtoa_r+0x40>
 8006652:	2010      	movs	r0, #16
 8006654:	f000 fe2a 	bl	80072ac <malloc>
 8006658:	4602      	mov	r2, r0
 800665a:	61e0      	str	r0, [r4, #28]
 800665c:	b920      	cbnz	r0, 8006668 <_dtoa_r+0x38>
 800665e:	4bae      	ldr	r3, [pc, #696]	; (8006918 <_dtoa_r+0x2e8>)
 8006660:	21ef      	movs	r1, #239	; 0xef
 8006662:	48ae      	ldr	r0, [pc, #696]	; (800691c <_dtoa_r+0x2ec>)
 8006664:	f001 fc82 	bl	8007f6c <__assert_func>
 8006668:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800666c:	6005      	str	r5, [r0, #0]
 800666e:	60c5      	str	r5, [r0, #12]
 8006670:	69e3      	ldr	r3, [r4, #28]
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	b151      	cbz	r1, 800668c <_dtoa_r+0x5c>
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	604a      	str	r2, [r1, #4]
 800667a:	2301      	movs	r3, #1
 800667c:	4093      	lsls	r3, r2
 800667e:	608b      	str	r3, [r1, #8]
 8006680:	4620      	mov	r0, r4
 8006682:	f000 ff07 	bl	8007494 <_Bfree>
 8006686:	69e3      	ldr	r3, [r4, #28]
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	1e3b      	subs	r3, r7, #0
 800668e:	bfbb      	ittet	lt
 8006690:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006694:	9303      	strlt	r3, [sp, #12]
 8006696:	2300      	movge	r3, #0
 8006698:	2201      	movlt	r2, #1
 800669a:	bfac      	ite	ge
 800669c:	f8c8 3000 	strge.w	r3, [r8]
 80066a0:	f8c8 2000 	strlt.w	r2, [r8]
 80066a4:	4b9e      	ldr	r3, [pc, #632]	; (8006920 <_dtoa_r+0x2f0>)
 80066a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80066aa:	ea33 0308 	bics.w	r3, r3, r8
 80066ae:	d11b      	bne.n	80066e8 <_dtoa_r+0xb8>
 80066b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80066bc:	4333      	orrs	r3, r6
 80066be:	f000 8593 	beq.w	80071e8 <_dtoa_r+0xbb8>
 80066c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066c4:	b963      	cbnz	r3, 80066e0 <_dtoa_r+0xb0>
 80066c6:	4b97      	ldr	r3, [pc, #604]	; (8006924 <_dtoa_r+0x2f4>)
 80066c8:	e027      	b.n	800671a <_dtoa_r+0xea>
 80066ca:	4b97      	ldr	r3, [pc, #604]	; (8006928 <_dtoa_r+0x2f8>)
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	3308      	adds	r3, #8
 80066d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	9800      	ldr	r0, [sp, #0]
 80066d6:	b013      	add	sp, #76	; 0x4c
 80066d8:	ecbd 8b04 	vpop	{d8-d9}
 80066dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e0:	4b90      	ldr	r3, [pc, #576]	; (8006924 <_dtoa_r+0x2f4>)
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	3303      	adds	r3, #3
 80066e6:	e7f3      	b.n	80066d0 <_dtoa_r+0xa0>
 80066e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066ec:	2200      	movs	r2, #0
 80066ee:	ec51 0b17 	vmov	r0, r1, d7
 80066f2:	eeb0 8a47 	vmov.f32	s16, s14
 80066f6:	eef0 8a67 	vmov.f32	s17, s15
 80066fa:	2300      	movs	r3, #0
 80066fc:	f7fa f9ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8006700:	4681      	mov	r9, r0
 8006702:	b160      	cbz	r0, 800671e <_dtoa_r+0xee>
 8006704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006706:	2301      	movs	r3, #1
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8568 	beq.w	80071e2 <_dtoa_r+0xbb2>
 8006712:	4b86      	ldr	r3, [pc, #536]	; (800692c <_dtoa_r+0x2fc>)
 8006714:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	3b01      	subs	r3, #1
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	e7da      	b.n	80066d4 <_dtoa_r+0xa4>
 800671e:	aa10      	add	r2, sp, #64	; 0x40
 8006720:	a911      	add	r1, sp, #68	; 0x44
 8006722:	4620      	mov	r0, r4
 8006724:	eeb0 0a48 	vmov.f32	s0, s16
 8006728:	eef0 0a68 	vmov.f32	s1, s17
 800672c:	f001 f994 	bl	8007a58 <__d2b>
 8006730:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006734:	4682      	mov	sl, r0
 8006736:	2d00      	cmp	r5, #0
 8006738:	d07f      	beq.n	800683a <_dtoa_r+0x20a>
 800673a:	ee18 3a90 	vmov	r3, s17
 800673e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006742:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006746:	ec51 0b18 	vmov	r0, r1, d8
 800674a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800674e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006752:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006756:	4619      	mov	r1, r3
 8006758:	2200      	movs	r2, #0
 800675a:	4b75      	ldr	r3, [pc, #468]	; (8006930 <_dtoa_r+0x300>)
 800675c:	f7f9 fd9c 	bl	8000298 <__aeabi_dsub>
 8006760:	a367      	add	r3, pc, #412	; (adr r3, 8006900 <_dtoa_r+0x2d0>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 ff4f 	bl	8000608 <__aeabi_dmul>
 800676a:	a367      	add	r3, pc, #412	; (adr r3, 8006908 <_dtoa_r+0x2d8>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f7f9 fd94 	bl	800029c <__adddf3>
 8006774:	4606      	mov	r6, r0
 8006776:	4628      	mov	r0, r5
 8006778:	460f      	mov	r7, r1
 800677a:	f7f9 fedb 	bl	8000534 <__aeabi_i2d>
 800677e:	a364      	add	r3, pc, #400	; (adr r3, 8006910 <_dtoa_r+0x2e0>)
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7f9 ff40 	bl	8000608 <__aeabi_dmul>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4630      	mov	r0, r6
 800678e:	4639      	mov	r1, r7
 8006790:	f7f9 fd84 	bl	800029c <__adddf3>
 8006794:	4606      	mov	r6, r0
 8006796:	460f      	mov	r7, r1
 8006798:	f7fa f9e6 	bl	8000b68 <__aeabi_d2iz>
 800679c:	2200      	movs	r2, #0
 800679e:	4683      	mov	fp, r0
 80067a0:	2300      	movs	r3, #0
 80067a2:	4630      	mov	r0, r6
 80067a4:	4639      	mov	r1, r7
 80067a6:	f7fa f9a1 	bl	8000aec <__aeabi_dcmplt>
 80067aa:	b148      	cbz	r0, 80067c0 <_dtoa_r+0x190>
 80067ac:	4658      	mov	r0, fp
 80067ae:	f7f9 fec1 	bl	8000534 <__aeabi_i2d>
 80067b2:	4632      	mov	r2, r6
 80067b4:	463b      	mov	r3, r7
 80067b6:	f7fa f98f 	bl	8000ad8 <__aeabi_dcmpeq>
 80067ba:	b908      	cbnz	r0, 80067c0 <_dtoa_r+0x190>
 80067bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067c0:	f1bb 0f16 	cmp.w	fp, #22
 80067c4:	d857      	bhi.n	8006876 <_dtoa_r+0x246>
 80067c6:	4b5b      	ldr	r3, [pc, #364]	; (8006934 <_dtoa_r+0x304>)
 80067c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	ec51 0b18 	vmov	r0, r1, d8
 80067d4:	f7fa f98a 	bl	8000aec <__aeabi_dcmplt>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d04e      	beq.n	800687a <_dtoa_r+0x24a>
 80067dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067e0:	2300      	movs	r3, #0
 80067e2:	930c      	str	r3, [sp, #48]	; 0x30
 80067e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067e6:	1b5b      	subs	r3, r3, r5
 80067e8:	1e5a      	subs	r2, r3, #1
 80067ea:	bf45      	ittet	mi
 80067ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80067f0:	9305      	strmi	r3, [sp, #20]
 80067f2:	2300      	movpl	r3, #0
 80067f4:	2300      	movmi	r3, #0
 80067f6:	9206      	str	r2, [sp, #24]
 80067f8:	bf54      	ite	pl
 80067fa:	9305      	strpl	r3, [sp, #20]
 80067fc:	9306      	strmi	r3, [sp, #24]
 80067fe:	f1bb 0f00 	cmp.w	fp, #0
 8006802:	db3c      	blt.n	800687e <_dtoa_r+0x24e>
 8006804:	9b06      	ldr	r3, [sp, #24]
 8006806:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800680a:	445b      	add	r3, fp
 800680c:	9306      	str	r3, [sp, #24]
 800680e:	2300      	movs	r3, #0
 8006810:	9308      	str	r3, [sp, #32]
 8006812:	9b07      	ldr	r3, [sp, #28]
 8006814:	2b09      	cmp	r3, #9
 8006816:	d868      	bhi.n	80068ea <_dtoa_r+0x2ba>
 8006818:	2b05      	cmp	r3, #5
 800681a:	bfc4      	itt	gt
 800681c:	3b04      	subgt	r3, #4
 800681e:	9307      	strgt	r3, [sp, #28]
 8006820:	9b07      	ldr	r3, [sp, #28]
 8006822:	f1a3 0302 	sub.w	r3, r3, #2
 8006826:	bfcc      	ite	gt
 8006828:	2500      	movgt	r5, #0
 800682a:	2501      	movle	r5, #1
 800682c:	2b03      	cmp	r3, #3
 800682e:	f200 8085 	bhi.w	800693c <_dtoa_r+0x30c>
 8006832:	e8df f003 	tbb	[pc, r3]
 8006836:	3b2e      	.short	0x3b2e
 8006838:	5839      	.short	0x5839
 800683a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800683e:	441d      	add	r5, r3
 8006840:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006844:	2b20      	cmp	r3, #32
 8006846:	bfc1      	itttt	gt
 8006848:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800684c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006850:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006854:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006858:	bfd6      	itet	le
 800685a:	f1c3 0320 	rsble	r3, r3, #32
 800685e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006862:	fa06 f003 	lslle.w	r0, r6, r3
 8006866:	f7f9 fe55 	bl	8000514 <__aeabi_ui2d>
 800686a:	2201      	movs	r2, #1
 800686c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006870:	3d01      	subs	r5, #1
 8006872:	920e      	str	r2, [sp, #56]	; 0x38
 8006874:	e76f      	b.n	8006756 <_dtoa_r+0x126>
 8006876:	2301      	movs	r3, #1
 8006878:	e7b3      	b.n	80067e2 <_dtoa_r+0x1b2>
 800687a:	900c      	str	r0, [sp, #48]	; 0x30
 800687c:	e7b2      	b.n	80067e4 <_dtoa_r+0x1b4>
 800687e:	9b05      	ldr	r3, [sp, #20]
 8006880:	eba3 030b 	sub.w	r3, r3, fp
 8006884:	9305      	str	r3, [sp, #20]
 8006886:	f1cb 0300 	rsb	r3, fp, #0
 800688a:	9308      	str	r3, [sp, #32]
 800688c:	2300      	movs	r3, #0
 800688e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006890:	e7bf      	b.n	8006812 <_dtoa_r+0x1e2>
 8006892:	2300      	movs	r3, #0
 8006894:	9309      	str	r3, [sp, #36]	; 0x24
 8006896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006898:	2b00      	cmp	r3, #0
 800689a:	dc52      	bgt.n	8006942 <_dtoa_r+0x312>
 800689c:	2301      	movs	r3, #1
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	461a      	mov	r2, r3
 80068a4:	920a      	str	r2, [sp, #40]	; 0x28
 80068a6:	e00b      	b.n	80068c0 <_dtoa_r+0x290>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e7f3      	b.n	8006894 <_dtoa_r+0x264>
 80068ac:	2300      	movs	r3, #0
 80068ae:	9309      	str	r3, [sp, #36]	; 0x24
 80068b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b2:	445b      	add	r3, fp
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	3301      	adds	r3, #1
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	9304      	str	r3, [sp, #16]
 80068bc:	bfb8      	it	lt
 80068be:	2301      	movlt	r3, #1
 80068c0:	69e0      	ldr	r0, [r4, #28]
 80068c2:	2100      	movs	r1, #0
 80068c4:	2204      	movs	r2, #4
 80068c6:	f102 0614 	add.w	r6, r2, #20
 80068ca:	429e      	cmp	r6, r3
 80068cc:	d93d      	bls.n	800694a <_dtoa_r+0x31a>
 80068ce:	6041      	str	r1, [r0, #4]
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 fd9f 	bl	8007414 <_Balloc>
 80068d6:	9000      	str	r0, [sp, #0]
 80068d8:	2800      	cmp	r0, #0
 80068da:	d139      	bne.n	8006950 <_dtoa_r+0x320>
 80068dc:	4b16      	ldr	r3, [pc, #88]	; (8006938 <_dtoa_r+0x308>)
 80068de:	4602      	mov	r2, r0
 80068e0:	f240 11af 	movw	r1, #431	; 0x1af
 80068e4:	e6bd      	b.n	8006662 <_dtoa_r+0x32>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e7e1      	b.n	80068ae <_dtoa_r+0x27e>
 80068ea:	2501      	movs	r5, #1
 80068ec:	2300      	movs	r3, #0
 80068ee:	9307      	str	r3, [sp, #28]
 80068f0:	9509      	str	r5, [sp, #36]	; 0x24
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	9304      	str	r3, [sp, #16]
 80068fa:	2200      	movs	r2, #0
 80068fc:	2312      	movs	r3, #18
 80068fe:	e7d1      	b.n	80068a4 <_dtoa_r+0x274>
 8006900:	636f4361 	.word	0x636f4361
 8006904:	3fd287a7 	.word	0x3fd287a7
 8006908:	8b60c8b3 	.word	0x8b60c8b3
 800690c:	3fc68a28 	.word	0x3fc68a28
 8006910:	509f79fb 	.word	0x509f79fb
 8006914:	3fd34413 	.word	0x3fd34413
 8006918:	0800896d 	.word	0x0800896d
 800691c:	08008984 	.word	0x08008984
 8006920:	7ff00000 	.word	0x7ff00000
 8006924:	08008969 	.word	0x08008969
 8006928:	08008960 	.word	0x08008960
 800692c:	0800893d 	.word	0x0800893d
 8006930:	3ff80000 	.word	0x3ff80000
 8006934:	08008a70 	.word	0x08008a70
 8006938:	080089dc 	.word	0x080089dc
 800693c:	2301      	movs	r3, #1
 800693e:	9309      	str	r3, [sp, #36]	; 0x24
 8006940:	e7d7      	b.n	80068f2 <_dtoa_r+0x2c2>
 8006942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	9304      	str	r3, [sp, #16]
 8006948:	e7ba      	b.n	80068c0 <_dtoa_r+0x290>
 800694a:	3101      	adds	r1, #1
 800694c:	0052      	lsls	r2, r2, #1
 800694e:	e7ba      	b.n	80068c6 <_dtoa_r+0x296>
 8006950:	69e3      	ldr	r3, [r4, #28]
 8006952:	9a00      	ldr	r2, [sp, #0]
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	9b04      	ldr	r3, [sp, #16]
 8006958:	2b0e      	cmp	r3, #14
 800695a:	f200 80a8 	bhi.w	8006aae <_dtoa_r+0x47e>
 800695e:	2d00      	cmp	r5, #0
 8006960:	f000 80a5 	beq.w	8006aae <_dtoa_r+0x47e>
 8006964:	f1bb 0f00 	cmp.w	fp, #0
 8006968:	dd38      	ble.n	80069dc <_dtoa_r+0x3ac>
 800696a:	4bc0      	ldr	r3, [pc, #768]	; (8006c6c <_dtoa_r+0x63c>)
 800696c:	f00b 020f 	and.w	r2, fp, #15
 8006970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006974:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006978:	e9d3 6700 	ldrd	r6, r7, [r3]
 800697c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006980:	d019      	beq.n	80069b6 <_dtoa_r+0x386>
 8006982:	4bbb      	ldr	r3, [pc, #748]	; (8006c70 <_dtoa_r+0x640>)
 8006984:	ec51 0b18 	vmov	r0, r1, d8
 8006988:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800698c:	f7f9 ff66 	bl	800085c <__aeabi_ddiv>
 8006990:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006994:	f008 080f 	and.w	r8, r8, #15
 8006998:	2503      	movs	r5, #3
 800699a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006c70 <_dtoa_r+0x640>
 800699e:	f1b8 0f00 	cmp.w	r8, #0
 80069a2:	d10a      	bne.n	80069ba <_dtoa_r+0x38a>
 80069a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a8:	4632      	mov	r2, r6
 80069aa:	463b      	mov	r3, r7
 80069ac:	f7f9 ff56 	bl	800085c <__aeabi_ddiv>
 80069b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069b4:	e02b      	b.n	8006a0e <_dtoa_r+0x3de>
 80069b6:	2502      	movs	r5, #2
 80069b8:	e7ef      	b.n	800699a <_dtoa_r+0x36a>
 80069ba:	f018 0f01 	tst.w	r8, #1
 80069be:	d008      	beq.n	80069d2 <_dtoa_r+0x3a2>
 80069c0:	4630      	mov	r0, r6
 80069c2:	4639      	mov	r1, r7
 80069c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069c8:	f7f9 fe1e 	bl	8000608 <__aeabi_dmul>
 80069cc:	3501      	adds	r5, #1
 80069ce:	4606      	mov	r6, r0
 80069d0:	460f      	mov	r7, r1
 80069d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069d6:	f109 0908 	add.w	r9, r9, #8
 80069da:	e7e0      	b.n	800699e <_dtoa_r+0x36e>
 80069dc:	f000 809f 	beq.w	8006b1e <_dtoa_r+0x4ee>
 80069e0:	f1cb 0600 	rsb	r6, fp, #0
 80069e4:	4ba1      	ldr	r3, [pc, #644]	; (8006c6c <_dtoa_r+0x63c>)
 80069e6:	4fa2      	ldr	r7, [pc, #648]	; (8006c70 <_dtoa_r+0x640>)
 80069e8:	f006 020f 	and.w	r2, r6, #15
 80069ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	ec51 0b18 	vmov	r0, r1, d8
 80069f8:	f7f9 fe06 	bl	8000608 <__aeabi_dmul>
 80069fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a00:	1136      	asrs	r6, r6, #4
 8006a02:	2300      	movs	r3, #0
 8006a04:	2502      	movs	r5, #2
 8006a06:	2e00      	cmp	r6, #0
 8006a08:	d17e      	bne.n	8006b08 <_dtoa_r+0x4d8>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1d0      	bne.n	80069b0 <_dtoa_r+0x380>
 8006a0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8084 	beq.w	8006b22 <_dtoa_r+0x4f2>
 8006a1a:	4b96      	ldr	r3, [pc, #600]	; (8006c74 <_dtoa_r+0x644>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4649      	mov	r1, r9
 8006a22:	f7fa f863 	bl	8000aec <__aeabi_dcmplt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d07b      	beq.n	8006b22 <_dtoa_r+0x4f2>
 8006a2a:	9b04      	ldr	r3, [sp, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d078      	beq.n	8006b22 <_dtoa_r+0x4f2>
 8006a30:	9b01      	ldr	r3, [sp, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	dd39      	ble.n	8006aaa <_dtoa_r+0x47a>
 8006a36:	4b90      	ldr	r3, [pc, #576]	; (8006c78 <_dtoa_r+0x648>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	f7f9 fde3 	bl	8000608 <__aeabi_dmul>
 8006a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a46:	9e01      	ldr	r6, [sp, #4]
 8006a48:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a52:	4628      	mov	r0, r5
 8006a54:	f7f9 fd6e 	bl	8000534 <__aeabi_i2d>
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	f7f9 fdd4 	bl	8000608 <__aeabi_dmul>
 8006a60:	4b86      	ldr	r3, [pc, #536]	; (8006c7c <_dtoa_r+0x64c>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	f7f9 fc1a 	bl	800029c <__adddf3>
 8006a68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a70:	9303      	str	r3, [sp, #12]
 8006a72:	2e00      	cmp	r6, #0
 8006a74:	d158      	bne.n	8006b28 <_dtoa_r+0x4f8>
 8006a76:	4b82      	ldr	r3, [pc, #520]	; (8006c80 <_dtoa_r+0x650>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	f7f9 fc0b 	bl	8000298 <__aeabi_dsub>
 8006a82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a86:	4680      	mov	r8, r0
 8006a88:	4689      	mov	r9, r1
 8006a8a:	f7fa f84d 	bl	8000b28 <__aeabi_dcmpgt>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f040 8296 	bne.w	8006fc0 <_dtoa_r+0x990>
 8006a94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a98:	4640      	mov	r0, r8
 8006a9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7fa f824 	bl	8000aec <__aeabi_dcmplt>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	f040 8289 	bne.w	8006fbc <_dtoa_r+0x98c>
 8006aaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f2c0 814e 	blt.w	8006d52 <_dtoa_r+0x722>
 8006ab6:	f1bb 0f0e 	cmp.w	fp, #14
 8006aba:	f300 814a 	bgt.w	8006d52 <_dtoa_r+0x722>
 8006abe:	4b6b      	ldr	r3, [pc, #428]	; (8006c6c <_dtoa_r+0x63c>)
 8006ac0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ac4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f280 80dc 	bge.w	8006c88 <_dtoa_r+0x658>
 8006ad0:	9b04      	ldr	r3, [sp, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f300 80d8 	bgt.w	8006c88 <_dtoa_r+0x658>
 8006ad8:	f040 826f 	bne.w	8006fba <_dtoa_r+0x98a>
 8006adc:	4b68      	ldr	r3, [pc, #416]	; (8006c80 <_dtoa_r+0x650>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	f7f9 fd90 	bl	8000608 <__aeabi_dmul>
 8006ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aec:	f7fa f812 	bl	8000b14 <__aeabi_dcmpge>
 8006af0:	9e04      	ldr	r6, [sp, #16]
 8006af2:	4637      	mov	r7, r6
 8006af4:	2800      	cmp	r0, #0
 8006af6:	f040 8245 	bne.w	8006f84 <_dtoa_r+0x954>
 8006afa:	9d00      	ldr	r5, [sp, #0]
 8006afc:	2331      	movs	r3, #49	; 0x31
 8006afe:	f805 3b01 	strb.w	r3, [r5], #1
 8006b02:	f10b 0b01 	add.w	fp, fp, #1
 8006b06:	e241      	b.n	8006f8c <_dtoa_r+0x95c>
 8006b08:	07f2      	lsls	r2, r6, #31
 8006b0a:	d505      	bpl.n	8006b18 <_dtoa_r+0x4e8>
 8006b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b10:	f7f9 fd7a 	bl	8000608 <__aeabi_dmul>
 8006b14:	3501      	adds	r5, #1
 8006b16:	2301      	movs	r3, #1
 8006b18:	1076      	asrs	r6, r6, #1
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	e773      	b.n	8006a06 <_dtoa_r+0x3d6>
 8006b1e:	2502      	movs	r5, #2
 8006b20:	e775      	b.n	8006a0e <_dtoa_r+0x3de>
 8006b22:	9e04      	ldr	r6, [sp, #16]
 8006b24:	465f      	mov	r7, fp
 8006b26:	e792      	b.n	8006a4e <_dtoa_r+0x41e>
 8006b28:	9900      	ldr	r1, [sp, #0]
 8006b2a:	4b50      	ldr	r3, [pc, #320]	; (8006c6c <_dtoa_r+0x63c>)
 8006b2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b30:	4431      	add	r1, r6
 8006b32:	9102      	str	r1, [sp, #8]
 8006b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b36:	eeb0 9a47 	vmov.f32	s18, s14
 8006b3a:	eef0 9a67 	vmov.f32	s19, s15
 8006b3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b46:	2900      	cmp	r1, #0
 8006b48:	d044      	beq.n	8006bd4 <_dtoa_r+0x5a4>
 8006b4a:	494e      	ldr	r1, [pc, #312]	; (8006c84 <_dtoa_r+0x654>)
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	f7f9 fe85 	bl	800085c <__aeabi_ddiv>
 8006b52:	ec53 2b19 	vmov	r2, r3, d9
 8006b56:	f7f9 fb9f 	bl	8000298 <__aeabi_dsub>
 8006b5a:	9d00      	ldr	r5, [sp, #0]
 8006b5c:	ec41 0b19 	vmov	d9, r0, r1
 8006b60:	4649      	mov	r1, r9
 8006b62:	4640      	mov	r0, r8
 8006b64:	f7fa f800 	bl	8000b68 <__aeabi_d2iz>
 8006b68:	4606      	mov	r6, r0
 8006b6a:	f7f9 fce3 	bl	8000534 <__aeabi_i2d>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4640      	mov	r0, r8
 8006b74:	4649      	mov	r1, r9
 8006b76:	f7f9 fb8f 	bl	8000298 <__aeabi_dsub>
 8006b7a:	3630      	adds	r6, #48	; 0x30
 8006b7c:	f805 6b01 	strb.w	r6, [r5], #1
 8006b80:	ec53 2b19 	vmov	r2, r3, d9
 8006b84:	4680      	mov	r8, r0
 8006b86:	4689      	mov	r9, r1
 8006b88:	f7f9 ffb0 	bl	8000aec <__aeabi_dcmplt>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d164      	bne.n	8006c5a <_dtoa_r+0x62a>
 8006b90:	4642      	mov	r2, r8
 8006b92:	464b      	mov	r3, r9
 8006b94:	4937      	ldr	r1, [pc, #220]	; (8006c74 <_dtoa_r+0x644>)
 8006b96:	2000      	movs	r0, #0
 8006b98:	f7f9 fb7e 	bl	8000298 <__aeabi_dsub>
 8006b9c:	ec53 2b19 	vmov	r2, r3, d9
 8006ba0:	f7f9 ffa4 	bl	8000aec <__aeabi_dcmplt>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	f040 80b6 	bne.w	8006d16 <_dtoa_r+0x6e6>
 8006baa:	9b02      	ldr	r3, [sp, #8]
 8006bac:	429d      	cmp	r5, r3
 8006bae:	f43f af7c 	beq.w	8006aaa <_dtoa_r+0x47a>
 8006bb2:	4b31      	ldr	r3, [pc, #196]	; (8006c78 <_dtoa_r+0x648>)
 8006bb4:	ec51 0b19 	vmov	r0, r1, d9
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f7f9 fd25 	bl	8000608 <__aeabi_dmul>
 8006bbe:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <_dtoa_r+0x648>)
 8006bc0:	ec41 0b19 	vmov	d9, r0, r1
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	4649      	mov	r1, r9
 8006bca:	f7f9 fd1d 	bl	8000608 <__aeabi_dmul>
 8006bce:	4680      	mov	r8, r0
 8006bd0:	4689      	mov	r9, r1
 8006bd2:	e7c5      	b.n	8006b60 <_dtoa_r+0x530>
 8006bd4:	ec51 0b17 	vmov	r0, r1, d7
 8006bd8:	f7f9 fd16 	bl	8000608 <__aeabi_dmul>
 8006bdc:	9b02      	ldr	r3, [sp, #8]
 8006bde:	9d00      	ldr	r5, [sp, #0]
 8006be0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006be2:	ec41 0b19 	vmov	d9, r0, r1
 8006be6:	4649      	mov	r1, r9
 8006be8:	4640      	mov	r0, r8
 8006bea:	f7f9 ffbd 	bl	8000b68 <__aeabi_d2iz>
 8006bee:	4606      	mov	r6, r0
 8006bf0:	f7f9 fca0 	bl	8000534 <__aeabi_i2d>
 8006bf4:	3630      	adds	r6, #48	; 0x30
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	f7f9 fb4b 	bl	8000298 <__aeabi_dsub>
 8006c02:	f805 6b01 	strb.w	r6, [r5], #1
 8006c06:	9b02      	ldr	r3, [sp, #8]
 8006c08:	429d      	cmp	r5, r3
 8006c0a:	4680      	mov	r8, r0
 8006c0c:	4689      	mov	r9, r1
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	d124      	bne.n	8006c5e <_dtoa_r+0x62e>
 8006c14:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <_dtoa_r+0x654>)
 8006c16:	ec51 0b19 	vmov	r0, r1, d9
 8006c1a:	f7f9 fb3f 	bl	800029c <__adddf3>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 ff7f 	bl	8000b28 <__aeabi_dcmpgt>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d173      	bne.n	8006d16 <_dtoa_r+0x6e6>
 8006c2e:	ec53 2b19 	vmov	r2, r3, d9
 8006c32:	4914      	ldr	r1, [pc, #80]	; (8006c84 <_dtoa_r+0x654>)
 8006c34:	2000      	movs	r0, #0
 8006c36:	f7f9 fb2f 	bl	8000298 <__aeabi_dsub>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4640      	mov	r0, r8
 8006c40:	4649      	mov	r1, r9
 8006c42:	f7f9 ff53 	bl	8000aec <__aeabi_dcmplt>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f43f af2f 	beq.w	8006aaa <_dtoa_r+0x47a>
 8006c4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c4e:	1e6b      	subs	r3, r5, #1
 8006c50:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c56:	2b30      	cmp	r3, #48	; 0x30
 8006c58:	d0f8      	beq.n	8006c4c <_dtoa_r+0x61c>
 8006c5a:	46bb      	mov	fp, r7
 8006c5c:	e04a      	b.n	8006cf4 <_dtoa_r+0x6c4>
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <_dtoa_r+0x648>)
 8006c60:	f7f9 fcd2 	bl	8000608 <__aeabi_dmul>
 8006c64:	4680      	mov	r8, r0
 8006c66:	4689      	mov	r9, r1
 8006c68:	e7bd      	b.n	8006be6 <_dtoa_r+0x5b6>
 8006c6a:	bf00      	nop
 8006c6c:	08008a70 	.word	0x08008a70
 8006c70:	08008a48 	.word	0x08008a48
 8006c74:	3ff00000 	.word	0x3ff00000
 8006c78:	40240000 	.word	0x40240000
 8006c7c:	401c0000 	.word	0x401c0000
 8006c80:	40140000 	.word	0x40140000
 8006c84:	3fe00000 	.word	0x3fe00000
 8006c88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c8c:	9d00      	ldr	r5, [sp, #0]
 8006c8e:	4642      	mov	r2, r8
 8006c90:	464b      	mov	r3, r9
 8006c92:	4630      	mov	r0, r6
 8006c94:	4639      	mov	r1, r7
 8006c96:	f7f9 fde1 	bl	800085c <__aeabi_ddiv>
 8006c9a:	f7f9 ff65 	bl	8000b68 <__aeabi_d2iz>
 8006c9e:	9001      	str	r0, [sp, #4]
 8006ca0:	f7f9 fc48 	bl	8000534 <__aeabi_i2d>
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	f7f9 fcae 	bl	8000608 <__aeabi_dmul>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	f7f9 faf0 	bl	8000298 <__aeabi_dsub>
 8006cb8:	9e01      	ldr	r6, [sp, #4]
 8006cba:	9f04      	ldr	r7, [sp, #16]
 8006cbc:	3630      	adds	r6, #48	; 0x30
 8006cbe:	f805 6b01 	strb.w	r6, [r5], #1
 8006cc2:	9e00      	ldr	r6, [sp, #0]
 8006cc4:	1bae      	subs	r6, r5, r6
 8006cc6:	42b7      	cmp	r7, r6
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	d134      	bne.n	8006d38 <_dtoa_r+0x708>
 8006cce:	f7f9 fae5 	bl	800029c <__adddf3>
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	460f      	mov	r7, r1
 8006cda:	f7f9 ff25 	bl	8000b28 <__aeabi_dcmpgt>
 8006cde:	b9c8      	cbnz	r0, 8006d14 <_dtoa_r+0x6e4>
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f7f9 fef6 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cec:	b110      	cbz	r0, 8006cf4 <_dtoa_r+0x6c4>
 8006cee:	9b01      	ldr	r3, [sp, #4]
 8006cf0:	07db      	lsls	r3, r3, #31
 8006cf2:	d40f      	bmi.n	8006d14 <_dtoa_r+0x6e4>
 8006cf4:	4651      	mov	r1, sl
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 fbcc 	bl	8007494 <_Bfree>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d00:	702b      	strb	r3, [r5, #0]
 8006d02:	f10b 0301 	add.w	r3, fp, #1
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f43f ace2 	beq.w	80066d4 <_dtoa_r+0xa4>
 8006d10:	601d      	str	r5, [r3, #0]
 8006d12:	e4df      	b.n	80066d4 <_dtoa_r+0xa4>
 8006d14:	465f      	mov	r7, fp
 8006d16:	462b      	mov	r3, r5
 8006d18:	461d      	mov	r5, r3
 8006d1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d1e:	2a39      	cmp	r2, #57	; 0x39
 8006d20:	d106      	bne.n	8006d30 <_dtoa_r+0x700>
 8006d22:	9a00      	ldr	r2, [sp, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d1f7      	bne.n	8006d18 <_dtoa_r+0x6e8>
 8006d28:	9900      	ldr	r1, [sp, #0]
 8006d2a:	2230      	movs	r2, #48	; 0x30
 8006d2c:	3701      	adds	r7, #1
 8006d2e:	700a      	strb	r2, [r1, #0]
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	3201      	adds	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	e790      	b.n	8006c5a <_dtoa_r+0x62a>
 8006d38:	4ba3      	ldr	r3, [pc, #652]	; (8006fc8 <_dtoa_r+0x998>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f7f9 fc64 	bl	8000608 <__aeabi_dmul>
 8006d40:	2200      	movs	r2, #0
 8006d42:	2300      	movs	r3, #0
 8006d44:	4606      	mov	r6, r0
 8006d46:	460f      	mov	r7, r1
 8006d48:	f7f9 fec6 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d09e      	beq.n	8006c8e <_dtoa_r+0x65e>
 8006d50:	e7d0      	b.n	8006cf4 <_dtoa_r+0x6c4>
 8006d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d54:	2a00      	cmp	r2, #0
 8006d56:	f000 80ca 	beq.w	8006eee <_dtoa_r+0x8be>
 8006d5a:	9a07      	ldr	r2, [sp, #28]
 8006d5c:	2a01      	cmp	r2, #1
 8006d5e:	f300 80ad 	bgt.w	8006ebc <_dtoa_r+0x88c>
 8006d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	f000 80a5 	beq.w	8006eb4 <_dtoa_r+0x884>
 8006d6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d6e:	9e08      	ldr	r6, [sp, #32]
 8006d70:	9d05      	ldr	r5, [sp, #20]
 8006d72:	9a05      	ldr	r2, [sp, #20]
 8006d74:	441a      	add	r2, r3
 8006d76:	9205      	str	r2, [sp, #20]
 8006d78:	9a06      	ldr	r2, [sp, #24]
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	441a      	add	r2, r3
 8006d7e:	4620      	mov	r0, r4
 8006d80:	9206      	str	r2, [sp, #24]
 8006d82:	f000 fc3d 	bl	8007600 <__i2b>
 8006d86:	4607      	mov	r7, r0
 8006d88:	b165      	cbz	r5, 8006da4 <_dtoa_r+0x774>
 8006d8a:	9b06      	ldr	r3, [sp, #24]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	dd09      	ble.n	8006da4 <_dtoa_r+0x774>
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	9a05      	ldr	r2, [sp, #20]
 8006d94:	bfa8      	it	ge
 8006d96:	462b      	movge	r3, r5
 8006d98:	1ad2      	subs	r2, r2, r3
 8006d9a:	9205      	str	r2, [sp, #20]
 8006d9c:	9a06      	ldr	r2, [sp, #24]
 8006d9e:	1aed      	subs	r5, r5, r3
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	9306      	str	r3, [sp, #24]
 8006da4:	9b08      	ldr	r3, [sp, #32]
 8006da6:	b1f3      	cbz	r3, 8006de6 <_dtoa_r+0x7b6>
 8006da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80a3 	beq.w	8006ef6 <_dtoa_r+0x8c6>
 8006db0:	2e00      	cmp	r6, #0
 8006db2:	dd10      	ble.n	8006dd6 <_dtoa_r+0x7a6>
 8006db4:	4639      	mov	r1, r7
 8006db6:	4632      	mov	r2, r6
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 fce1 	bl	8007780 <__pow5mult>
 8006dbe:	4652      	mov	r2, sl
 8006dc0:	4601      	mov	r1, r0
 8006dc2:	4607      	mov	r7, r0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 fc31 	bl	800762c <__multiply>
 8006dca:	4651      	mov	r1, sl
 8006dcc:	4680      	mov	r8, r0
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 fb60 	bl	8007494 <_Bfree>
 8006dd4:	46c2      	mov	sl, r8
 8006dd6:	9b08      	ldr	r3, [sp, #32]
 8006dd8:	1b9a      	subs	r2, r3, r6
 8006dda:	d004      	beq.n	8006de6 <_dtoa_r+0x7b6>
 8006ddc:	4651      	mov	r1, sl
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 fcce 	bl	8007780 <__pow5mult>
 8006de4:	4682      	mov	sl, r0
 8006de6:	2101      	movs	r1, #1
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fc09 	bl	8007600 <__i2b>
 8006dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	4606      	mov	r6, r0
 8006df4:	f340 8081 	ble.w	8006efa <_dtoa_r+0x8ca>
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 fcbf 	bl	8007780 <__pow5mult>
 8006e02:	9b07      	ldr	r3, [sp, #28]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	4606      	mov	r6, r0
 8006e08:	dd7a      	ble.n	8006f00 <_dtoa_r+0x8d0>
 8006e0a:	f04f 0800 	mov.w	r8, #0
 8006e0e:	6933      	ldr	r3, [r6, #16]
 8006e10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e14:	6918      	ldr	r0, [r3, #16]
 8006e16:	f000 fba5 	bl	8007564 <__hi0bits>
 8006e1a:	f1c0 0020 	rsb	r0, r0, #32
 8006e1e:	9b06      	ldr	r3, [sp, #24]
 8006e20:	4418      	add	r0, r3
 8006e22:	f010 001f 	ands.w	r0, r0, #31
 8006e26:	f000 8094 	beq.w	8006f52 <_dtoa_r+0x922>
 8006e2a:	f1c0 0320 	rsb	r3, r0, #32
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	f340 8085 	ble.w	8006f3e <_dtoa_r+0x90e>
 8006e34:	9b05      	ldr	r3, [sp, #20]
 8006e36:	f1c0 001c 	rsb	r0, r0, #28
 8006e3a:	4403      	add	r3, r0
 8006e3c:	9305      	str	r3, [sp, #20]
 8006e3e:	9b06      	ldr	r3, [sp, #24]
 8006e40:	4403      	add	r3, r0
 8006e42:	4405      	add	r5, r0
 8006e44:	9306      	str	r3, [sp, #24]
 8006e46:	9b05      	ldr	r3, [sp, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	dd05      	ble.n	8006e58 <_dtoa_r+0x828>
 8006e4c:	4651      	mov	r1, sl
 8006e4e:	461a      	mov	r2, r3
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fcef 	bl	8007834 <__lshift>
 8006e56:	4682      	mov	sl, r0
 8006e58:	9b06      	ldr	r3, [sp, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd05      	ble.n	8006e6a <_dtoa_r+0x83a>
 8006e5e:	4631      	mov	r1, r6
 8006e60:	461a      	mov	r2, r3
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 fce6 	bl	8007834 <__lshift>
 8006e68:	4606      	mov	r6, r0
 8006e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d072      	beq.n	8006f56 <_dtoa_r+0x926>
 8006e70:	4631      	mov	r1, r6
 8006e72:	4650      	mov	r0, sl
 8006e74:	f000 fd4a 	bl	800790c <__mcmp>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	da6c      	bge.n	8006f56 <_dtoa_r+0x926>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	4651      	mov	r1, sl
 8006e80:	220a      	movs	r2, #10
 8006e82:	4620      	mov	r0, r4
 8006e84:	f000 fb28 	bl	80074d8 <__multadd>
 8006e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e8e:	4682      	mov	sl, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 81b0 	beq.w	80071f6 <_dtoa_r+0xbc6>
 8006e96:	2300      	movs	r3, #0
 8006e98:	4639      	mov	r1, r7
 8006e9a:	220a      	movs	r2, #10
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 fb1b 	bl	80074d8 <__multadd>
 8006ea2:	9b01      	ldr	r3, [sp, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	f300 8096 	bgt.w	8006fd8 <_dtoa_r+0x9a8>
 8006eac:	9b07      	ldr	r3, [sp, #28]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	dc59      	bgt.n	8006f66 <_dtoa_r+0x936>
 8006eb2:	e091      	b.n	8006fd8 <_dtoa_r+0x9a8>
 8006eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eba:	e758      	b.n	8006d6e <_dtoa_r+0x73e>
 8006ebc:	9b04      	ldr	r3, [sp, #16]
 8006ebe:	1e5e      	subs	r6, r3, #1
 8006ec0:	9b08      	ldr	r3, [sp, #32]
 8006ec2:	42b3      	cmp	r3, r6
 8006ec4:	bfbf      	itttt	lt
 8006ec6:	9b08      	ldrlt	r3, [sp, #32]
 8006ec8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006eca:	9608      	strlt	r6, [sp, #32]
 8006ecc:	1af3      	sublt	r3, r6, r3
 8006ece:	bfb4      	ite	lt
 8006ed0:	18d2      	addlt	r2, r2, r3
 8006ed2:	1b9e      	subge	r6, r3, r6
 8006ed4:	9b04      	ldr	r3, [sp, #16]
 8006ed6:	bfbc      	itt	lt
 8006ed8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006eda:	2600      	movlt	r6, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bfb7      	itett	lt
 8006ee0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ee4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ee8:	1a9d      	sublt	r5, r3, r2
 8006eea:	2300      	movlt	r3, #0
 8006eec:	e741      	b.n	8006d72 <_dtoa_r+0x742>
 8006eee:	9e08      	ldr	r6, [sp, #32]
 8006ef0:	9d05      	ldr	r5, [sp, #20]
 8006ef2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ef4:	e748      	b.n	8006d88 <_dtoa_r+0x758>
 8006ef6:	9a08      	ldr	r2, [sp, #32]
 8006ef8:	e770      	b.n	8006ddc <_dtoa_r+0x7ac>
 8006efa:	9b07      	ldr	r3, [sp, #28]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	dc19      	bgt.n	8006f34 <_dtoa_r+0x904>
 8006f00:	9b02      	ldr	r3, [sp, #8]
 8006f02:	b9bb      	cbnz	r3, 8006f34 <_dtoa_r+0x904>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f0a:	b99b      	cbnz	r3, 8006f34 <_dtoa_r+0x904>
 8006f0c:	9b03      	ldr	r3, [sp, #12]
 8006f0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f12:	0d1b      	lsrs	r3, r3, #20
 8006f14:	051b      	lsls	r3, r3, #20
 8006f16:	b183      	cbz	r3, 8006f3a <_dtoa_r+0x90a>
 8006f18:	9b05      	ldr	r3, [sp, #20]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	9305      	str	r3, [sp, #20]
 8006f1e:	9b06      	ldr	r3, [sp, #24]
 8006f20:	3301      	adds	r3, #1
 8006f22:	9306      	str	r3, [sp, #24]
 8006f24:	f04f 0801 	mov.w	r8, #1
 8006f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f47f af6f 	bne.w	8006e0e <_dtoa_r+0x7de>
 8006f30:	2001      	movs	r0, #1
 8006f32:	e774      	b.n	8006e1e <_dtoa_r+0x7ee>
 8006f34:	f04f 0800 	mov.w	r8, #0
 8006f38:	e7f6      	b.n	8006f28 <_dtoa_r+0x8f8>
 8006f3a:	4698      	mov	r8, r3
 8006f3c:	e7f4      	b.n	8006f28 <_dtoa_r+0x8f8>
 8006f3e:	d082      	beq.n	8006e46 <_dtoa_r+0x816>
 8006f40:	9a05      	ldr	r2, [sp, #20]
 8006f42:	331c      	adds	r3, #28
 8006f44:	441a      	add	r2, r3
 8006f46:	9205      	str	r2, [sp, #20]
 8006f48:	9a06      	ldr	r2, [sp, #24]
 8006f4a:	441a      	add	r2, r3
 8006f4c:	441d      	add	r5, r3
 8006f4e:	9206      	str	r2, [sp, #24]
 8006f50:	e779      	b.n	8006e46 <_dtoa_r+0x816>
 8006f52:	4603      	mov	r3, r0
 8006f54:	e7f4      	b.n	8006f40 <_dtoa_r+0x910>
 8006f56:	9b04      	ldr	r3, [sp, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	dc37      	bgt.n	8006fcc <_dtoa_r+0x99c>
 8006f5c:	9b07      	ldr	r3, [sp, #28]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	dd34      	ble.n	8006fcc <_dtoa_r+0x99c>
 8006f62:	9b04      	ldr	r3, [sp, #16]
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	b963      	cbnz	r3, 8006f84 <_dtoa_r+0x954>
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	2205      	movs	r2, #5
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 fab2 	bl	80074d8 <__multadd>
 8006f74:	4601      	mov	r1, r0
 8006f76:	4606      	mov	r6, r0
 8006f78:	4650      	mov	r0, sl
 8006f7a:	f000 fcc7 	bl	800790c <__mcmp>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f73f adbb 	bgt.w	8006afa <_dtoa_r+0x4ca>
 8006f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f86:	9d00      	ldr	r5, [sp, #0]
 8006f88:	ea6f 0b03 	mvn.w	fp, r3
 8006f8c:	f04f 0800 	mov.w	r8, #0
 8006f90:	4631      	mov	r1, r6
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fa7e 	bl	8007494 <_Bfree>
 8006f98:	2f00      	cmp	r7, #0
 8006f9a:	f43f aeab 	beq.w	8006cf4 <_dtoa_r+0x6c4>
 8006f9e:	f1b8 0f00 	cmp.w	r8, #0
 8006fa2:	d005      	beq.n	8006fb0 <_dtoa_r+0x980>
 8006fa4:	45b8      	cmp	r8, r7
 8006fa6:	d003      	beq.n	8006fb0 <_dtoa_r+0x980>
 8006fa8:	4641      	mov	r1, r8
 8006faa:	4620      	mov	r0, r4
 8006fac:	f000 fa72 	bl	8007494 <_Bfree>
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 fa6e 	bl	8007494 <_Bfree>
 8006fb8:	e69c      	b.n	8006cf4 <_dtoa_r+0x6c4>
 8006fba:	2600      	movs	r6, #0
 8006fbc:	4637      	mov	r7, r6
 8006fbe:	e7e1      	b.n	8006f84 <_dtoa_r+0x954>
 8006fc0:	46bb      	mov	fp, r7
 8006fc2:	4637      	mov	r7, r6
 8006fc4:	e599      	b.n	8006afa <_dtoa_r+0x4ca>
 8006fc6:	bf00      	nop
 8006fc8:	40240000 	.word	0x40240000
 8006fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 80c8 	beq.w	8007164 <_dtoa_r+0xb34>
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	2d00      	cmp	r5, #0
 8006fda:	dd05      	ble.n	8006fe8 <_dtoa_r+0x9b8>
 8006fdc:	4639      	mov	r1, r7
 8006fde:	462a      	mov	r2, r5
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fc27 	bl	8007834 <__lshift>
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	f1b8 0f00 	cmp.w	r8, #0
 8006fec:	d05b      	beq.n	80070a6 <_dtoa_r+0xa76>
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 fa0f 	bl	8007414 <_Balloc>
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	b928      	cbnz	r0, 8007006 <_dtoa_r+0x9d6>
 8006ffa:	4b83      	ldr	r3, [pc, #524]	; (8007208 <_dtoa_r+0xbd8>)
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007002:	f7ff bb2e 	b.w	8006662 <_dtoa_r+0x32>
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	3202      	adds	r2, #2
 800700a:	0092      	lsls	r2, r2, #2
 800700c:	f107 010c 	add.w	r1, r7, #12
 8007010:	300c      	adds	r0, #12
 8007012:	f7ff fa76 	bl	8006502 <memcpy>
 8007016:	2201      	movs	r2, #1
 8007018:	4629      	mov	r1, r5
 800701a:	4620      	mov	r0, r4
 800701c:	f000 fc0a 	bl	8007834 <__lshift>
 8007020:	9b00      	ldr	r3, [sp, #0]
 8007022:	3301      	adds	r3, #1
 8007024:	9304      	str	r3, [sp, #16]
 8007026:	e9dd 2300 	ldrd	r2, r3, [sp]
 800702a:	4413      	add	r3, r2
 800702c:	9308      	str	r3, [sp, #32]
 800702e:	9b02      	ldr	r3, [sp, #8]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	46b8      	mov	r8, r7
 8007036:	9306      	str	r3, [sp, #24]
 8007038:	4607      	mov	r7, r0
 800703a:	9b04      	ldr	r3, [sp, #16]
 800703c:	4631      	mov	r1, r6
 800703e:	3b01      	subs	r3, #1
 8007040:	4650      	mov	r0, sl
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	f7ff fa6b 	bl	800651e <quorem>
 8007048:	4641      	mov	r1, r8
 800704a:	9002      	str	r0, [sp, #8]
 800704c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007050:	4650      	mov	r0, sl
 8007052:	f000 fc5b 	bl	800790c <__mcmp>
 8007056:	463a      	mov	r2, r7
 8007058:	9005      	str	r0, [sp, #20]
 800705a:	4631      	mov	r1, r6
 800705c:	4620      	mov	r0, r4
 800705e:	f000 fc71 	bl	8007944 <__mdiff>
 8007062:	68c2      	ldr	r2, [r0, #12]
 8007064:	4605      	mov	r5, r0
 8007066:	bb02      	cbnz	r2, 80070aa <_dtoa_r+0xa7a>
 8007068:	4601      	mov	r1, r0
 800706a:	4650      	mov	r0, sl
 800706c:	f000 fc4e 	bl	800790c <__mcmp>
 8007070:	4602      	mov	r2, r0
 8007072:	4629      	mov	r1, r5
 8007074:	4620      	mov	r0, r4
 8007076:	9209      	str	r2, [sp, #36]	; 0x24
 8007078:	f000 fa0c 	bl	8007494 <_Bfree>
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007080:	9d04      	ldr	r5, [sp, #16]
 8007082:	ea43 0102 	orr.w	r1, r3, r2
 8007086:	9b06      	ldr	r3, [sp, #24]
 8007088:	4319      	orrs	r1, r3
 800708a:	d110      	bne.n	80070ae <_dtoa_r+0xa7e>
 800708c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007090:	d029      	beq.n	80070e6 <_dtoa_r+0xab6>
 8007092:	9b05      	ldr	r3, [sp, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	dd02      	ble.n	800709e <_dtoa_r+0xa6e>
 8007098:	9b02      	ldr	r3, [sp, #8]
 800709a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800709e:	9b01      	ldr	r3, [sp, #4]
 80070a0:	f883 9000 	strb.w	r9, [r3]
 80070a4:	e774      	b.n	8006f90 <_dtoa_r+0x960>
 80070a6:	4638      	mov	r0, r7
 80070a8:	e7ba      	b.n	8007020 <_dtoa_r+0x9f0>
 80070aa:	2201      	movs	r2, #1
 80070ac:	e7e1      	b.n	8007072 <_dtoa_r+0xa42>
 80070ae:	9b05      	ldr	r3, [sp, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	db04      	blt.n	80070be <_dtoa_r+0xa8e>
 80070b4:	9907      	ldr	r1, [sp, #28]
 80070b6:	430b      	orrs	r3, r1
 80070b8:	9906      	ldr	r1, [sp, #24]
 80070ba:	430b      	orrs	r3, r1
 80070bc:	d120      	bne.n	8007100 <_dtoa_r+0xad0>
 80070be:	2a00      	cmp	r2, #0
 80070c0:	dded      	ble.n	800709e <_dtoa_r+0xa6e>
 80070c2:	4651      	mov	r1, sl
 80070c4:	2201      	movs	r2, #1
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 fbb4 	bl	8007834 <__lshift>
 80070cc:	4631      	mov	r1, r6
 80070ce:	4682      	mov	sl, r0
 80070d0:	f000 fc1c 	bl	800790c <__mcmp>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	dc03      	bgt.n	80070e0 <_dtoa_r+0xab0>
 80070d8:	d1e1      	bne.n	800709e <_dtoa_r+0xa6e>
 80070da:	f019 0f01 	tst.w	r9, #1
 80070de:	d0de      	beq.n	800709e <_dtoa_r+0xa6e>
 80070e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070e4:	d1d8      	bne.n	8007098 <_dtoa_r+0xa68>
 80070e6:	9a01      	ldr	r2, [sp, #4]
 80070e8:	2339      	movs	r3, #57	; 0x39
 80070ea:	7013      	strb	r3, [r2, #0]
 80070ec:	462b      	mov	r3, r5
 80070ee:	461d      	mov	r5, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070f6:	2a39      	cmp	r2, #57	; 0x39
 80070f8:	d06c      	beq.n	80071d4 <_dtoa_r+0xba4>
 80070fa:	3201      	adds	r2, #1
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	e747      	b.n	8006f90 <_dtoa_r+0x960>
 8007100:	2a00      	cmp	r2, #0
 8007102:	dd07      	ble.n	8007114 <_dtoa_r+0xae4>
 8007104:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007108:	d0ed      	beq.n	80070e6 <_dtoa_r+0xab6>
 800710a:	9a01      	ldr	r2, [sp, #4]
 800710c:	f109 0301 	add.w	r3, r9, #1
 8007110:	7013      	strb	r3, [r2, #0]
 8007112:	e73d      	b.n	8006f90 <_dtoa_r+0x960>
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	9a08      	ldr	r2, [sp, #32]
 8007118:	f803 9c01 	strb.w	r9, [r3, #-1]
 800711c:	4293      	cmp	r3, r2
 800711e:	d043      	beq.n	80071a8 <_dtoa_r+0xb78>
 8007120:	4651      	mov	r1, sl
 8007122:	2300      	movs	r3, #0
 8007124:	220a      	movs	r2, #10
 8007126:	4620      	mov	r0, r4
 8007128:	f000 f9d6 	bl	80074d8 <__multadd>
 800712c:	45b8      	cmp	r8, r7
 800712e:	4682      	mov	sl, r0
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	f04f 020a 	mov.w	r2, #10
 8007138:	4641      	mov	r1, r8
 800713a:	4620      	mov	r0, r4
 800713c:	d107      	bne.n	800714e <_dtoa_r+0xb1e>
 800713e:	f000 f9cb 	bl	80074d8 <__multadd>
 8007142:	4680      	mov	r8, r0
 8007144:	4607      	mov	r7, r0
 8007146:	9b04      	ldr	r3, [sp, #16]
 8007148:	3301      	adds	r3, #1
 800714a:	9304      	str	r3, [sp, #16]
 800714c:	e775      	b.n	800703a <_dtoa_r+0xa0a>
 800714e:	f000 f9c3 	bl	80074d8 <__multadd>
 8007152:	4639      	mov	r1, r7
 8007154:	4680      	mov	r8, r0
 8007156:	2300      	movs	r3, #0
 8007158:	220a      	movs	r2, #10
 800715a:	4620      	mov	r0, r4
 800715c:	f000 f9bc 	bl	80074d8 <__multadd>
 8007160:	4607      	mov	r7, r0
 8007162:	e7f0      	b.n	8007146 <_dtoa_r+0xb16>
 8007164:	9b04      	ldr	r3, [sp, #16]
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	9d00      	ldr	r5, [sp, #0]
 800716a:	4631      	mov	r1, r6
 800716c:	4650      	mov	r0, sl
 800716e:	f7ff f9d6 	bl	800651e <quorem>
 8007172:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007176:	9b00      	ldr	r3, [sp, #0]
 8007178:	f805 9b01 	strb.w	r9, [r5], #1
 800717c:	1aea      	subs	r2, r5, r3
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	4293      	cmp	r3, r2
 8007182:	dd07      	ble.n	8007194 <_dtoa_r+0xb64>
 8007184:	4651      	mov	r1, sl
 8007186:	2300      	movs	r3, #0
 8007188:	220a      	movs	r2, #10
 800718a:	4620      	mov	r0, r4
 800718c:	f000 f9a4 	bl	80074d8 <__multadd>
 8007190:	4682      	mov	sl, r0
 8007192:	e7ea      	b.n	800716a <_dtoa_r+0xb3a>
 8007194:	9b01      	ldr	r3, [sp, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	bfc8      	it	gt
 800719a:	461d      	movgt	r5, r3
 800719c:	9b00      	ldr	r3, [sp, #0]
 800719e:	bfd8      	it	le
 80071a0:	2501      	movle	r5, #1
 80071a2:	441d      	add	r5, r3
 80071a4:	f04f 0800 	mov.w	r8, #0
 80071a8:	4651      	mov	r1, sl
 80071aa:	2201      	movs	r2, #1
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 fb41 	bl	8007834 <__lshift>
 80071b2:	4631      	mov	r1, r6
 80071b4:	4682      	mov	sl, r0
 80071b6:	f000 fba9 	bl	800790c <__mcmp>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	dc96      	bgt.n	80070ec <_dtoa_r+0xabc>
 80071be:	d102      	bne.n	80071c6 <_dtoa_r+0xb96>
 80071c0:	f019 0f01 	tst.w	r9, #1
 80071c4:	d192      	bne.n	80070ec <_dtoa_r+0xabc>
 80071c6:	462b      	mov	r3, r5
 80071c8:	461d      	mov	r5, r3
 80071ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071ce:	2a30      	cmp	r2, #48	; 0x30
 80071d0:	d0fa      	beq.n	80071c8 <_dtoa_r+0xb98>
 80071d2:	e6dd      	b.n	8006f90 <_dtoa_r+0x960>
 80071d4:	9a00      	ldr	r2, [sp, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d189      	bne.n	80070ee <_dtoa_r+0xabe>
 80071da:	f10b 0b01 	add.w	fp, fp, #1
 80071de:	2331      	movs	r3, #49	; 0x31
 80071e0:	e796      	b.n	8007110 <_dtoa_r+0xae0>
 80071e2:	4b0a      	ldr	r3, [pc, #40]	; (800720c <_dtoa_r+0xbdc>)
 80071e4:	f7ff ba99 	b.w	800671a <_dtoa_r+0xea>
 80071e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f47f aa6d 	bne.w	80066ca <_dtoa_r+0x9a>
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <_dtoa_r+0xbe0>)
 80071f2:	f7ff ba92 	b.w	800671a <_dtoa_r+0xea>
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	dcb5      	bgt.n	8007168 <_dtoa_r+0xb38>
 80071fc:	9b07      	ldr	r3, [sp, #28]
 80071fe:	2b02      	cmp	r3, #2
 8007200:	f73f aeb1 	bgt.w	8006f66 <_dtoa_r+0x936>
 8007204:	e7b0      	b.n	8007168 <_dtoa_r+0xb38>
 8007206:	bf00      	nop
 8007208:	080089dc 	.word	0x080089dc
 800720c:	0800893c 	.word	0x0800893c
 8007210:	08008960 	.word	0x08008960

08007214 <_free_r>:
 8007214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007216:	2900      	cmp	r1, #0
 8007218:	d044      	beq.n	80072a4 <_free_r+0x90>
 800721a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800721e:	9001      	str	r0, [sp, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f1a1 0404 	sub.w	r4, r1, #4
 8007226:	bfb8      	it	lt
 8007228:	18e4      	addlt	r4, r4, r3
 800722a:	f000 f8e7 	bl	80073fc <__malloc_lock>
 800722e:	4a1e      	ldr	r2, [pc, #120]	; (80072a8 <_free_r+0x94>)
 8007230:	9801      	ldr	r0, [sp, #4]
 8007232:	6813      	ldr	r3, [r2, #0]
 8007234:	b933      	cbnz	r3, 8007244 <_free_r+0x30>
 8007236:	6063      	str	r3, [r4, #4]
 8007238:	6014      	str	r4, [r2, #0]
 800723a:	b003      	add	sp, #12
 800723c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007240:	f000 b8e2 	b.w	8007408 <__malloc_unlock>
 8007244:	42a3      	cmp	r3, r4
 8007246:	d908      	bls.n	800725a <_free_r+0x46>
 8007248:	6825      	ldr	r5, [r4, #0]
 800724a:	1961      	adds	r1, r4, r5
 800724c:	428b      	cmp	r3, r1
 800724e:	bf01      	itttt	eq
 8007250:	6819      	ldreq	r1, [r3, #0]
 8007252:	685b      	ldreq	r3, [r3, #4]
 8007254:	1949      	addeq	r1, r1, r5
 8007256:	6021      	streq	r1, [r4, #0]
 8007258:	e7ed      	b.n	8007236 <_free_r+0x22>
 800725a:	461a      	mov	r2, r3
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	b10b      	cbz	r3, 8007264 <_free_r+0x50>
 8007260:	42a3      	cmp	r3, r4
 8007262:	d9fa      	bls.n	800725a <_free_r+0x46>
 8007264:	6811      	ldr	r1, [r2, #0]
 8007266:	1855      	adds	r5, r2, r1
 8007268:	42a5      	cmp	r5, r4
 800726a:	d10b      	bne.n	8007284 <_free_r+0x70>
 800726c:	6824      	ldr	r4, [r4, #0]
 800726e:	4421      	add	r1, r4
 8007270:	1854      	adds	r4, r2, r1
 8007272:	42a3      	cmp	r3, r4
 8007274:	6011      	str	r1, [r2, #0]
 8007276:	d1e0      	bne.n	800723a <_free_r+0x26>
 8007278:	681c      	ldr	r4, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	6053      	str	r3, [r2, #4]
 800727e:	440c      	add	r4, r1
 8007280:	6014      	str	r4, [r2, #0]
 8007282:	e7da      	b.n	800723a <_free_r+0x26>
 8007284:	d902      	bls.n	800728c <_free_r+0x78>
 8007286:	230c      	movs	r3, #12
 8007288:	6003      	str	r3, [r0, #0]
 800728a:	e7d6      	b.n	800723a <_free_r+0x26>
 800728c:	6825      	ldr	r5, [r4, #0]
 800728e:	1961      	adds	r1, r4, r5
 8007290:	428b      	cmp	r3, r1
 8007292:	bf04      	itt	eq
 8007294:	6819      	ldreq	r1, [r3, #0]
 8007296:	685b      	ldreq	r3, [r3, #4]
 8007298:	6063      	str	r3, [r4, #4]
 800729a:	bf04      	itt	eq
 800729c:	1949      	addeq	r1, r1, r5
 800729e:	6021      	streq	r1, [r4, #0]
 80072a0:	6054      	str	r4, [r2, #4]
 80072a2:	e7ca      	b.n	800723a <_free_r+0x26>
 80072a4:	b003      	add	sp, #12
 80072a6:	bd30      	pop	{r4, r5, pc}
 80072a8:	200147dc 	.word	0x200147dc

080072ac <malloc>:
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <malloc+0xc>)
 80072ae:	4601      	mov	r1, r0
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	f000 b823 	b.w	80072fc <_malloc_r>
 80072b6:	bf00      	nop
 80072b8:	20000064 	.word	0x20000064

080072bc <sbrk_aligned>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	4e0e      	ldr	r6, [pc, #56]	; (80072f8 <sbrk_aligned+0x3c>)
 80072c0:	460c      	mov	r4, r1
 80072c2:	6831      	ldr	r1, [r6, #0]
 80072c4:	4605      	mov	r5, r0
 80072c6:	b911      	cbnz	r1, 80072ce <sbrk_aligned+0x12>
 80072c8:	f000 fe40 	bl	8007f4c <_sbrk_r>
 80072cc:	6030      	str	r0, [r6, #0]
 80072ce:	4621      	mov	r1, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 fe3b 	bl	8007f4c <_sbrk_r>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	d00a      	beq.n	80072f0 <sbrk_aligned+0x34>
 80072da:	1cc4      	adds	r4, r0, #3
 80072dc:	f024 0403 	bic.w	r4, r4, #3
 80072e0:	42a0      	cmp	r0, r4
 80072e2:	d007      	beq.n	80072f4 <sbrk_aligned+0x38>
 80072e4:	1a21      	subs	r1, r4, r0
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 fe30 	bl	8007f4c <_sbrk_r>
 80072ec:	3001      	adds	r0, #1
 80072ee:	d101      	bne.n	80072f4 <sbrk_aligned+0x38>
 80072f0:	f04f 34ff 	mov.w	r4, #4294967295
 80072f4:	4620      	mov	r0, r4
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	200147e0 	.word	0x200147e0

080072fc <_malloc_r>:
 80072fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007300:	1ccd      	adds	r5, r1, #3
 8007302:	f025 0503 	bic.w	r5, r5, #3
 8007306:	3508      	adds	r5, #8
 8007308:	2d0c      	cmp	r5, #12
 800730a:	bf38      	it	cc
 800730c:	250c      	movcc	r5, #12
 800730e:	2d00      	cmp	r5, #0
 8007310:	4607      	mov	r7, r0
 8007312:	db01      	blt.n	8007318 <_malloc_r+0x1c>
 8007314:	42a9      	cmp	r1, r5
 8007316:	d905      	bls.n	8007324 <_malloc_r+0x28>
 8007318:	230c      	movs	r3, #12
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	2600      	movs	r6, #0
 800731e:	4630      	mov	r0, r6
 8007320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007324:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073f8 <_malloc_r+0xfc>
 8007328:	f000 f868 	bl	80073fc <__malloc_lock>
 800732c:	f8d8 3000 	ldr.w	r3, [r8]
 8007330:	461c      	mov	r4, r3
 8007332:	bb5c      	cbnz	r4, 800738c <_malloc_r+0x90>
 8007334:	4629      	mov	r1, r5
 8007336:	4638      	mov	r0, r7
 8007338:	f7ff ffc0 	bl	80072bc <sbrk_aligned>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	4604      	mov	r4, r0
 8007340:	d155      	bne.n	80073ee <_malloc_r+0xf2>
 8007342:	f8d8 4000 	ldr.w	r4, [r8]
 8007346:	4626      	mov	r6, r4
 8007348:	2e00      	cmp	r6, #0
 800734a:	d145      	bne.n	80073d8 <_malloc_r+0xdc>
 800734c:	2c00      	cmp	r4, #0
 800734e:	d048      	beq.n	80073e2 <_malloc_r+0xe6>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	4631      	mov	r1, r6
 8007354:	4638      	mov	r0, r7
 8007356:	eb04 0903 	add.w	r9, r4, r3
 800735a:	f000 fdf7 	bl	8007f4c <_sbrk_r>
 800735e:	4581      	cmp	r9, r0
 8007360:	d13f      	bne.n	80073e2 <_malloc_r+0xe6>
 8007362:	6821      	ldr	r1, [r4, #0]
 8007364:	1a6d      	subs	r5, r5, r1
 8007366:	4629      	mov	r1, r5
 8007368:	4638      	mov	r0, r7
 800736a:	f7ff ffa7 	bl	80072bc <sbrk_aligned>
 800736e:	3001      	adds	r0, #1
 8007370:	d037      	beq.n	80073e2 <_malloc_r+0xe6>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	442b      	add	r3, r5
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	f8d8 3000 	ldr.w	r3, [r8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d038      	beq.n	80073f2 <_malloc_r+0xf6>
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	42a2      	cmp	r2, r4
 8007384:	d12b      	bne.n	80073de <_malloc_r+0xe2>
 8007386:	2200      	movs	r2, #0
 8007388:	605a      	str	r2, [r3, #4]
 800738a:	e00f      	b.n	80073ac <_malloc_r+0xb0>
 800738c:	6822      	ldr	r2, [r4, #0]
 800738e:	1b52      	subs	r2, r2, r5
 8007390:	d41f      	bmi.n	80073d2 <_malloc_r+0xd6>
 8007392:	2a0b      	cmp	r2, #11
 8007394:	d917      	bls.n	80073c6 <_malloc_r+0xca>
 8007396:	1961      	adds	r1, r4, r5
 8007398:	42a3      	cmp	r3, r4
 800739a:	6025      	str	r5, [r4, #0]
 800739c:	bf18      	it	ne
 800739e:	6059      	strne	r1, [r3, #4]
 80073a0:	6863      	ldr	r3, [r4, #4]
 80073a2:	bf08      	it	eq
 80073a4:	f8c8 1000 	streq.w	r1, [r8]
 80073a8:	5162      	str	r2, [r4, r5]
 80073aa:	604b      	str	r3, [r1, #4]
 80073ac:	4638      	mov	r0, r7
 80073ae:	f104 060b 	add.w	r6, r4, #11
 80073b2:	f000 f829 	bl	8007408 <__malloc_unlock>
 80073b6:	f026 0607 	bic.w	r6, r6, #7
 80073ba:	1d23      	adds	r3, r4, #4
 80073bc:	1af2      	subs	r2, r6, r3
 80073be:	d0ae      	beq.n	800731e <_malloc_r+0x22>
 80073c0:	1b9b      	subs	r3, r3, r6
 80073c2:	50a3      	str	r3, [r4, r2]
 80073c4:	e7ab      	b.n	800731e <_malloc_r+0x22>
 80073c6:	42a3      	cmp	r3, r4
 80073c8:	6862      	ldr	r2, [r4, #4]
 80073ca:	d1dd      	bne.n	8007388 <_malloc_r+0x8c>
 80073cc:	f8c8 2000 	str.w	r2, [r8]
 80073d0:	e7ec      	b.n	80073ac <_malloc_r+0xb0>
 80073d2:	4623      	mov	r3, r4
 80073d4:	6864      	ldr	r4, [r4, #4]
 80073d6:	e7ac      	b.n	8007332 <_malloc_r+0x36>
 80073d8:	4634      	mov	r4, r6
 80073da:	6876      	ldr	r6, [r6, #4]
 80073dc:	e7b4      	b.n	8007348 <_malloc_r+0x4c>
 80073de:	4613      	mov	r3, r2
 80073e0:	e7cc      	b.n	800737c <_malloc_r+0x80>
 80073e2:	230c      	movs	r3, #12
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	4638      	mov	r0, r7
 80073e8:	f000 f80e 	bl	8007408 <__malloc_unlock>
 80073ec:	e797      	b.n	800731e <_malloc_r+0x22>
 80073ee:	6025      	str	r5, [r4, #0]
 80073f0:	e7dc      	b.n	80073ac <_malloc_r+0xb0>
 80073f2:	605b      	str	r3, [r3, #4]
 80073f4:	deff      	udf	#255	; 0xff
 80073f6:	bf00      	nop
 80073f8:	200147dc 	.word	0x200147dc

080073fc <__malloc_lock>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__malloc_lock+0x8>)
 80073fe:	f7ff b87e 	b.w	80064fe <__retarget_lock_acquire_recursive>
 8007402:	bf00      	nop
 8007404:	200147d8 	.word	0x200147d8

08007408 <__malloc_unlock>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__malloc_unlock+0x8>)
 800740a:	f7ff b879 	b.w	8006500 <__retarget_lock_release_recursive>
 800740e:	bf00      	nop
 8007410:	200147d8 	.word	0x200147d8

08007414 <_Balloc>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	69c6      	ldr	r6, [r0, #28]
 8007418:	4604      	mov	r4, r0
 800741a:	460d      	mov	r5, r1
 800741c:	b976      	cbnz	r6, 800743c <_Balloc+0x28>
 800741e:	2010      	movs	r0, #16
 8007420:	f7ff ff44 	bl	80072ac <malloc>
 8007424:	4602      	mov	r2, r0
 8007426:	61e0      	str	r0, [r4, #28]
 8007428:	b920      	cbnz	r0, 8007434 <_Balloc+0x20>
 800742a:	4b18      	ldr	r3, [pc, #96]	; (800748c <_Balloc+0x78>)
 800742c:	4818      	ldr	r0, [pc, #96]	; (8007490 <_Balloc+0x7c>)
 800742e:	216b      	movs	r1, #107	; 0x6b
 8007430:	f000 fd9c 	bl	8007f6c <__assert_func>
 8007434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007438:	6006      	str	r6, [r0, #0]
 800743a:	60c6      	str	r6, [r0, #12]
 800743c:	69e6      	ldr	r6, [r4, #28]
 800743e:	68f3      	ldr	r3, [r6, #12]
 8007440:	b183      	cbz	r3, 8007464 <_Balloc+0x50>
 8007442:	69e3      	ldr	r3, [r4, #28]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800744a:	b9b8      	cbnz	r0, 800747c <_Balloc+0x68>
 800744c:	2101      	movs	r1, #1
 800744e:	fa01 f605 	lsl.w	r6, r1, r5
 8007452:	1d72      	adds	r2, r6, #5
 8007454:	0092      	lsls	r2, r2, #2
 8007456:	4620      	mov	r0, r4
 8007458:	f000 fda6 	bl	8007fa8 <_calloc_r>
 800745c:	b160      	cbz	r0, 8007478 <_Balloc+0x64>
 800745e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007462:	e00e      	b.n	8007482 <_Balloc+0x6e>
 8007464:	2221      	movs	r2, #33	; 0x21
 8007466:	2104      	movs	r1, #4
 8007468:	4620      	mov	r0, r4
 800746a:	f000 fd9d 	bl	8007fa8 <_calloc_r>
 800746e:	69e3      	ldr	r3, [r4, #28]
 8007470:	60f0      	str	r0, [r6, #12]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e4      	bne.n	8007442 <_Balloc+0x2e>
 8007478:	2000      	movs	r0, #0
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	6802      	ldr	r2, [r0, #0]
 800747e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007482:	2300      	movs	r3, #0
 8007484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007488:	e7f7      	b.n	800747a <_Balloc+0x66>
 800748a:	bf00      	nop
 800748c:	0800896d 	.word	0x0800896d
 8007490:	080089ed 	.word	0x080089ed

08007494 <_Bfree>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	69c6      	ldr	r6, [r0, #28]
 8007498:	4605      	mov	r5, r0
 800749a:	460c      	mov	r4, r1
 800749c:	b976      	cbnz	r6, 80074bc <_Bfree+0x28>
 800749e:	2010      	movs	r0, #16
 80074a0:	f7ff ff04 	bl	80072ac <malloc>
 80074a4:	4602      	mov	r2, r0
 80074a6:	61e8      	str	r0, [r5, #28]
 80074a8:	b920      	cbnz	r0, 80074b4 <_Bfree+0x20>
 80074aa:	4b09      	ldr	r3, [pc, #36]	; (80074d0 <_Bfree+0x3c>)
 80074ac:	4809      	ldr	r0, [pc, #36]	; (80074d4 <_Bfree+0x40>)
 80074ae:	218f      	movs	r1, #143	; 0x8f
 80074b0:	f000 fd5c 	bl	8007f6c <__assert_func>
 80074b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074b8:	6006      	str	r6, [r0, #0]
 80074ba:	60c6      	str	r6, [r0, #12]
 80074bc:	b13c      	cbz	r4, 80074ce <_Bfree+0x3a>
 80074be:	69eb      	ldr	r3, [r5, #28]
 80074c0:	6862      	ldr	r2, [r4, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074c8:	6021      	str	r1, [r4, #0]
 80074ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074ce:	bd70      	pop	{r4, r5, r6, pc}
 80074d0:	0800896d 	.word	0x0800896d
 80074d4:	080089ed 	.word	0x080089ed

080074d8 <__multadd>:
 80074d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074dc:	690d      	ldr	r5, [r1, #16]
 80074de:	4607      	mov	r7, r0
 80074e0:	460c      	mov	r4, r1
 80074e2:	461e      	mov	r6, r3
 80074e4:	f101 0c14 	add.w	ip, r1, #20
 80074e8:	2000      	movs	r0, #0
 80074ea:	f8dc 3000 	ldr.w	r3, [ip]
 80074ee:	b299      	uxth	r1, r3
 80074f0:	fb02 6101 	mla	r1, r2, r1, r6
 80074f4:	0c1e      	lsrs	r6, r3, #16
 80074f6:	0c0b      	lsrs	r3, r1, #16
 80074f8:	fb02 3306 	mla	r3, r2, r6, r3
 80074fc:	b289      	uxth	r1, r1
 80074fe:	3001      	adds	r0, #1
 8007500:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007504:	4285      	cmp	r5, r0
 8007506:	f84c 1b04 	str.w	r1, [ip], #4
 800750a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800750e:	dcec      	bgt.n	80074ea <__multadd+0x12>
 8007510:	b30e      	cbz	r6, 8007556 <__multadd+0x7e>
 8007512:	68a3      	ldr	r3, [r4, #8]
 8007514:	42ab      	cmp	r3, r5
 8007516:	dc19      	bgt.n	800754c <__multadd+0x74>
 8007518:	6861      	ldr	r1, [r4, #4]
 800751a:	4638      	mov	r0, r7
 800751c:	3101      	adds	r1, #1
 800751e:	f7ff ff79 	bl	8007414 <_Balloc>
 8007522:	4680      	mov	r8, r0
 8007524:	b928      	cbnz	r0, 8007532 <__multadd+0x5a>
 8007526:	4602      	mov	r2, r0
 8007528:	4b0c      	ldr	r3, [pc, #48]	; (800755c <__multadd+0x84>)
 800752a:	480d      	ldr	r0, [pc, #52]	; (8007560 <__multadd+0x88>)
 800752c:	21ba      	movs	r1, #186	; 0xba
 800752e:	f000 fd1d 	bl	8007f6c <__assert_func>
 8007532:	6922      	ldr	r2, [r4, #16]
 8007534:	3202      	adds	r2, #2
 8007536:	f104 010c 	add.w	r1, r4, #12
 800753a:	0092      	lsls	r2, r2, #2
 800753c:	300c      	adds	r0, #12
 800753e:	f7fe ffe0 	bl	8006502 <memcpy>
 8007542:	4621      	mov	r1, r4
 8007544:	4638      	mov	r0, r7
 8007546:	f7ff ffa5 	bl	8007494 <_Bfree>
 800754a:	4644      	mov	r4, r8
 800754c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007550:	3501      	adds	r5, #1
 8007552:	615e      	str	r6, [r3, #20]
 8007554:	6125      	str	r5, [r4, #16]
 8007556:	4620      	mov	r0, r4
 8007558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800755c:	080089dc 	.word	0x080089dc
 8007560:	080089ed 	.word	0x080089ed

08007564 <__hi0bits>:
 8007564:	0c03      	lsrs	r3, r0, #16
 8007566:	041b      	lsls	r3, r3, #16
 8007568:	b9d3      	cbnz	r3, 80075a0 <__hi0bits+0x3c>
 800756a:	0400      	lsls	r0, r0, #16
 800756c:	2310      	movs	r3, #16
 800756e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007572:	bf04      	itt	eq
 8007574:	0200      	lsleq	r0, r0, #8
 8007576:	3308      	addeq	r3, #8
 8007578:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800757c:	bf04      	itt	eq
 800757e:	0100      	lsleq	r0, r0, #4
 8007580:	3304      	addeq	r3, #4
 8007582:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007586:	bf04      	itt	eq
 8007588:	0080      	lsleq	r0, r0, #2
 800758a:	3302      	addeq	r3, #2
 800758c:	2800      	cmp	r0, #0
 800758e:	db05      	blt.n	800759c <__hi0bits+0x38>
 8007590:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007594:	f103 0301 	add.w	r3, r3, #1
 8007598:	bf08      	it	eq
 800759a:	2320      	moveq	r3, #32
 800759c:	4618      	mov	r0, r3
 800759e:	4770      	bx	lr
 80075a0:	2300      	movs	r3, #0
 80075a2:	e7e4      	b.n	800756e <__hi0bits+0xa>

080075a4 <__lo0bits>:
 80075a4:	6803      	ldr	r3, [r0, #0]
 80075a6:	f013 0207 	ands.w	r2, r3, #7
 80075aa:	d00c      	beq.n	80075c6 <__lo0bits+0x22>
 80075ac:	07d9      	lsls	r1, r3, #31
 80075ae:	d422      	bmi.n	80075f6 <__lo0bits+0x52>
 80075b0:	079a      	lsls	r2, r3, #30
 80075b2:	bf49      	itett	mi
 80075b4:	085b      	lsrmi	r3, r3, #1
 80075b6:	089b      	lsrpl	r3, r3, #2
 80075b8:	6003      	strmi	r3, [r0, #0]
 80075ba:	2201      	movmi	r2, #1
 80075bc:	bf5c      	itt	pl
 80075be:	6003      	strpl	r3, [r0, #0]
 80075c0:	2202      	movpl	r2, #2
 80075c2:	4610      	mov	r0, r2
 80075c4:	4770      	bx	lr
 80075c6:	b299      	uxth	r1, r3
 80075c8:	b909      	cbnz	r1, 80075ce <__lo0bits+0x2a>
 80075ca:	0c1b      	lsrs	r3, r3, #16
 80075cc:	2210      	movs	r2, #16
 80075ce:	b2d9      	uxtb	r1, r3
 80075d0:	b909      	cbnz	r1, 80075d6 <__lo0bits+0x32>
 80075d2:	3208      	adds	r2, #8
 80075d4:	0a1b      	lsrs	r3, r3, #8
 80075d6:	0719      	lsls	r1, r3, #28
 80075d8:	bf04      	itt	eq
 80075da:	091b      	lsreq	r3, r3, #4
 80075dc:	3204      	addeq	r2, #4
 80075de:	0799      	lsls	r1, r3, #30
 80075e0:	bf04      	itt	eq
 80075e2:	089b      	lsreq	r3, r3, #2
 80075e4:	3202      	addeq	r2, #2
 80075e6:	07d9      	lsls	r1, r3, #31
 80075e8:	d403      	bmi.n	80075f2 <__lo0bits+0x4e>
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	f102 0201 	add.w	r2, r2, #1
 80075f0:	d003      	beq.n	80075fa <__lo0bits+0x56>
 80075f2:	6003      	str	r3, [r0, #0]
 80075f4:	e7e5      	b.n	80075c2 <__lo0bits+0x1e>
 80075f6:	2200      	movs	r2, #0
 80075f8:	e7e3      	b.n	80075c2 <__lo0bits+0x1e>
 80075fa:	2220      	movs	r2, #32
 80075fc:	e7e1      	b.n	80075c2 <__lo0bits+0x1e>
	...

08007600 <__i2b>:
 8007600:	b510      	push	{r4, lr}
 8007602:	460c      	mov	r4, r1
 8007604:	2101      	movs	r1, #1
 8007606:	f7ff ff05 	bl	8007414 <_Balloc>
 800760a:	4602      	mov	r2, r0
 800760c:	b928      	cbnz	r0, 800761a <__i2b+0x1a>
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <__i2b+0x24>)
 8007610:	4805      	ldr	r0, [pc, #20]	; (8007628 <__i2b+0x28>)
 8007612:	f240 1145 	movw	r1, #325	; 0x145
 8007616:	f000 fca9 	bl	8007f6c <__assert_func>
 800761a:	2301      	movs	r3, #1
 800761c:	6144      	str	r4, [r0, #20]
 800761e:	6103      	str	r3, [r0, #16]
 8007620:	bd10      	pop	{r4, pc}
 8007622:	bf00      	nop
 8007624:	080089dc 	.word	0x080089dc
 8007628:	080089ed 	.word	0x080089ed

0800762c <__multiply>:
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	4691      	mov	r9, r2
 8007632:	690a      	ldr	r2, [r1, #16]
 8007634:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007638:	429a      	cmp	r2, r3
 800763a:	bfb8      	it	lt
 800763c:	460b      	movlt	r3, r1
 800763e:	460c      	mov	r4, r1
 8007640:	bfbc      	itt	lt
 8007642:	464c      	movlt	r4, r9
 8007644:	4699      	movlt	r9, r3
 8007646:	6927      	ldr	r7, [r4, #16]
 8007648:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800764c:	68a3      	ldr	r3, [r4, #8]
 800764e:	6861      	ldr	r1, [r4, #4]
 8007650:	eb07 060a 	add.w	r6, r7, sl
 8007654:	42b3      	cmp	r3, r6
 8007656:	b085      	sub	sp, #20
 8007658:	bfb8      	it	lt
 800765a:	3101      	addlt	r1, #1
 800765c:	f7ff feda 	bl	8007414 <_Balloc>
 8007660:	b930      	cbnz	r0, 8007670 <__multiply+0x44>
 8007662:	4602      	mov	r2, r0
 8007664:	4b44      	ldr	r3, [pc, #272]	; (8007778 <__multiply+0x14c>)
 8007666:	4845      	ldr	r0, [pc, #276]	; (800777c <__multiply+0x150>)
 8007668:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800766c:	f000 fc7e 	bl	8007f6c <__assert_func>
 8007670:	f100 0514 	add.w	r5, r0, #20
 8007674:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007678:	462b      	mov	r3, r5
 800767a:	2200      	movs	r2, #0
 800767c:	4543      	cmp	r3, r8
 800767e:	d321      	bcc.n	80076c4 <__multiply+0x98>
 8007680:	f104 0314 	add.w	r3, r4, #20
 8007684:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007688:	f109 0314 	add.w	r3, r9, #20
 800768c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007690:	9202      	str	r2, [sp, #8]
 8007692:	1b3a      	subs	r2, r7, r4
 8007694:	3a15      	subs	r2, #21
 8007696:	f022 0203 	bic.w	r2, r2, #3
 800769a:	3204      	adds	r2, #4
 800769c:	f104 0115 	add.w	r1, r4, #21
 80076a0:	428f      	cmp	r7, r1
 80076a2:	bf38      	it	cc
 80076a4:	2204      	movcc	r2, #4
 80076a6:	9201      	str	r2, [sp, #4]
 80076a8:	9a02      	ldr	r2, [sp, #8]
 80076aa:	9303      	str	r3, [sp, #12]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d80c      	bhi.n	80076ca <__multiply+0x9e>
 80076b0:	2e00      	cmp	r6, #0
 80076b2:	dd03      	ble.n	80076bc <__multiply+0x90>
 80076b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d05b      	beq.n	8007774 <__multiply+0x148>
 80076bc:	6106      	str	r6, [r0, #16]
 80076be:	b005      	add	sp, #20
 80076c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c4:	f843 2b04 	str.w	r2, [r3], #4
 80076c8:	e7d8      	b.n	800767c <__multiply+0x50>
 80076ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80076ce:	f1ba 0f00 	cmp.w	sl, #0
 80076d2:	d024      	beq.n	800771e <__multiply+0xf2>
 80076d4:	f104 0e14 	add.w	lr, r4, #20
 80076d8:	46a9      	mov	r9, r5
 80076da:	f04f 0c00 	mov.w	ip, #0
 80076de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076e2:	f8d9 1000 	ldr.w	r1, [r9]
 80076e6:	fa1f fb82 	uxth.w	fp, r2
 80076ea:	b289      	uxth	r1, r1
 80076ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80076f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80076f4:	f8d9 2000 	ldr.w	r2, [r9]
 80076f8:	4461      	add	r1, ip
 80076fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007702:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007706:	b289      	uxth	r1, r1
 8007708:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800770c:	4577      	cmp	r7, lr
 800770e:	f849 1b04 	str.w	r1, [r9], #4
 8007712:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007716:	d8e2      	bhi.n	80076de <__multiply+0xb2>
 8007718:	9a01      	ldr	r2, [sp, #4]
 800771a:	f845 c002 	str.w	ip, [r5, r2]
 800771e:	9a03      	ldr	r2, [sp, #12]
 8007720:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007724:	3304      	adds	r3, #4
 8007726:	f1b9 0f00 	cmp.w	r9, #0
 800772a:	d021      	beq.n	8007770 <__multiply+0x144>
 800772c:	6829      	ldr	r1, [r5, #0]
 800772e:	f104 0c14 	add.w	ip, r4, #20
 8007732:	46ae      	mov	lr, r5
 8007734:	f04f 0a00 	mov.w	sl, #0
 8007738:	f8bc b000 	ldrh.w	fp, [ip]
 800773c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007740:	fb09 220b 	mla	r2, r9, fp, r2
 8007744:	4452      	add	r2, sl
 8007746:	b289      	uxth	r1, r1
 8007748:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800774c:	f84e 1b04 	str.w	r1, [lr], #4
 8007750:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007754:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007758:	f8be 1000 	ldrh.w	r1, [lr]
 800775c:	fb09 110a 	mla	r1, r9, sl, r1
 8007760:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007764:	4567      	cmp	r7, ip
 8007766:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800776a:	d8e5      	bhi.n	8007738 <__multiply+0x10c>
 800776c:	9a01      	ldr	r2, [sp, #4]
 800776e:	50a9      	str	r1, [r5, r2]
 8007770:	3504      	adds	r5, #4
 8007772:	e799      	b.n	80076a8 <__multiply+0x7c>
 8007774:	3e01      	subs	r6, #1
 8007776:	e79b      	b.n	80076b0 <__multiply+0x84>
 8007778:	080089dc 	.word	0x080089dc
 800777c:	080089ed 	.word	0x080089ed

08007780 <__pow5mult>:
 8007780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007784:	4615      	mov	r5, r2
 8007786:	f012 0203 	ands.w	r2, r2, #3
 800778a:	4606      	mov	r6, r0
 800778c:	460f      	mov	r7, r1
 800778e:	d007      	beq.n	80077a0 <__pow5mult+0x20>
 8007790:	4c25      	ldr	r4, [pc, #148]	; (8007828 <__pow5mult+0xa8>)
 8007792:	3a01      	subs	r2, #1
 8007794:	2300      	movs	r3, #0
 8007796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800779a:	f7ff fe9d 	bl	80074d8 <__multadd>
 800779e:	4607      	mov	r7, r0
 80077a0:	10ad      	asrs	r5, r5, #2
 80077a2:	d03d      	beq.n	8007820 <__pow5mult+0xa0>
 80077a4:	69f4      	ldr	r4, [r6, #28]
 80077a6:	b97c      	cbnz	r4, 80077c8 <__pow5mult+0x48>
 80077a8:	2010      	movs	r0, #16
 80077aa:	f7ff fd7f 	bl	80072ac <malloc>
 80077ae:	4602      	mov	r2, r0
 80077b0:	61f0      	str	r0, [r6, #28]
 80077b2:	b928      	cbnz	r0, 80077c0 <__pow5mult+0x40>
 80077b4:	4b1d      	ldr	r3, [pc, #116]	; (800782c <__pow5mult+0xac>)
 80077b6:	481e      	ldr	r0, [pc, #120]	; (8007830 <__pow5mult+0xb0>)
 80077b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80077bc:	f000 fbd6 	bl	8007f6c <__assert_func>
 80077c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077c4:	6004      	str	r4, [r0, #0]
 80077c6:	60c4      	str	r4, [r0, #12]
 80077c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80077cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077d0:	b94c      	cbnz	r4, 80077e6 <__pow5mult+0x66>
 80077d2:	f240 2171 	movw	r1, #625	; 0x271
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7ff ff12 	bl	8007600 <__i2b>
 80077dc:	2300      	movs	r3, #0
 80077de:	f8c8 0008 	str.w	r0, [r8, #8]
 80077e2:	4604      	mov	r4, r0
 80077e4:	6003      	str	r3, [r0, #0]
 80077e6:	f04f 0900 	mov.w	r9, #0
 80077ea:	07eb      	lsls	r3, r5, #31
 80077ec:	d50a      	bpl.n	8007804 <__pow5mult+0x84>
 80077ee:	4639      	mov	r1, r7
 80077f0:	4622      	mov	r2, r4
 80077f2:	4630      	mov	r0, r6
 80077f4:	f7ff ff1a 	bl	800762c <__multiply>
 80077f8:	4639      	mov	r1, r7
 80077fa:	4680      	mov	r8, r0
 80077fc:	4630      	mov	r0, r6
 80077fe:	f7ff fe49 	bl	8007494 <_Bfree>
 8007802:	4647      	mov	r7, r8
 8007804:	106d      	asrs	r5, r5, #1
 8007806:	d00b      	beq.n	8007820 <__pow5mult+0xa0>
 8007808:	6820      	ldr	r0, [r4, #0]
 800780a:	b938      	cbnz	r0, 800781c <__pow5mult+0x9c>
 800780c:	4622      	mov	r2, r4
 800780e:	4621      	mov	r1, r4
 8007810:	4630      	mov	r0, r6
 8007812:	f7ff ff0b 	bl	800762c <__multiply>
 8007816:	6020      	str	r0, [r4, #0]
 8007818:	f8c0 9000 	str.w	r9, [r0]
 800781c:	4604      	mov	r4, r0
 800781e:	e7e4      	b.n	80077ea <__pow5mult+0x6a>
 8007820:	4638      	mov	r0, r7
 8007822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007826:	bf00      	nop
 8007828:	08008b38 	.word	0x08008b38
 800782c:	0800896d 	.word	0x0800896d
 8007830:	080089ed 	.word	0x080089ed

08007834 <__lshift>:
 8007834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007838:	460c      	mov	r4, r1
 800783a:	6849      	ldr	r1, [r1, #4]
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007842:	68a3      	ldr	r3, [r4, #8]
 8007844:	4607      	mov	r7, r0
 8007846:	4691      	mov	r9, r2
 8007848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800784c:	f108 0601 	add.w	r6, r8, #1
 8007850:	42b3      	cmp	r3, r6
 8007852:	db0b      	blt.n	800786c <__lshift+0x38>
 8007854:	4638      	mov	r0, r7
 8007856:	f7ff fddd 	bl	8007414 <_Balloc>
 800785a:	4605      	mov	r5, r0
 800785c:	b948      	cbnz	r0, 8007872 <__lshift+0x3e>
 800785e:	4602      	mov	r2, r0
 8007860:	4b28      	ldr	r3, [pc, #160]	; (8007904 <__lshift+0xd0>)
 8007862:	4829      	ldr	r0, [pc, #164]	; (8007908 <__lshift+0xd4>)
 8007864:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007868:	f000 fb80 	bl	8007f6c <__assert_func>
 800786c:	3101      	adds	r1, #1
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	e7ee      	b.n	8007850 <__lshift+0x1c>
 8007872:	2300      	movs	r3, #0
 8007874:	f100 0114 	add.w	r1, r0, #20
 8007878:	f100 0210 	add.w	r2, r0, #16
 800787c:	4618      	mov	r0, r3
 800787e:	4553      	cmp	r3, sl
 8007880:	db33      	blt.n	80078ea <__lshift+0xb6>
 8007882:	6920      	ldr	r0, [r4, #16]
 8007884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007888:	f104 0314 	add.w	r3, r4, #20
 800788c:	f019 091f 	ands.w	r9, r9, #31
 8007890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007898:	d02b      	beq.n	80078f2 <__lshift+0xbe>
 800789a:	f1c9 0e20 	rsb	lr, r9, #32
 800789e:	468a      	mov	sl, r1
 80078a0:	2200      	movs	r2, #0
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	fa00 f009 	lsl.w	r0, r0, r9
 80078a8:	4310      	orrs	r0, r2
 80078aa:	f84a 0b04 	str.w	r0, [sl], #4
 80078ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b2:	459c      	cmp	ip, r3
 80078b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80078b8:	d8f3      	bhi.n	80078a2 <__lshift+0x6e>
 80078ba:	ebac 0304 	sub.w	r3, ip, r4
 80078be:	3b15      	subs	r3, #21
 80078c0:	f023 0303 	bic.w	r3, r3, #3
 80078c4:	3304      	adds	r3, #4
 80078c6:	f104 0015 	add.w	r0, r4, #21
 80078ca:	4584      	cmp	ip, r0
 80078cc:	bf38      	it	cc
 80078ce:	2304      	movcc	r3, #4
 80078d0:	50ca      	str	r2, [r1, r3]
 80078d2:	b10a      	cbz	r2, 80078d8 <__lshift+0xa4>
 80078d4:	f108 0602 	add.w	r6, r8, #2
 80078d8:	3e01      	subs	r6, #1
 80078da:	4638      	mov	r0, r7
 80078dc:	612e      	str	r6, [r5, #16]
 80078de:	4621      	mov	r1, r4
 80078e0:	f7ff fdd8 	bl	8007494 <_Bfree>
 80078e4:	4628      	mov	r0, r5
 80078e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80078ee:	3301      	adds	r3, #1
 80078f0:	e7c5      	b.n	800787e <__lshift+0x4a>
 80078f2:	3904      	subs	r1, #4
 80078f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80078fc:	459c      	cmp	ip, r3
 80078fe:	d8f9      	bhi.n	80078f4 <__lshift+0xc0>
 8007900:	e7ea      	b.n	80078d8 <__lshift+0xa4>
 8007902:	bf00      	nop
 8007904:	080089dc 	.word	0x080089dc
 8007908:	080089ed 	.word	0x080089ed

0800790c <__mcmp>:
 800790c:	b530      	push	{r4, r5, lr}
 800790e:	6902      	ldr	r2, [r0, #16]
 8007910:	690c      	ldr	r4, [r1, #16]
 8007912:	1b12      	subs	r2, r2, r4
 8007914:	d10e      	bne.n	8007934 <__mcmp+0x28>
 8007916:	f100 0314 	add.w	r3, r0, #20
 800791a:	3114      	adds	r1, #20
 800791c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007920:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007924:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007928:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800792c:	42a5      	cmp	r5, r4
 800792e:	d003      	beq.n	8007938 <__mcmp+0x2c>
 8007930:	d305      	bcc.n	800793e <__mcmp+0x32>
 8007932:	2201      	movs	r2, #1
 8007934:	4610      	mov	r0, r2
 8007936:	bd30      	pop	{r4, r5, pc}
 8007938:	4283      	cmp	r3, r0
 800793a:	d3f3      	bcc.n	8007924 <__mcmp+0x18>
 800793c:	e7fa      	b.n	8007934 <__mcmp+0x28>
 800793e:	f04f 32ff 	mov.w	r2, #4294967295
 8007942:	e7f7      	b.n	8007934 <__mcmp+0x28>

08007944 <__mdiff>:
 8007944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	460c      	mov	r4, r1
 800794a:	4606      	mov	r6, r0
 800794c:	4611      	mov	r1, r2
 800794e:	4620      	mov	r0, r4
 8007950:	4690      	mov	r8, r2
 8007952:	f7ff ffdb 	bl	800790c <__mcmp>
 8007956:	1e05      	subs	r5, r0, #0
 8007958:	d110      	bne.n	800797c <__mdiff+0x38>
 800795a:	4629      	mov	r1, r5
 800795c:	4630      	mov	r0, r6
 800795e:	f7ff fd59 	bl	8007414 <_Balloc>
 8007962:	b930      	cbnz	r0, 8007972 <__mdiff+0x2e>
 8007964:	4b3a      	ldr	r3, [pc, #232]	; (8007a50 <__mdiff+0x10c>)
 8007966:	4602      	mov	r2, r0
 8007968:	f240 2137 	movw	r1, #567	; 0x237
 800796c:	4839      	ldr	r0, [pc, #228]	; (8007a54 <__mdiff+0x110>)
 800796e:	f000 fafd 	bl	8007f6c <__assert_func>
 8007972:	2301      	movs	r3, #1
 8007974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797c:	bfa4      	itt	ge
 800797e:	4643      	movge	r3, r8
 8007980:	46a0      	movge	r8, r4
 8007982:	4630      	mov	r0, r6
 8007984:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007988:	bfa6      	itte	ge
 800798a:	461c      	movge	r4, r3
 800798c:	2500      	movge	r5, #0
 800798e:	2501      	movlt	r5, #1
 8007990:	f7ff fd40 	bl	8007414 <_Balloc>
 8007994:	b920      	cbnz	r0, 80079a0 <__mdiff+0x5c>
 8007996:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <__mdiff+0x10c>)
 8007998:	4602      	mov	r2, r0
 800799a:	f240 2145 	movw	r1, #581	; 0x245
 800799e:	e7e5      	b.n	800796c <__mdiff+0x28>
 80079a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80079a4:	6926      	ldr	r6, [r4, #16]
 80079a6:	60c5      	str	r5, [r0, #12]
 80079a8:	f104 0914 	add.w	r9, r4, #20
 80079ac:	f108 0514 	add.w	r5, r8, #20
 80079b0:	f100 0e14 	add.w	lr, r0, #20
 80079b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80079b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079bc:	f108 0210 	add.w	r2, r8, #16
 80079c0:	46f2      	mov	sl, lr
 80079c2:	2100      	movs	r1, #0
 80079c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80079c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80079cc:	fa11 f88b 	uxtah	r8, r1, fp
 80079d0:	b299      	uxth	r1, r3
 80079d2:	0c1b      	lsrs	r3, r3, #16
 80079d4:	eba8 0801 	sub.w	r8, r8, r1
 80079d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079e0:	fa1f f888 	uxth.w	r8, r8
 80079e4:	1419      	asrs	r1, r3, #16
 80079e6:	454e      	cmp	r6, r9
 80079e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079ec:	f84a 3b04 	str.w	r3, [sl], #4
 80079f0:	d8e8      	bhi.n	80079c4 <__mdiff+0x80>
 80079f2:	1b33      	subs	r3, r6, r4
 80079f4:	3b15      	subs	r3, #21
 80079f6:	f023 0303 	bic.w	r3, r3, #3
 80079fa:	3304      	adds	r3, #4
 80079fc:	3415      	adds	r4, #21
 80079fe:	42a6      	cmp	r6, r4
 8007a00:	bf38      	it	cc
 8007a02:	2304      	movcc	r3, #4
 8007a04:	441d      	add	r5, r3
 8007a06:	4473      	add	r3, lr
 8007a08:	469e      	mov	lr, r3
 8007a0a:	462e      	mov	r6, r5
 8007a0c:	4566      	cmp	r6, ip
 8007a0e:	d30e      	bcc.n	8007a2e <__mdiff+0xea>
 8007a10:	f10c 0203 	add.w	r2, ip, #3
 8007a14:	1b52      	subs	r2, r2, r5
 8007a16:	f022 0203 	bic.w	r2, r2, #3
 8007a1a:	3d03      	subs	r5, #3
 8007a1c:	45ac      	cmp	ip, r5
 8007a1e:	bf38      	it	cc
 8007a20:	2200      	movcc	r2, #0
 8007a22:	4413      	add	r3, r2
 8007a24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007a28:	b17a      	cbz	r2, 8007a4a <__mdiff+0x106>
 8007a2a:	6107      	str	r7, [r0, #16]
 8007a2c:	e7a4      	b.n	8007978 <__mdiff+0x34>
 8007a2e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a32:	fa11 f288 	uxtah	r2, r1, r8
 8007a36:	1414      	asrs	r4, r2, #16
 8007a38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a3c:	b292      	uxth	r2, r2
 8007a3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a42:	f84e 2b04 	str.w	r2, [lr], #4
 8007a46:	1421      	asrs	r1, r4, #16
 8007a48:	e7e0      	b.n	8007a0c <__mdiff+0xc8>
 8007a4a:	3f01      	subs	r7, #1
 8007a4c:	e7ea      	b.n	8007a24 <__mdiff+0xe0>
 8007a4e:	bf00      	nop
 8007a50:	080089dc 	.word	0x080089dc
 8007a54:	080089ed 	.word	0x080089ed

08007a58 <__d2b>:
 8007a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a5c:	460f      	mov	r7, r1
 8007a5e:	2101      	movs	r1, #1
 8007a60:	ec59 8b10 	vmov	r8, r9, d0
 8007a64:	4616      	mov	r6, r2
 8007a66:	f7ff fcd5 	bl	8007414 <_Balloc>
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	b930      	cbnz	r0, 8007a7c <__d2b+0x24>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	4b24      	ldr	r3, [pc, #144]	; (8007b04 <__d2b+0xac>)
 8007a72:	4825      	ldr	r0, [pc, #148]	; (8007b08 <__d2b+0xb0>)
 8007a74:	f240 310f 	movw	r1, #783	; 0x30f
 8007a78:	f000 fa78 	bl	8007f6c <__assert_func>
 8007a7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a84:	bb2d      	cbnz	r5, 8007ad2 <__d2b+0x7a>
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	f1b8 0300 	subs.w	r3, r8, #0
 8007a8c:	d026      	beq.n	8007adc <__d2b+0x84>
 8007a8e:	4668      	mov	r0, sp
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	f7ff fd87 	bl	80075a4 <__lo0bits>
 8007a96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a9a:	b1e8      	cbz	r0, 8007ad8 <__d2b+0x80>
 8007a9c:	f1c0 0320 	rsb	r3, r0, #32
 8007aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	40c2      	lsrs	r2, r0
 8007aa8:	6163      	str	r3, [r4, #20]
 8007aaa:	9201      	str	r2, [sp, #4]
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	61a3      	str	r3, [r4, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bf14      	ite	ne
 8007ab4:	2202      	movne	r2, #2
 8007ab6:	2201      	moveq	r2, #1
 8007ab8:	6122      	str	r2, [r4, #16]
 8007aba:	b1bd      	cbz	r5, 8007aec <__d2b+0x94>
 8007abc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ac0:	4405      	add	r5, r0
 8007ac2:	603d      	str	r5, [r7, #0]
 8007ac4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ac8:	6030      	str	r0, [r6, #0]
 8007aca:	4620      	mov	r0, r4
 8007acc:	b003      	add	sp, #12
 8007ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ad6:	e7d6      	b.n	8007a86 <__d2b+0x2e>
 8007ad8:	6161      	str	r1, [r4, #20]
 8007ada:	e7e7      	b.n	8007aac <__d2b+0x54>
 8007adc:	a801      	add	r0, sp, #4
 8007ade:	f7ff fd61 	bl	80075a4 <__lo0bits>
 8007ae2:	9b01      	ldr	r3, [sp, #4]
 8007ae4:	6163      	str	r3, [r4, #20]
 8007ae6:	3020      	adds	r0, #32
 8007ae8:	2201      	movs	r2, #1
 8007aea:	e7e5      	b.n	8007ab8 <__d2b+0x60>
 8007aec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007af0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007af4:	6038      	str	r0, [r7, #0]
 8007af6:	6918      	ldr	r0, [r3, #16]
 8007af8:	f7ff fd34 	bl	8007564 <__hi0bits>
 8007afc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b00:	e7e2      	b.n	8007ac8 <__d2b+0x70>
 8007b02:	bf00      	nop
 8007b04:	080089dc 	.word	0x080089dc
 8007b08:	080089ed 	.word	0x080089ed

08007b0c <__ssputs_r>:
 8007b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b10:	688e      	ldr	r6, [r1, #8]
 8007b12:	461f      	mov	r7, r3
 8007b14:	42be      	cmp	r6, r7
 8007b16:	680b      	ldr	r3, [r1, #0]
 8007b18:	4682      	mov	sl, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	4690      	mov	r8, r2
 8007b1e:	d82c      	bhi.n	8007b7a <__ssputs_r+0x6e>
 8007b20:	898a      	ldrh	r2, [r1, #12]
 8007b22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b26:	d026      	beq.n	8007b76 <__ssputs_r+0x6a>
 8007b28:	6965      	ldr	r5, [r4, #20]
 8007b2a:	6909      	ldr	r1, [r1, #16]
 8007b2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b30:	eba3 0901 	sub.w	r9, r3, r1
 8007b34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b38:	1c7b      	adds	r3, r7, #1
 8007b3a:	444b      	add	r3, r9
 8007b3c:	106d      	asrs	r5, r5, #1
 8007b3e:	429d      	cmp	r5, r3
 8007b40:	bf38      	it	cc
 8007b42:	461d      	movcc	r5, r3
 8007b44:	0553      	lsls	r3, r2, #21
 8007b46:	d527      	bpl.n	8007b98 <__ssputs_r+0x8c>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7ff fbd7 	bl	80072fc <_malloc_r>
 8007b4e:	4606      	mov	r6, r0
 8007b50:	b360      	cbz	r0, 8007bac <__ssputs_r+0xa0>
 8007b52:	6921      	ldr	r1, [r4, #16]
 8007b54:	464a      	mov	r2, r9
 8007b56:	f7fe fcd4 	bl	8006502 <memcpy>
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b64:	81a3      	strh	r3, [r4, #12]
 8007b66:	6126      	str	r6, [r4, #16]
 8007b68:	6165      	str	r5, [r4, #20]
 8007b6a:	444e      	add	r6, r9
 8007b6c:	eba5 0509 	sub.w	r5, r5, r9
 8007b70:	6026      	str	r6, [r4, #0]
 8007b72:	60a5      	str	r5, [r4, #8]
 8007b74:	463e      	mov	r6, r7
 8007b76:	42be      	cmp	r6, r7
 8007b78:	d900      	bls.n	8007b7c <__ssputs_r+0x70>
 8007b7a:	463e      	mov	r6, r7
 8007b7c:	6820      	ldr	r0, [r4, #0]
 8007b7e:	4632      	mov	r2, r6
 8007b80:	4641      	mov	r1, r8
 8007b82:	f000 f9c9 	bl	8007f18 <memmove>
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	1b9b      	subs	r3, r3, r6
 8007b8a:	60a3      	str	r3, [r4, #8]
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	4433      	add	r3, r6
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	2000      	movs	r0, #0
 8007b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b98:	462a      	mov	r2, r5
 8007b9a:	f000 fa2d 	bl	8007ff8 <_realloc_r>
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d1e0      	bne.n	8007b66 <__ssputs_r+0x5a>
 8007ba4:	6921      	ldr	r1, [r4, #16]
 8007ba6:	4650      	mov	r0, sl
 8007ba8:	f7ff fb34 	bl	8007214 <_free_r>
 8007bac:	230c      	movs	r3, #12
 8007bae:	f8ca 3000 	str.w	r3, [sl]
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	f04f 30ff 	mov.w	r0, #4294967295
 8007bbe:	e7e9      	b.n	8007b94 <__ssputs_r+0x88>

08007bc0 <_svfiprintf_r>:
 8007bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc4:	4698      	mov	r8, r3
 8007bc6:	898b      	ldrh	r3, [r1, #12]
 8007bc8:	061b      	lsls	r3, r3, #24
 8007bca:	b09d      	sub	sp, #116	; 0x74
 8007bcc:	4607      	mov	r7, r0
 8007bce:	460d      	mov	r5, r1
 8007bd0:	4614      	mov	r4, r2
 8007bd2:	d50e      	bpl.n	8007bf2 <_svfiprintf_r+0x32>
 8007bd4:	690b      	ldr	r3, [r1, #16]
 8007bd6:	b963      	cbnz	r3, 8007bf2 <_svfiprintf_r+0x32>
 8007bd8:	2140      	movs	r1, #64	; 0x40
 8007bda:	f7ff fb8f 	bl	80072fc <_malloc_r>
 8007bde:	6028      	str	r0, [r5, #0]
 8007be0:	6128      	str	r0, [r5, #16]
 8007be2:	b920      	cbnz	r0, 8007bee <_svfiprintf_r+0x2e>
 8007be4:	230c      	movs	r3, #12
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bec:	e0d0      	b.n	8007d90 <_svfiprintf_r+0x1d0>
 8007bee:	2340      	movs	r3, #64	; 0x40
 8007bf0:	616b      	str	r3, [r5, #20]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf6:	2320      	movs	r3, #32
 8007bf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c00:	2330      	movs	r3, #48	; 0x30
 8007c02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007da8 <_svfiprintf_r+0x1e8>
 8007c06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c0a:	f04f 0901 	mov.w	r9, #1
 8007c0e:	4623      	mov	r3, r4
 8007c10:	469a      	mov	sl, r3
 8007c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c16:	b10a      	cbz	r2, 8007c1c <_svfiprintf_r+0x5c>
 8007c18:	2a25      	cmp	r2, #37	; 0x25
 8007c1a:	d1f9      	bne.n	8007c10 <_svfiprintf_r+0x50>
 8007c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c20:	d00b      	beq.n	8007c3a <_svfiprintf_r+0x7a>
 8007c22:	465b      	mov	r3, fp
 8007c24:	4622      	mov	r2, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	4638      	mov	r0, r7
 8007c2a:	f7ff ff6f 	bl	8007b0c <__ssputs_r>
 8007c2e:	3001      	adds	r0, #1
 8007c30:	f000 80a9 	beq.w	8007d86 <_svfiprintf_r+0x1c6>
 8007c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c36:	445a      	add	r2, fp
 8007c38:	9209      	str	r2, [sp, #36]	; 0x24
 8007c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80a1 	beq.w	8007d86 <_svfiprintf_r+0x1c6>
 8007c44:	2300      	movs	r3, #0
 8007c46:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c4e:	f10a 0a01 	add.w	sl, sl, #1
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	9307      	str	r3, [sp, #28]
 8007c56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c5c:	4654      	mov	r4, sl
 8007c5e:	2205      	movs	r2, #5
 8007c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c64:	4850      	ldr	r0, [pc, #320]	; (8007da8 <_svfiprintf_r+0x1e8>)
 8007c66:	f7f8 fabb 	bl	80001e0 <memchr>
 8007c6a:	9a04      	ldr	r2, [sp, #16]
 8007c6c:	b9d8      	cbnz	r0, 8007ca6 <_svfiprintf_r+0xe6>
 8007c6e:	06d0      	lsls	r0, r2, #27
 8007c70:	bf44      	itt	mi
 8007c72:	2320      	movmi	r3, #32
 8007c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c78:	0711      	lsls	r1, r2, #28
 8007c7a:	bf44      	itt	mi
 8007c7c:	232b      	movmi	r3, #43	; 0x2b
 8007c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c82:	f89a 3000 	ldrb.w	r3, [sl]
 8007c86:	2b2a      	cmp	r3, #42	; 0x2a
 8007c88:	d015      	beq.n	8007cb6 <_svfiprintf_r+0xf6>
 8007c8a:	9a07      	ldr	r2, [sp, #28]
 8007c8c:	4654      	mov	r4, sl
 8007c8e:	2000      	movs	r0, #0
 8007c90:	f04f 0c0a 	mov.w	ip, #10
 8007c94:	4621      	mov	r1, r4
 8007c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c9a:	3b30      	subs	r3, #48	; 0x30
 8007c9c:	2b09      	cmp	r3, #9
 8007c9e:	d94d      	bls.n	8007d3c <_svfiprintf_r+0x17c>
 8007ca0:	b1b0      	cbz	r0, 8007cd0 <_svfiprintf_r+0x110>
 8007ca2:	9207      	str	r2, [sp, #28]
 8007ca4:	e014      	b.n	8007cd0 <_svfiprintf_r+0x110>
 8007ca6:	eba0 0308 	sub.w	r3, r0, r8
 8007caa:	fa09 f303 	lsl.w	r3, r9, r3
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	46a2      	mov	sl, r4
 8007cb4:	e7d2      	b.n	8007c5c <_svfiprintf_r+0x9c>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	1d19      	adds	r1, r3, #4
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	9103      	str	r1, [sp, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bfbb      	ittet	lt
 8007cc2:	425b      	neglt	r3, r3
 8007cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8007cc8:	9307      	strge	r3, [sp, #28]
 8007cca:	9307      	strlt	r3, [sp, #28]
 8007ccc:	bfb8      	it	lt
 8007cce:	9204      	strlt	r2, [sp, #16]
 8007cd0:	7823      	ldrb	r3, [r4, #0]
 8007cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8007cd4:	d10c      	bne.n	8007cf0 <_svfiprintf_r+0x130>
 8007cd6:	7863      	ldrb	r3, [r4, #1]
 8007cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cda:	d134      	bne.n	8007d46 <_svfiprintf_r+0x186>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	1d1a      	adds	r2, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	9203      	str	r2, [sp, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	bfb8      	it	lt
 8007ce8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cec:	3402      	adds	r4, #2
 8007cee:	9305      	str	r3, [sp, #20]
 8007cf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007db8 <_svfiprintf_r+0x1f8>
 8007cf4:	7821      	ldrb	r1, [r4, #0]
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	4650      	mov	r0, sl
 8007cfa:	f7f8 fa71 	bl	80001e0 <memchr>
 8007cfe:	b138      	cbz	r0, 8007d10 <_svfiprintf_r+0x150>
 8007d00:	9b04      	ldr	r3, [sp, #16]
 8007d02:	eba0 000a 	sub.w	r0, r0, sl
 8007d06:	2240      	movs	r2, #64	; 0x40
 8007d08:	4082      	lsls	r2, r0
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	3401      	adds	r4, #1
 8007d0e:	9304      	str	r3, [sp, #16]
 8007d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d14:	4825      	ldr	r0, [pc, #148]	; (8007dac <_svfiprintf_r+0x1ec>)
 8007d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d1a:	2206      	movs	r2, #6
 8007d1c:	f7f8 fa60 	bl	80001e0 <memchr>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d038      	beq.n	8007d96 <_svfiprintf_r+0x1d6>
 8007d24:	4b22      	ldr	r3, [pc, #136]	; (8007db0 <_svfiprintf_r+0x1f0>)
 8007d26:	bb1b      	cbnz	r3, 8007d70 <_svfiprintf_r+0x1b0>
 8007d28:	9b03      	ldr	r3, [sp, #12]
 8007d2a:	3307      	adds	r3, #7
 8007d2c:	f023 0307 	bic.w	r3, r3, #7
 8007d30:	3308      	adds	r3, #8
 8007d32:	9303      	str	r3, [sp, #12]
 8007d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d36:	4433      	add	r3, r6
 8007d38:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3a:	e768      	b.n	8007c0e <_svfiprintf_r+0x4e>
 8007d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d40:	460c      	mov	r4, r1
 8007d42:	2001      	movs	r0, #1
 8007d44:	e7a6      	b.n	8007c94 <_svfiprintf_r+0xd4>
 8007d46:	2300      	movs	r3, #0
 8007d48:	3401      	adds	r4, #1
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	f04f 0c0a 	mov.w	ip, #10
 8007d52:	4620      	mov	r0, r4
 8007d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d58:	3a30      	subs	r2, #48	; 0x30
 8007d5a:	2a09      	cmp	r2, #9
 8007d5c:	d903      	bls.n	8007d66 <_svfiprintf_r+0x1a6>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0c6      	beq.n	8007cf0 <_svfiprintf_r+0x130>
 8007d62:	9105      	str	r1, [sp, #20]
 8007d64:	e7c4      	b.n	8007cf0 <_svfiprintf_r+0x130>
 8007d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e7f0      	b.n	8007d52 <_svfiprintf_r+0x192>
 8007d70:	ab03      	add	r3, sp, #12
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	462a      	mov	r2, r5
 8007d76:	4b0f      	ldr	r3, [pc, #60]	; (8007db4 <_svfiprintf_r+0x1f4>)
 8007d78:	a904      	add	r1, sp, #16
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	f7fd fe56 	bl	8005a2c <_printf_float>
 8007d80:	1c42      	adds	r2, r0, #1
 8007d82:	4606      	mov	r6, r0
 8007d84:	d1d6      	bne.n	8007d34 <_svfiprintf_r+0x174>
 8007d86:	89ab      	ldrh	r3, [r5, #12]
 8007d88:	065b      	lsls	r3, r3, #25
 8007d8a:	f53f af2d 	bmi.w	8007be8 <_svfiprintf_r+0x28>
 8007d8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d90:	b01d      	add	sp, #116	; 0x74
 8007d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d96:	ab03      	add	r3, sp, #12
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	462a      	mov	r2, r5
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <_svfiprintf_r+0x1f4>)
 8007d9e:	a904      	add	r1, sp, #16
 8007da0:	4638      	mov	r0, r7
 8007da2:	f7fe f8e7 	bl	8005f74 <_printf_i>
 8007da6:	e7eb      	b.n	8007d80 <_svfiprintf_r+0x1c0>
 8007da8:	08008b44 	.word	0x08008b44
 8007dac:	08008b4e 	.word	0x08008b4e
 8007db0:	08005a2d 	.word	0x08005a2d
 8007db4:	08007b0d 	.word	0x08007b0d
 8007db8:	08008b4a 	.word	0x08008b4a

08007dbc <__sflush_r>:
 8007dbc:	898a      	ldrh	r2, [r1, #12]
 8007dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	0710      	lsls	r0, r2, #28
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	d458      	bmi.n	8007e7c <__sflush_r+0xc0>
 8007dca:	684b      	ldr	r3, [r1, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	dc05      	bgt.n	8007ddc <__sflush_r+0x20>
 8007dd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dc02      	bgt.n	8007ddc <__sflush_r+0x20>
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dde:	2e00      	cmp	r6, #0
 8007de0:	d0f9      	beq.n	8007dd6 <__sflush_r+0x1a>
 8007de2:	2300      	movs	r3, #0
 8007de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007de8:	682f      	ldr	r7, [r5, #0]
 8007dea:	6a21      	ldr	r1, [r4, #32]
 8007dec:	602b      	str	r3, [r5, #0]
 8007dee:	d032      	beq.n	8007e56 <__sflush_r+0x9a>
 8007df0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	075a      	lsls	r2, r3, #29
 8007df6:	d505      	bpl.n	8007e04 <__sflush_r+0x48>
 8007df8:	6863      	ldr	r3, [r4, #4]
 8007dfa:	1ac0      	subs	r0, r0, r3
 8007dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dfe:	b10b      	cbz	r3, 8007e04 <__sflush_r+0x48>
 8007e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e02:	1ac0      	subs	r0, r0, r3
 8007e04:	2300      	movs	r3, #0
 8007e06:	4602      	mov	r2, r0
 8007e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e0a:	6a21      	ldr	r1, [r4, #32]
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b0      	blx	r6
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	89a3      	ldrh	r3, [r4, #12]
 8007e14:	d106      	bne.n	8007e24 <__sflush_r+0x68>
 8007e16:	6829      	ldr	r1, [r5, #0]
 8007e18:	291d      	cmp	r1, #29
 8007e1a:	d82b      	bhi.n	8007e74 <__sflush_r+0xb8>
 8007e1c:	4a29      	ldr	r2, [pc, #164]	; (8007ec4 <__sflush_r+0x108>)
 8007e1e:	410a      	asrs	r2, r1
 8007e20:	07d6      	lsls	r6, r2, #31
 8007e22:	d427      	bmi.n	8007e74 <__sflush_r+0xb8>
 8007e24:	2200      	movs	r2, #0
 8007e26:	6062      	str	r2, [r4, #4]
 8007e28:	04d9      	lsls	r1, r3, #19
 8007e2a:	6922      	ldr	r2, [r4, #16]
 8007e2c:	6022      	str	r2, [r4, #0]
 8007e2e:	d504      	bpl.n	8007e3a <__sflush_r+0x7e>
 8007e30:	1c42      	adds	r2, r0, #1
 8007e32:	d101      	bne.n	8007e38 <__sflush_r+0x7c>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b903      	cbnz	r3, 8007e3a <__sflush_r+0x7e>
 8007e38:	6560      	str	r0, [r4, #84]	; 0x54
 8007e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e3c:	602f      	str	r7, [r5, #0]
 8007e3e:	2900      	cmp	r1, #0
 8007e40:	d0c9      	beq.n	8007dd6 <__sflush_r+0x1a>
 8007e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e46:	4299      	cmp	r1, r3
 8007e48:	d002      	beq.n	8007e50 <__sflush_r+0x94>
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f7ff f9e2 	bl	8007214 <_free_r>
 8007e50:	2000      	movs	r0, #0
 8007e52:	6360      	str	r0, [r4, #52]	; 0x34
 8007e54:	e7c0      	b.n	8007dd8 <__sflush_r+0x1c>
 8007e56:	2301      	movs	r3, #1
 8007e58:	4628      	mov	r0, r5
 8007e5a:	47b0      	blx	r6
 8007e5c:	1c41      	adds	r1, r0, #1
 8007e5e:	d1c8      	bne.n	8007df2 <__sflush_r+0x36>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0c5      	beq.n	8007df2 <__sflush_r+0x36>
 8007e66:	2b1d      	cmp	r3, #29
 8007e68:	d001      	beq.n	8007e6e <__sflush_r+0xb2>
 8007e6a:	2b16      	cmp	r3, #22
 8007e6c:	d101      	bne.n	8007e72 <__sflush_r+0xb6>
 8007e6e:	602f      	str	r7, [r5, #0]
 8007e70:	e7b1      	b.n	8007dd6 <__sflush_r+0x1a>
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	e7ad      	b.n	8007dd8 <__sflush_r+0x1c>
 8007e7c:	690f      	ldr	r7, [r1, #16]
 8007e7e:	2f00      	cmp	r7, #0
 8007e80:	d0a9      	beq.n	8007dd6 <__sflush_r+0x1a>
 8007e82:	0793      	lsls	r3, r2, #30
 8007e84:	680e      	ldr	r6, [r1, #0]
 8007e86:	bf08      	it	eq
 8007e88:	694b      	ldreq	r3, [r1, #20]
 8007e8a:	600f      	str	r7, [r1, #0]
 8007e8c:	bf18      	it	ne
 8007e8e:	2300      	movne	r3, #0
 8007e90:	eba6 0807 	sub.w	r8, r6, r7
 8007e94:	608b      	str	r3, [r1, #8]
 8007e96:	f1b8 0f00 	cmp.w	r8, #0
 8007e9a:	dd9c      	ble.n	8007dd6 <__sflush_r+0x1a>
 8007e9c:	6a21      	ldr	r1, [r4, #32]
 8007e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ea0:	4643      	mov	r3, r8
 8007ea2:	463a      	mov	r2, r7
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	47b0      	blx	r6
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	dc06      	bgt.n	8007eba <__sflush_r+0xfe>
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb8:	e78e      	b.n	8007dd8 <__sflush_r+0x1c>
 8007eba:	4407      	add	r7, r0
 8007ebc:	eba8 0800 	sub.w	r8, r8, r0
 8007ec0:	e7e9      	b.n	8007e96 <__sflush_r+0xda>
 8007ec2:	bf00      	nop
 8007ec4:	dfbffffe 	.word	0xdfbffffe

08007ec8 <_fflush_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	690b      	ldr	r3, [r1, #16]
 8007ecc:	4605      	mov	r5, r0
 8007ece:	460c      	mov	r4, r1
 8007ed0:	b913      	cbnz	r3, 8007ed8 <_fflush_r+0x10>
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	b118      	cbz	r0, 8007ee2 <_fflush_r+0x1a>
 8007eda:	6a03      	ldr	r3, [r0, #32]
 8007edc:	b90b      	cbnz	r3, 8007ee2 <_fflush_r+0x1a>
 8007ede:	f7fe f9f7 	bl	80062d0 <__sinit>
 8007ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0f3      	beq.n	8007ed2 <_fflush_r+0xa>
 8007eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007eec:	07d0      	lsls	r0, r2, #31
 8007eee:	d404      	bmi.n	8007efa <_fflush_r+0x32>
 8007ef0:	0599      	lsls	r1, r3, #22
 8007ef2:	d402      	bmi.n	8007efa <_fflush_r+0x32>
 8007ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ef6:	f7fe fb02 	bl	80064fe <__retarget_lock_acquire_recursive>
 8007efa:	4628      	mov	r0, r5
 8007efc:	4621      	mov	r1, r4
 8007efe:	f7ff ff5d 	bl	8007dbc <__sflush_r>
 8007f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f04:	07da      	lsls	r2, r3, #31
 8007f06:	4605      	mov	r5, r0
 8007f08:	d4e4      	bmi.n	8007ed4 <_fflush_r+0xc>
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	059b      	lsls	r3, r3, #22
 8007f0e:	d4e1      	bmi.n	8007ed4 <_fflush_r+0xc>
 8007f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f12:	f7fe faf5 	bl	8006500 <__retarget_lock_release_recursive>
 8007f16:	e7dd      	b.n	8007ed4 <_fflush_r+0xc>

08007f18 <memmove>:
 8007f18:	4288      	cmp	r0, r1
 8007f1a:	b510      	push	{r4, lr}
 8007f1c:	eb01 0402 	add.w	r4, r1, r2
 8007f20:	d902      	bls.n	8007f28 <memmove+0x10>
 8007f22:	4284      	cmp	r4, r0
 8007f24:	4623      	mov	r3, r4
 8007f26:	d807      	bhi.n	8007f38 <memmove+0x20>
 8007f28:	1e43      	subs	r3, r0, #1
 8007f2a:	42a1      	cmp	r1, r4
 8007f2c:	d008      	beq.n	8007f40 <memmove+0x28>
 8007f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f36:	e7f8      	b.n	8007f2a <memmove+0x12>
 8007f38:	4402      	add	r2, r0
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	428a      	cmp	r2, r1
 8007f3e:	d100      	bne.n	8007f42 <memmove+0x2a>
 8007f40:	bd10      	pop	{r4, pc}
 8007f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f4a:	e7f7      	b.n	8007f3c <memmove+0x24>

08007f4c <_sbrk_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	4d06      	ldr	r5, [pc, #24]	; (8007f68 <_sbrk_r+0x1c>)
 8007f50:	2300      	movs	r3, #0
 8007f52:	4604      	mov	r4, r0
 8007f54:	4608      	mov	r0, r1
 8007f56:	602b      	str	r3, [r5, #0]
 8007f58:	f7f9 fed8 	bl	8001d0c <_sbrk>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	d102      	bne.n	8007f66 <_sbrk_r+0x1a>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	b103      	cbz	r3, 8007f66 <_sbrk_r+0x1a>
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	200147d4 	.word	0x200147d4

08007f6c <__assert_func>:
 8007f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f6e:	4614      	mov	r4, r2
 8007f70:	461a      	mov	r2, r3
 8007f72:	4b09      	ldr	r3, [pc, #36]	; (8007f98 <__assert_func+0x2c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4605      	mov	r5, r0
 8007f78:	68d8      	ldr	r0, [r3, #12]
 8007f7a:	b14c      	cbz	r4, 8007f90 <__assert_func+0x24>
 8007f7c:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <__assert_func+0x30>)
 8007f7e:	9100      	str	r1, [sp, #0]
 8007f80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f84:	4906      	ldr	r1, [pc, #24]	; (8007fa0 <__assert_func+0x34>)
 8007f86:	462b      	mov	r3, r5
 8007f88:	f000 f872 	bl	8008070 <fiprintf>
 8007f8c:	f000 f882 	bl	8008094 <abort>
 8007f90:	4b04      	ldr	r3, [pc, #16]	; (8007fa4 <__assert_func+0x38>)
 8007f92:	461c      	mov	r4, r3
 8007f94:	e7f3      	b.n	8007f7e <__assert_func+0x12>
 8007f96:	bf00      	nop
 8007f98:	20000064 	.word	0x20000064
 8007f9c:	08008b5f 	.word	0x08008b5f
 8007fa0:	08008b6c 	.word	0x08008b6c
 8007fa4:	08008b9a 	.word	0x08008b9a

08007fa8 <_calloc_r>:
 8007fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007faa:	fba1 2402 	umull	r2, r4, r1, r2
 8007fae:	b94c      	cbnz	r4, 8007fc4 <_calloc_r+0x1c>
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	9201      	str	r2, [sp, #4]
 8007fb4:	f7ff f9a2 	bl	80072fc <_malloc_r>
 8007fb8:	9a01      	ldr	r2, [sp, #4]
 8007fba:	4605      	mov	r5, r0
 8007fbc:	b930      	cbnz	r0, 8007fcc <_calloc_r+0x24>
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	b003      	add	sp, #12
 8007fc2:	bd30      	pop	{r4, r5, pc}
 8007fc4:	220c      	movs	r2, #12
 8007fc6:	6002      	str	r2, [r0, #0]
 8007fc8:	2500      	movs	r5, #0
 8007fca:	e7f8      	b.n	8007fbe <_calloc_r+0x16>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	f7fe fa18 	bl	8006402 <memset>
 8007fd2:	e7f4      	b.n	8007fbe <_calloc_r+0x16>

08007fd4 <__ascii_mbtowc>:
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	b901      	cbnz	r1, 8007fda <__ascii_mbtowc+0x6>
 8007fd8:	a901      	add	r1, sp, #4
 8007fda:	b142      	cbz	r2, 8007fee <__ascii_mbtowc+0x1a>
 8007fdc:	b14b      	cbz	r3, 8007ff2 <__ascii_mbtowc+0x1e>
 8007fde:	7813      	ldrb	r3, [r2, #0]
 8007fe0:	600b      	str	r3, [r1, #0]
 8007fe2:	7812      	ldrb	r2, [r2, #0]
 8007fe4:	1e10      	subs	r0, r2, #0
 8007fe6:	bf18      	it	ne
 8007fe8:	2001      	movne	r0, #1
 8007fea:	b002      	add	sp, #8
 8007fec:	4770      	bx	lr
 8007fee:	4610      	mov	r0, r2
 8007ff0:	e7fb      	b.n	8007fea <__ascii_mbtowc+0x16>
 8007ff2:	f06f 0001 	mvn.w	r0, #1
 8007ff6:	e7f8      	b.n	8007fea <__ascii_mbtowc+0x16>

08007ff8 <_realloc_r>:
 8007ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	4614      	mov	r4, r2
 8008000:	460e      	mov	r6, r1
 8008002:	b921      	cbnz	r1, 800800e <_realloc_r+0x16>
 8008004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008008:	4611      	mov	r1, r2
 800800a:	f7ff b977 	b.w	80072fc <_malloc_r>
 800800e:	b92a      	cbnz	r2, 800801c <_realloc_r+0x24>
 8008010:	f7ff f900 	bl	8007214 <_free_r>
 8008014:	4625      	mov	r5, r4
 8008016:	4628      	mov	r0, r5
 8008018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800801c:	f000 f841 	bl	80080a2 <_malloc_usable_size_r>
 8008020:	4284      	cmp	r4, r0
 8008022:	4607      	mov	r7, r0
 8008024:	d802      	bhi.n	800802c <_realloc_r+0x34>
 8008026:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800802a:	d812      	bhi.n	8008052 <_realloc_r+0x5a>
 800802c:	4621      	mov	r1, r4
 800802e:	4640      	mov	r0, r8
 8008030:	f7ff f964 	bl	80072fc <_malloc_r>
 8008034:	4605      	mov	r5, r0
 8008036:	2800      	cmp	r0, #0
 8008038:	d0ed      	beq.n	8008016 <_realloc_r+0x1e>
 800803a:	42bc      	cmp	r4, r7
 800803c:	4622      	mov	r2, r4
 800803e:	4631      	mov	r1, r6
 8008040:	bf28      	it	cs
 8008042:	463a      	movcs	r2, r7
 8008044:	f7fe fa5d 	bl	8006502 <memcpy>
 8008048:	4631      	mov	r1, r6
 800804a:	4640      	mov	r0, r8
 800804c:	f7ff f8e2 	bl	8007214 <_free_r>
 8008050:	e7e1      	b.n	8008016 <_realloc_r+0x1e>
 8008052:	4635      	mov	r5, r6
 8008054:	e7df      	b.n	8008016 <_realloc_r+0x1e>

08008056 <__ascii_wctomb>:
 8008056:	b149      	cbz	r1, 800806c <__ascii_wctomb+0x16>
 8008058:	2aff      	cmp	r2, #255	; 0xff
 800805a:	bf85      	ittet	hi
 800805c:	238a      	movhi	r3, #138	; 0x8a
 800805e:	6003      	strhi	r3, [r0, #0]
 8008060:	700a      	strbls	r2, [r1, #0]
 8008062:	f04f 30ff 	movhi.w	r0, #4294967295
 8008066:	bf98      	it	ls
 8008068:	2001      	movls	r0, #1
 800806a:	4770      	bx	lr
 800806c:	4608      	mov	r0, r1
 800806e:	4770      	bx	lr

08008070 <fiprintf>:
 8008070:	b40e      	push	{r1, r2, r3}
 8008072:	b503      	push	{r0, r1, lr}
 8008074:	4601      	mov	r1, r0
 8008076:	ab03      	add	r3, sp, #12
 8008078:	4805      	ldr	r0, [pc, #20]	; (8008090 <fiprintf+0x20>)
 800807a:	f853 2b04 	ldr.w	r2, [r3], #4
 800807e:	6800      	ldr	r0, [r0, #0]
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	f000 f83f 	bl	8008104 <_vfiprintf_r>
 8008086:	b002      	add	sp, #8
 8008088:	f85d eb04 	ldr.w	lr, [sp], #4
 800808c:	b003      	add	sp, #12
 800808e:	4770      	bx	lr
 8008090:	20000064 	.word	0x20000064

08008094 <abort>:
 8008094:	b508      	push	{r3, lr}
 8008096:	2006      	movs	r0, #6
 8008098:	f000 fa0c 	bl	80084b4 <raise>
 800809c:	2001      	movs	r0, #1
 800809e:	f7f9 fdbd 	bl	8001c1c <_exit>

080080a2 <_malloc_usable_size_r>:
 80080a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a6:	1f18      	subs	r0, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bfbc      	itt	lt
 80080ac:	580b      	ldrlt	r3, [r1, r0]
 80080ae:	18c0      	addlt	r0, r0, r3
 80080b0:	4770      	bx	lr

080080b2 <__sfputc_r>:
 80080b2:	6893      	ldr	r3, [r2, #8]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	b410      	push	{r4}
 80080ba:	6093      	str	r3, [r2, #8]
 80080bc:	da08      	bge.n	80080d0 <__sfputc_r+0x1e>
 80080be:	6994      	ldr	r4, [r2, #24]
 80080c0:	42a3      	cmp	r3, r4
 80080c2:	db01      	blt.n	80080c8 <__sfputc_r+0x16>
 80080c4:	290a      	cmp	r1, #10
 80080c6:	d103      	bne.n	80080d0 <__sfputc_r+0x1e>
 80080c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080cc:	f000 b934 	b.w	8008338 <__swbuf_r>
 80080d0:	6813      	ldr	r3, [r2, #0]
 80080d2:	1c58      	adds	r0, r3, #1
 80080d4:	6010      	str	r0, [r2, #0]
 80080d6:	7019      	strb	r1, [r3, #0]
 80080d8:	4608      	mov	r0, r1
 80080da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <__sfputs_r>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	4606      	mov	r6, r0
 80080e4:	460f      	mov	r7, r1
 80080e6:	4614      	mov	r4, r2
 80080e8:	18d5      	adds	r5, r2, r3
 80080ea:	42ac      	cmp	r4, r5
 80080ec:	d101      	bne.n	80080f2 <__sfputs_r+0x12>
 80080ee:	2000      	movs	r0, #0
 80080f0:	e007      	b.n	8008102 <__sfputs_r+0x22>
 80080f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f6:	463a      	mov	r2, r7
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff ffda 	bl	80080b2 <__sfputc_r>
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	d1f3      	bne.n	80080ea <__sfputs_r+0xa>
 8008102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008104 <_vfiprintf_r>:
 8008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	460d      	mov	r5, r1
 800810a:	b09d      	sub	sp, #116	; 0x74
 800810c:	4614      	mov	r4, r2
 800810e:	4698      	mov	r8, r3
 8008110:	4606      	mov	r6, r0
 8008112:	b118      	cbz	r0, 800811c <_vfiprintf_r+0x18>
 8008114:	6a03      	ldr	r3, [r0, #32]
 8008116:	b90b      	cbnz	r3, 800811c <_vfiprintf_r+0x18>
 8008118:	f7fe f8da 	bl	80062d0 <__sinit>
 800811c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800811e:	07d9      	lsls	r1, r3, #31
 8008120:	d405      	bmi.n	800812e <_vfiprintf_r+0x2a>
 8008122:	89ab      	ldrh	r3, [r5, #12]
 8008124:	059a      	lsls	r2, r3, #22
 8008126:	d402      	bmi.n	800812e <_vfiprintf_r+0x2a>
 8008128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800812a:	f7fe f9e8 	bl	80064fe <__retarget_lock_acquire_recursive>
 800812e:	89ab      	ldrh	r3, [r5, #12]
 8008130:	071b      	lsls	r3, r3, #28
 8008132:	d501      	bpl.n	8008138 <_vfiprintf_r+0x34>
 8008134:	692b      	ldr	r3, [r5, #16]
 8008136:	b99b      	cbnz	r3, 8008160 <_vfiprintf_r+0x5c>
 8008138:	4629      	mov	r1, r5
 800813a:	4630      	mov	r0, r6
 800813c:	f000 f93a 	bl	80083b4 <__swsetup_r>
 8008140:	b170      	cbz	r0, 8008160 <_vfiprintf_r+0x5c>
 8008142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008144:	07dc      	lsls	r4, r3, #31
 8008146:	d504      	bpl.n	8008152 <_vfiprintf_r+0x4e>
 8008148:	f04f 30ff 	mov.w	r0, #4294967295
 800814c:	b01d      	add	sp, #116	; 0x74
 800814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008152:	89ab      	ldrh	r3, [r5, #12]
 8008154:	0598      	lsls	r0, r3, #22
 8008156:	d4f7      	bmi.n	8008148 <_vfiprintf_r+0x44>
 8008158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800815a:	f7fe f9d1 	bl	8006500 <__retarget_lock_release_recursive>
 800815e:	e7f3      	b.n	8008148 <_vfiprintf_r+0x44>
 8008160:	2300      	movs	r3, #0
 8008162:	9309      	str	r3, [sp, #36]	; 0x24
 8008164:	2320      	movs	r3, #32
 8008166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800816a:	f8cd 800c 	str.w	r8, [sp, #12]
 800816e:	2330      	movs	r3, #48	; 0x30
 8008170:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008324 <_vfiprintf_r+0x220>
 8008174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008178:	f04f 0901 	mov.w	r9, #1
 800817c:	4623      	mov	r3, r4
 800817e:	469a      	mov	sl, r3
 8008180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008184:	b10a      	cbz	r2, 800818a <_vfiprintf_r+0x86>
 8008186:	2a25      	cmp	r2, #37	; 0x25
 8008188:	d1f9      	bne.n	800817e <_vfiprintf_r+0x7a>
 800818a:	ebba 0b04 	subs.w	fp, sl, r4
 800818e:	d00b      	beq.n	80081a8 <_vfiprintf_r+0xa4>
 8008190:	465b      	mov	r3, fp
 8008192:	4622      	mov	r2, r4
 8008194:	4629      	mov	r1, r5
 8008196:	4630      	mov	r0, r6
 8008198:	f7ff ffa2 	bl	80080e0 <__sfputs_r>
 800819c:	3001      	adds	r0, #1
 800819e:	f000 80a9 	beq.w	80082f4 <_vfiprintf_r+0x1f0>
 80081a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081a4:	445a      	add	r2, fp
 80081a6:	9209      	str	r2, [sp, #36]	; 0x24
 80081a8:	f89a 3000 	ldrb.w	r3, [sl]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 80a1 	beq.w	80082f4 <_vfiprintf_r+0x1f0>
 80081b2:	2300      	movs	r3, #0
 80081b4:	f04f 32ff 	mov.w	r2, #4294967295
 80081b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081bc:	f10a 0a01 	add.w	sl, sl, #1
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	9307      	str	r3, [sp, #28]
 80081c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081c8:	931a      	str	r3, [sp, #104]	; 0x68
 80081ca:	4654      	mov	r4, sl
 80081cc:	2205      	movs	r2, #5
 80081ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d2:	4854      	ldr	r0, [pc, #336]	; (8008324 <_vfiprintf_r+0x220>)
 80081d4:	f7f8 f804 	bl	80001e0 <memchr>
 80081d8:	9a04      	ldr	r2, [sp, #16]
 80081da:	b9d8      	cbnz	r0, 8008214 <_vfiprintf_r+0x110>
 80081dc:	06d1      	lsls	r1, r2, #27
 80081de:	bf44      	itt	mi
 80081e0:	2320      	movmi	r3, #32
 80081e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081e6:	0713      	lsls	r3, r2, #28
 80081e8:	bf44      	itt	mi
 80081ea:	232b      	movmi	r3, #43	; 0x2b
 80081ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081f0:	f89a 3000 	ldrb.w	r3, [sl]
 80081f4:	2b2a      	cmp	r3, #42	; 0x2a
 80081f6:	d015      	beq.n	8008224 <_vfiprintf_r+0x120>
 80081f8:	9a07      	ldr	r2, [sp, #28]
 80081fa:	4654      	mov	r4, sl
 80081fc:	2000      	movs	r0, #0
 80081fe:	f04f 0c0a 	mov.w	ip, #10
 8008202:	4621      	mov	r1, r4
 8008204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008208:	3b30      	subs	r3, #48	; 0x30
 800820a:	2b09      	cmp	r3, #9
 800820c:	d94d      	bls.n	80082aa <_vfiprintf_r+0x1a6>
 800820e:	b1b0      	cbz	r0, 800823e <_vfiprintf_r+0x13a>
 8008210:	9207      	str	r2, [sp, #28]
 8008212:	e014      	b.n	800823e <_vfiprintf_r+0x13a>
 8008214:	eba0 0308 	sub.w	r3, r0, r8
 8008218:	fa09 f303 	lsl.w	r3, r9, r3
 800821c:	4313      	orrs	r3, r2
 800821e:	9304      	str	r3, [sp, #16]
 8008220:	46a2      	mov	sl, r4
 8008222:	e7d2      	b.n	80081ca <_vfiprintf_r+0xc6>
 8008224:	9b03      	ldr	r3, [sp, #12]
 8008226:	1d19      	adds	r1, r3, #4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	9103      	str	r1, [sp, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	bfbb      	ittet	lt
 8008230:	425b      	neglt	r3, r3
 8008232:	f042 0202 	orrlt.w	r2, r2, #2
 8008236:	9307      	strge	r3, [sp, #28]
 8008238:	9307      	strlt	r3, [sp, #28]
 800823a:	bfb8      	it	lt
 800823c:	9204      	strlt	r2, [sp, #16]
 800823e:	7823      	ldrb	r3, [r4, #0]
 8008240:	2b2e      	cmp	r3, #46	; 0x2e
 8008242:	d10c      	bne.n	800825e <_vfiprintf_r+0x15a>
 8008244:	7863      	ldrb	r3, [r4, #1]
 8008246:	2b2a      	cmp	r3, #42	; 0x2a
 8008248:	d134      	bne.n	80082b4 <_vfiprintf_r+0x1b0>
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	1d1a      	adds	r2, r3, #4
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	9203      	str	r2, [sp, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	bfb8      	it	lt
 8008256:	f04f 33ff 	movlt.w	r3, #4294967295
 800825a:	3402      	adds	r4, #2
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008334 <_vfiprintf_r+0x230>
 8008262:	7821      	ldrb	r1, [r4, #0]
 8008264:	2203      	movs	r2, #3
 8008266:	4650      	mov	r0, sl
 8008268:	f7f7 ffba 	bl	80001e0 <memchr>
 800826c:	b138      	cbz	r0, 800827e <_vfiprintf_r+0x17a>
 800826e:	9b04      	ldr	r3, [sp, #16]
 8008270:	eba0 000a 	sub.w	r0, r0, sl
 8008274:	2240      	movs	r2, #64	; 0x40
 8008276:	4082      	lsls	r2, r0
 8008278:	4313      	orrs	r3, r2
 800827a:	3401      	adds	r4, #1
 800827c:	9304      	str	r3, [sp, #16]
 800827e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008282:	4829      	ldr	r0, [pc, #164]	; (8008328 <_vfiprintf_r+0x224>)
 8008284:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008288:	2206      	movs	r2, #6
 800828a:	f7f7 ffa9 	bl	80001e0 <memchr>
 800828e:	2800      	cmp	r0, #0
 8008290:	d03f      	beq.n	8008312 <_vfiprintf_r+0x20e>
 8008292:	4b26      	ldr	r3, [pc, #152]	; (800832c <_vfiprintf_r+0x228>)
 8008294:	bb1b      	cbnz	r3, 80082de <_vfiprintf_r+0x1da>
 8008296:	9b03      	ldr	r3, [sp, #12]
 8008298:	3307      	adds	r3, #7
 800829a:	f023 0307 	bic.w	r3, r3, #7
 800829e:	3308      	adds	r3, #8
 80082a0:	9303      	str	r3, [sp, #12]
 80082a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a4:	443b      	add	r3, r7
 80082a6:	9309      	str	r3, [sp, #36]	; 0x24
 80082a8:	e768      	b.n	800817c <_vfiprintf_r+0x78>
 80082aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ae:	460c      	mov	r4, r1
 80082b0:	2001      	movs	r0, #1
 80082b2:	e7a6      	b.n	8008202 <_vfiprintf_r+0xfe>
 80082b4:	2300      	movs	r3, #0
 80082b6:	3401      	adds	r4, #1
 80082b8:	9305      	str	r3, [sp, #20]
 80082ba:	4619      	mov	r1, r3
 80082bc:	f04f 0c0a 	mov.w	ip, #10
 80082c0:	4620      	mov	r0, r4
 80082c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082c6:	3a30      	subs	r2, #48	; 0x30
 80082c8:	2a09      	cmp	r2, #9
 80082ca:	d903      	bls.n	80082d4 <_vfiprintf_r+0x1d0>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0c6      	beq.n	800825e <_vfiprintf_r+0x15a>
 80082d0:	9105      	str	r1, [sp, #20]
 80082d2:	e7c4      	b.n	800825e <_vfiprintf_r+0x15a>
 80082d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80082d8:	4604      	mov	r4, r0
 80082da:	2301      	movs	r3, #1
 80082dc:	e7f0      	b.n	80082c0 <_vfiprintf_r+0x1bc>
 80082de:	ab03      	add	r3, sp, #12
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	462a      	mov	r2, r5
 80082e4:	4b12      	ldr	r3, [pc, #72]	; (8008330 <_vfiprintf_r+0x22c>)
 80082e6:	a904      	add	r1, sp, #16
 80082e8:	4630      	mov	r0, r6
 80082ea:	f7fd fb9f 	bl	8005a2c <_printf_float>
 80082ee:	4607      	mov	r7, r0
 80082f0:	1c78      	adds	r0, r7, #1
 80082f2:	d1d6      	bne.n	80082a2 <_vfiprintf_r+0x19e>
 80082f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082f6:	07d9      	lsls	r1, r3, #31
 80082f8:	d405      	bmi.n	8008306 <_vfiprintf_r+0x202>
 80082fa:	89ab      	ldrh	r3, [r5, #12]
 80082fc:	059a      	lsls	r2, r3, #22
 80082fe:	d402      	bmi.n	8008306 <_vfiprintf_r+0x202>
 8008300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008302:	f7fe f8fd 	bl	8006500 <__retarget_lock_release_recursive>
 8008306:	89ab      	ldrh	r3, [r5, #12]
 8008308:	065b      	lsls	r3, r3, #25
 800830a:	f53f af1d 	bmi.w	8008148 <_vfiprintf_r+0x44>
 800830e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008310:	e71c      	b.n	800814c <_vfiprintf_r+0x48>
 8008312:	ab03      	add	r3, sp, #12
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	462a      	mov	r2, r5
 8008318:	4b05      	ldr	r3, [pc, #20]	; (8008330 <_vfiprintf_r+0x22c>)
 800831a:	a904      	add	r1, sp, #16
 800831c:	4630      	mov	r0, r6
 800831e:	f7fd fe29 	bl	8005f74 <_printf_i>
 8008322:	e7e4      	b.n	80082ee <_vfiprintf_r+0x1ea>
 8008324:	08008b44 	.word	0x08008b44
 8008328:	08008b4e 	.word	0x08008b4e
 800832c:	08005a2d 	.word	0x08005a2d
 8008330:	080080e1 	.word	0x080080e1
 8008334:	08008b4a 	.word	0x08008b4a

08008338 <__swbuf_r>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	460e      	mov	r6, r1
 800833c:	4614      	mov	r4, r2
 800833e:	4605      	mov	r5, r0
 8008340:	b118      	cbz	r0, 800834a <__swbuf_r+0x12>
 8008342:	6a03      	ldr	r3, [r0, #32]
 8008344:	b90b      	cbnz	r3, 800834a <__swbuf_r+0x12>
 8008346:	f7fd ffc3 	bl	80062d0 <__sinit>
 800834a:	69a3      	ldr	r3, [r4, #24]
 800834c:	60a3      	str	r3, [r4, #8]
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	071a      	lsls	r2, r3, #28
 8008352:	d525      	bpl.n	80083a0 <__swbuf_r+0x68>
 8008354:	6923      	ldr	r3, [r4, #16]
 8008356:	b31b      	cbz	r3, 80083a0 <__swbuf_r+0x68>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	6922      	ldr	r2, [r4, #16]
 800835c:	1a98      	subs	r0, r3, r2
 800835e:	6963      	ldr	r3, [r4, #20]
 8008360:	b2f6      	uxtb	r6, r6
 8008362:	4283      	cmp	r3, r0
 8008364:	4637      	mov	r7, r6
 8008366:	dc04      	bgt.n	8008372 <__swbuf_r+0x3a>
 8008368:	4621      	mov	r1, r4
 800836a:	4628      	mov	r0, r5
 800836c:	f7ff fdac 	bl	8007ec8 <_fflush_r>
 8008370:	b9e0      	cbnz	r0, 80083ac <__swbuf_r+0x74>
 8008372:	68a3      	ldr	r3, [r4, #8]
 8008374:	3b01      	subs	r3, #1
 8008376:	60a3      	str	r3, [r4, #8]
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	6022      	str	r2, [r4, #0]
 800837e:	701e      	strb	r6, [r3, #0]
 8008380:	6962      	ldr	r2, [r4, #20]
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	429a      	cmp	r2, r3
 8008386:	d004      	beq.n	8008392 <__swbuf_r+0x5a>
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	07db      	lsls	r3, r3, #31
 800838c:	d506      	bpl.n	800839c <__swbuf_r+0x64>
 800838e:	2e0a      	cmp	r6, #10
 8008390:	d104      	bne.n	800839c <__swbuf_r+0x64>
 8008392:	4621      	mov	r1, r4
 8008394:	4628      	mov	r0, r5
 8008396:	f7ff fd97 	bl	8007ec8 <_fflush_r>
 800839a:	b938      	cbnz	r0, 80083ac <__swbuf_r+0x74>
 800839c:	4638      	mov	r0, r7
 800839e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a0:	4621      	mov	r1, r4
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 f806 	bl	80083b4 <__swsetup_r>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d0d5      	beq.n	8008358 <__swbuf_r+0x20>
 80083ac:	f04f 37ff 	mov.w	r7, #4294967295
 80083b0:	e7f4      	b.n	800839c <__swbuf_r+0x64>
	...

080083b4 <__swsetup_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4b2a      	ldr	r3, [pc, #168]	; (8008460 <__swsetup_r+0xac>)
 80083b8:	4605      	mov	r5, r0
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	460c      	mov	r4, r1
 80083be:	b118      	cbz	r0, 80083c8 <__swsetup_r+0x14>
 80083c0:	6a03      	ldr	r3, [r0, #32]
 80083c2:	b90b      	cbnz	r3, 80083c8 <__swsetup_r+0x14>
 80083c4:	f7fd ff84 	bl	80062d0 <__sinit>
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083ce:	0718      	lsls	r0, r3, #28
 80083d0:	d422      	bmi.n	8008418 <__swsetup_r+0x64>
 80083d2:	06d9      	lsls	r1, r3, #27
 80083d4:	d407      	bmi.n	80083e6 <__swsetup_r+0x32>
 80083d6:	2309      	movs	r3, #9
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	e034      	b.n	8008450 <__swsetup_r+0x9c>
 80083e6:	0758      	lsls	r0, r3, #29
 80083e8:	d512      	bpl.n	8008410 <__swsetup_r+0x5c>
 80083ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083ec:	b141      	cbz	r1, 8008400 <__swsetup_r+0x4c>
 80083ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083f2:	4299      	cmp	r1, r3
 80083f4:	d002      	beq.n	80083fc <__swsetup_r+0x48>
 80083f6:	4628      	mov	r0, r5
 80083f8:	f7fe ff0c 	bl	8007214 <_free_r>
 80083fc:	2300      	movs	r3, #0
 80083fe:	6363      	str	r3, [r4, #52]	; 0x34
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008406:	81a3      	strh	r3, [r4, #12]
 8008408:	2300      	movs	r3, #0
 800840a:	6063      	str	r3, [r4, #4]
 800840c:	6923      	ldr	r3, [r4, #16]
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	f043 0308 	orr.w	r3, r3, #8
 8008416:	81a3      	strh	r3, [r4, #12]
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	b94b      	cbnz	r3, 8008430 <__swsetup_r+0x7c>
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008426:	d003      	beq.n	8008430 <__swsetup_r+0x7c>
 8008428:	4621      	mov	r1, r4
 800842a:	4628      	mov	r0, r5
 800842c:	f000 f884 	bl	8008538 <__smakebuf_r>
 8008430:	89a0      	ldrh	r0, [r4, #12]
 8008432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008436:	f010 0301 	ands.w	r3, r0, #1
 800843a:	d00a      	beq.n	8008452 <__swsetup_r+0x9e>
 800843c:	2300      	movs	r3, #0
 800843e:	60a3      	str	r3, [r4, #8]
 8008440:	6963      	ldr	r3, [r4, #20]
 8008442:	425b      	negs	r3, r3
 8008444:	61a3      	str	r3, [r4, #24]
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	b943      	cbnz	r3, 800845c <__swsetup_r+0xa8>
 800844a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800844e:	d1c4      	bne.n	80083da <__swsetup_r+0x26>
 8008450:	bd38      	pop	{r3, r4, r5, pc}
 8008452:	0781      	lsls	r1, r0, #30
 8008454:	bf58      	it	pl
 8008456:	6963      	ldrpl	r3, [r4, #20]
 8008458:	60a3      	str	r3, [r4, #8]
 800845a:	e7f4      	b.n	8008446 <__swsetup_r+0x92>
 800845c:	2000      	movs	r0, #0
 800845e:	e7f7      	b.n	8008450 <__swsetup_r+0x9c>
 8008460:	20000064 	.word	0x20000064

08008464 <_raise_r>:
 8008464:	291f      	cmp	r1, #31
 8008466:	b538      	push	{r3, r4, r5, lr}
 8008468:	4604      	mov	r4, r0
 800846a:	460d      	mov	r5, r1
 800846c:	d904      	bls.n	8008478 <_raise_r+0x14>
 800846e:	2316      	movs	r3, #22
 8008470:	6003      	str	r3, [r0, #0]
 8008472:	f04f 30ff 	mov.w	r0, #4294967295
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800847a:	b112      	cbz	r2, 8008482 <_raise_r+0x1e>
 800847c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008480:	b94b      	cbnz	r3, 8008496 <_raise_r+0x32>
 8008482:	4620      	mov	r0, r4
 8008484:	f000 f830 	bl	80084e8 <_getpid_r>
 8008488:	462a      	mov	r2, r5
 800848a:	4601      	mov	r1, r0
 800848c:	4620      	mov	r0, r4
 800848e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008492:	f000 b817 	b.w	80084c4 <_kill_r>
 8008496:	2b01      	cmp	r3, #1
 8008498:	d00a      	beq.n	80084b0 <_raise_r+0x4c>
 800849a:	1c59      	adds	r1, r3, #1
 800849c:	d103      	bne.n	80084a6 <_raise_r+0x42>
 800849e:	2316      	movs	r3, #22
 80084a0:	6003      	str	r3, [r0, #0]
 80084a2:	2001      	movs	r0, #1
 80084a4:	e7e7      	b.n	8008476 <_raise_r+0x12>
 80084a6:	2400      	movs	r4, #0
 80084a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084ac:	4628      	mov	r0, r5
 80084ae:	4798      	blx	r3
 80084b0:	2000      	movs	r0, #0
 80084b2:	e7e0      	b.n	8008476 <_raise_r+0x12>

080084b4 <raise>:
 80084b4:	4b02      	ldr	r3, [pc, #8]	; (80084c0 <raise+0xc>)
 80084b6:	4601      	mov	r1, r0
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	f7ff bfd3 	b.w	8008464 <_raise_r>
 80084be:	bf00      	nop
 80084c0:	20000064 	.word	0x20000064

080084c4 <_kill_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4d07      	ldr	r5, [pc, #28]	; (80084e4 <_kill_r+0x20>)
 80084c8:	2300      	movs	r3, #0
 80084ca:	4604      	mov	r4, r0
 80084cc:	4608      	mov	r0, r1
 80084ce:	4611      	mov	r1, r2
 80084d0:	602b      	str	r3, [r5, #0]
 80084d2:	f7f9 fb93 	bl	8001bfc <_kill>
 80084d6:	1c43      	adds	r3, r0, #1
 80084d8:	d102      	bne.n	80084e0 <_kill_r+0x1c>
 80084da:	682b      	ldr	r3, [r5, #0]
 80084dc:	b103      	cbz	r3, 80084e0 <_kill_r+0x1c>
 80084de:	6023      	str	r3, [r4, #0]
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	bf00      	nop
 80084e4:	200147d4 	.word	0x200147d4

080084e8 <_getpid_r>:
 80084e8:	f7f9 bb80 	b.w	8001bec <_getpid>

080084ec <__swhatbuf_r>:
 80084ec:	b570      	push	{r4, r5, r6, lr}
 80084ee:	460c      	mov	r4, r1
 80084f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f4:	2900      	cmp	r1, #0
 80084f6:	b096      	sub	sp, #88	; 0x58
 80084f8:	4615      	mov	r5, r2
 80084fa:	461e      	mov	r6, r3
 80084fc:	da0d      	bge.n	800851a <__swhatbuf_r+0x2e>
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008504:	f04f 0100 	mov.w	r1, #0
 8008508:	bf0c      	ite	eq
 800850a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800850e:	2340      	movne	r3, #64	; 0x40
 8008510:	2000      	movs	r0, #0
 8008512:	6031      	str	r1, [r6, #0]
 8008514:	602b      	str	r3, [r5, #0]
 8008516:	b016      	add	sp, #88	; 0x58
 8008518:	bd70      	pop	{r4, r5, r6, pc}
 800851a:	466a      	mov	r2, sp
 800851c:	f000 f848 	bl	80085b0 <_fstat_r>
 8008520:	2800      	cmp	r0, #0
 8008522:	dbec      	blt.n	80084fe <__swhatbuf_r+0x12>
 8008524:	9901      	ldr	r1, [sp, #4]
 8008526:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800852a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800852e:	4259      	negs	r1, r3
 8008530:	4159      	adcs	r1, r3
 8008532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008536:	e7eb      	b.n	8008510 <__swhatbuf_r+0x24>

08008538 <__smakebuf_r>:
 8008538:	898b      	ldrh	r3, [r1, #12]
 800853a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800853c:	079d      	lsls	r5, r3, #30
 800853e:	4606      	mov	r6, r0
 8008540:	460c      	mov	r4, r1
 8008542:	d507      	bpl.n	8008554 <__smakebuf_r+0x1c>
 8008544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	6123      	str	r3, [r4, #16]
 800854c:	2301      	movs	r3, #1
 800854e:	6163      	str	r3, [r4, #20]
 8008550:	b002      	add	sp, #8
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	ab01      	add	r3, sp, #4
 8008556:	466a      	mov	r2, sp
 8008558:	f7ff ffc8 	bl	80084ec <__swhatbuf_r>
 800855c:	9900      	ldr	r1, [sp, #0]
 800855e:	4605      	mov	r5, r0
 8008560:	4630      	mov	r0, r6
 8008562:	f7fe fecb 	bl	80072fc <_malloc_r>
 8008566:	b948      	cbnz	r0, 800857c <__smakebuf_r+0x44>
 8008568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800856c:	059a      	lsls	r2, r3, #22
 800856e:	d4ef      	bmi.n	8008550 <__smakebuf_r+0x18>
 8008570:	f023 0303 	bic.w	r3, r3, #3
 8008574:	f043 0302 	orr.w	r3, r3, #2
 8008578:	81a3      	strh	r3, [r4, #12]
 800857a:	e7e3      	b.n	8008544 <__smakebuf_r+0xc>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	6020      	str	r0, [r4, #0]
 8008580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008584:	81a3      	strh	r3, [r4, #12]
 8008586:	9b00      	ldr	r3, [sp, #0]
 8008588:	6163      	str	r3, [r4, #20]
 800858a:	9b01      	ldr	r3, [sp, #4]
 800858c:	6120      	str	r0, [r4, #16]
 800858e:	b15b      	cbz	r3, 80085a8 <__smakebuf_r+0x70>
 8008590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008594:	4630      	mov	r0, r6
 8008596:	f000 f81d 	bl	80085d4 <_isatty_r>
 800859a:	b128      	cbz	r0, 80085a8 <__smakebuf_r+0x70>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f023 0303 	bic.w	r3, r3, #3
 80085a2:	f043 0301 	orr.w	r3, r3, #1
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	431d      	orrs	r5, r3
 80085ac:	81a5      	strh	r5, [r4, #12]
 80085ae:	e7cf      	b.n	8008550 <__smakebuf_r+0x18>

080085b0 <_fstat_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4d07      	ldr	r5, [pc, #28]	; (80085d0 <_fstat_r+0x20>)
 80085b4:	2300      	movs	r3, #0
 80085b6:	4604      	mov	r4, r0
 80085b8:	4608      	mov	r0, r1
 80085ba:	4611      	mov	r1, r2
 80085bc:	602b      	str	r3, [r5, #0]
 80085be:	f7f9 fb7c 	bl	8001cba <_fstat>
 80085c2:	1c43      	adds	r3, r0, #1
 80085c4:	d102      	bne.n	80085cc <_fstat_r+0x1c>
 80085c6:	682b      	ldr	r3, [r5, #0]
 80085c8:	b103      	cbz	r3, 80085cc <_fstat_r+0x1c>
 80085ca:	6023      	str	r3, [r4, #0]
 80085cc:	bd38      	pop	{r3, r4, r5, pc}
 80085ce:	bf00      	nop
 80085d0:	200147d4 	.word	0x200147d4

080085d4 <_isatty_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4d06      	ldr	r5, [pc, #24]	; (80085f0 <_isatty_r+0x1c>)
 80085d8:	2300      	movs	r3, #0
 80085da:	4604      	mov	r4, r0
 80085dc:	4608      	mov	r0, r1
 80085de:	602b      	str	r3, [r5, #0]
 80085e0:	f7f9 fb7b 	bl	8001cda <_isatty>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d102      	bne.n	80085ee <_isatty_r+0x1a>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	b103      	cbz	r3, 80085ee <_isatty_r+0x1a>
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	200147d4 	.word	0x200147d4

080085f4 <_init>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr

08008600 <_fini>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr
